pragma circom 2.1.0;
pragma custom_templates;

include "iszero.circom";
include "poseidon.circom";
include "<%- verifierCircuitName %>.verifier.circom";

<% if(!hasCompressor) { -%>

template CalculateEvalsHash() {
    signal input evals[<%- starkInfo.evMap.length %>][3];

    signal output sv_evalsHash[4];

<%      for (let i=0; i<starkInfo.evMap.length; i++) {
            transcriptEvals.put(`evals[${i}]`, 3);
        }
        transcriptEvals.getHash("sv_evalsHash"); -%>
<%-     transcriptEvals.getCode(); %>
}

template CalculateFinalPolHash() {
    signal input finalPol[<%- 1 << starkInfo.starkStruct.steps[starkInfo.starkStruct.steps.length-1].nBits %>][3];

    signal output sv_finalPolHash[4];

<%      for (let j=0; j< 1<<starkInfo.starkStruct.steps[starkInfo.starkStruct.steps.length-1].nBits; j++ ) {
            transcriptFinalPol.put(`finalPol[${j}]`, 3);
        }
        transcriptFinalPol.getHash("sv_finalPolHash"); -%>
<%-     transcriptFinalPol.getCode(); %>
}

<% } -%>

template Main() {

<%  if(!hasCompressor) { -%> 
    signal input subproofValues[<%- starkInfo.nSubproofValues %>][3];
<%  } %>

<% for (let i = 0; i < starkInfo.nStages + 1; ++i) { -%>
    signal input root<%- i+1 %>[4];
<% } -%>

<% for (let i = 0; i < starkInfo.nStages + 1; ++i) { -%>
<%  if(starkInfo.mapSectionsN[`cm${i+1}`]) { -%>
    signal input s0_vals<%- i+1 %>[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.mapSectionsN[`cm${i+1}`] %>];
<%  } -%>
<% } -%>
    signal input s0_valsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.nConstants %>];

<% for (let i = 0; i < starkInfo.nStages + 1; ++i) { -%>
<%  if(starkInfo.mapSectionsN[`cm${i+1}`]) { -%>
    signal input s0_siblings<%- i+1 %>[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];
<%  } -%>
<% } -%>
    signal input s0_siblingsC[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[0].nBits %>][4];

    signal input evals[<%- starkInfo.evMap.length %>][3];

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    signal input s<%- i %>_root[4];
<% } -%>

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    signal input s<%- i %>_vals[<%- starkInfo.starkStruct.nQueries %>][<%- (1 << (starkInfo.starkStruct.steps[i-1].nBits - starkInfo.starkStruct.steps[i].nBits))*3 %>];
<% } -%>

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    signal input s<%- i %>_siblings[<%- starkInfo.starkStruct.nQueries %>][<%- starkInfo.starkStruct.steps[i].nBits %>][4];
<% } -%>

    signal input finalPol[<%- 1 << starkInfo.starkStruct.steps[starkInfo.starkStruct.steps.length-1].nBits %>][3];

<%  let transcriptValues = []; -%>
<%  let inOut = hasCompressor ? 'input' : 'output'; -%>
    signal <%- inOut %> sv_circuitType;
<%  transcriptValues.push("sv_circuitType"); -%>
    signal <%- inOut %> sv_aggregationTypes[<%- nSubproofValues %>];
<%  transcriptValues.push("sv_aggregationTypes"); -%>
    signal <%- inOut %> sv_subproofValues[<%- nSubproofValues %>][3];
<%  transcriptValues.push("sv_subproofValues"); -%>
    signal <%- inOut %> sv_rootC[4];
<%      transcriptValues.push(`sv_rootC`); -%>
<%  for (let i = 0; i < nChallengesStages.length + 1; ++i) { -%>
    signal <%- inOut %> sv_root<%- i+1 %>[4];
<%      transcriptValues.push(`sv_root${i+1}`); -%>
<%  } -%>
    signal <%- inOut %> sv_evalsHash[4];
<%  transcriptValues.push("sv_evalsHash"); -%>
<%      for(let i = 1; i < stepsFRI.length; i++) { -%>
    signal <%- inOut %> sv_s<%- i %>_root[4];
<%  transcriptValues.push(`sv_s${i}_root`); -%>
<%      } -%>
    signal <%- inOut %> sv_finalPolHash[4];
<%  transcriptValues.push("sv_finalPolHash"); -%>

    signal input publics[<%- nPublics %>];

    signal input challenges[<%- nChallengesStages.reduce((nc, acc) => nc + acc, 0) + 4 %>][3];

    signal input challengesFRISteps[<%- stepsFRI.length + 1 %>][3];

    signal input rootCRecursive2[4];

<%  if(inOut === "output") { -%>
    sv_circuitType <== <%- circuitType %>;
<%  if(nSubproofValues > 0) { -%>
    sv_aggregationTypes <== [<%- aggregationTypes.map(a => a.aggType).join(",") %>];
<%  } -%>
<%  for (let i = 0; i < nSubproofValues; ++i) { -%>
    sv_subproofValues[<%- i %>] <== subproofValues[<%- i %>];
<%  } -%>
<%  for (let i = 0; i < starkInfo.nStages; ++i) { -%>
    sv_root<%- i+1 %> <== root<%- i+1 %>;
<%  } -%>
<%  for (let i = starkInfo.nStages; i < nChallengesStages.length; ++i) { -%>
    sv_root<%- i+1 %> <== [0,0,0,0];
<%  } -%>
    sv_root<%- nChallengesStages.length + 1 %> <== root<%- nChallengesStages.length + 1 %>;
    sv_evalsHash <== CalculateEvalsHash()(evals);
<%  let friCounter = 0; -%>
<%  for(let i = 1; i < stepsFRI.length; i++) { -%>
<%     if(starkInfo.starkStruct.steps[friCounter].nBits === stepsFRI[i - 1].nBits) { -%>
    sv_s<%- i %>_root <== s<%- ++friCounter %>_root;
<%     } else { -%>
    sv_s<%- i %>_root <== [0,0,0,0];
<%     } -%>
<%  } -%>
    sv_finalPolHash <== CalculateFinalPolHash()(finalPol);
<% } -%>

    component sv = StarkVerifier<%- starkInfo.subproofId %>();

<% for (let i = 0; i < starkInfo.nStages + 1; ++i) { -%>
    sv.root<%- i+1 %> <== root<%- i + 1 %>;
<% } -%>

<% for (let i = 0; i < starkInfo.nStages + 1; ++i) { -%>
<%  if(starkInfo.mapSectionsN[`cm${i+1}`]) { -%>
    sv.s0_siblings<%- i+1 %> <== s0_siblings<%- i+1 %>;
<% } -%>
<% } -%>
    sv.s0_siblingsC <== s0_siblingsC;

<% for (let i = 0; i < starkInfo.nStages + 1; ++i) { -%>
<%  if(starkInfo.mapSectionsN[`cm${i+1}`]) { -%>
    sv.s0_vals<%- i+1 %> <== s0_vals<%- i+1 %>;
<%  } -%>
<% } -%>
    sv.s0_valsC <== s0_valsC;

    sv.evals <== evals;
    
<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    sv.s<%- i %>_root <== s<%- i %>_root;
<% } -%>

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    sv.s<%- i %>_siblings <== s<%- i %>_siblings;
<% } -%>

<% for(let i = 1; i < starkInfo.starkStruct.steps.length; i++) { -%>
    sv.s<%- i %>_vals <== s<%- i %>_vals;
<% } -%>

    sv.finalPol <== finalPol;

<%  if(!hasCompressor && nSubproofValues > 0) { -%>
    sv.subproofValues <== subproofValues;
<%  } -%>

<%  if(!hasCompressor) { -%>
    for(var i = 0; i < <%- nPublics %>; i++) {
        sv.publics[i] <== publics[i];
    }
<%  let c = 0; -%>
<%  for(let i = 0; i < nChallengesStages.length; ++i) { -%>
<%      for(let j = 0; j < nChallengesStages[i]; ++j) { -%>
<%          if(i < starkInfo.nStages && j < starkInfo.numChallenges[i]) { -%>
    sv.challengesStage<%- i + 1 %>[<%-j %>] <== challenges[<%- c++ %>];
<%          } else { -%>
<%                c++; -%>
<%          } -%> 
<%      } -%>
<%  } -%>
    sv.challengeQ <== challenges[<%- c++ %>];
    sv.challengeXi <== challenges[<%- c++ %>];
    sv.challengesFRI[0] <== challenges[<%- c++ %>];
    sv.challengesFRI[1] <== challenges[<%- c++ %>];
<%  c = 0; %>
<%  for(let i = 0; i < stepsFRI.length; ++i) { -%>
<%      if(starkInfo.starkStruct.steps[c].nBits === stepsFRI[i].nBits) { -%>
    sv.challengesFRISteps[<%- c++ %>] <== challengesFRISteps[<%- i %>];
<%      } -%> 
<%  } -%>
    sv.challengesFRISteps[<%- starkInfo.starkStruct.steps.length %>] <== challengesFRISteps[<%- stepsFRI.length %>];
<%  } else { -%>
<%  let nPublicsInps = 0; -%>
    sv.publics[<%- nPublicsInps++ %>] <== sv_circuitType;

<%  if(nSubproofValues > 0) { -%>
    for(var i = 0; i < <%- nSubproofValues %>; i++) {
        sv.publics[<%- nPublicsInps %> + i] <== sv_aggregationTypes[i];
    }
<%  nPublicsInps += nSubproofValues; -%>

    for(var i = 0; i < <%- nSubproofValues %>; i++) {
        sv.publics[<%- nPublicsInps %> + 3*i] <== sv_subproofValues[i][0];
        sv.publics[<%- nPublicsInps %> + 3*i + 1] <== sv_subproofValues[i][1];
        sv.publics[<%- nPublicsInps %> + 3*i + 2] <== sv_subproofValues[i][2];
    }
<%  nPublicsInps += 3*nSubproofValues; -%>
<%  } -%>

    for(var i = 0; i < 4; i++) {
        sv.publics[<%- nPublicsInps %> + i] <== sv_rootC[i];
    }
<%  nPublicsInps += 4 -%>

<%  for (let i = 0; i < nChallengesStages.length + 1; i++) { -%>
    for(var i = 0; i < 4; i++) {
        sv.publics[<%- nPublicsInps %> + i] <== sv_root<%- i+1 %>[i];
    }
<%  nPublicsInps += 4 -%>
<%  } -%>

    for(var i = 0; i < 4; i++) {
        sv.publics[<%- nPublicsInps %> + i] <== sv_evalsHash[i];
    }
<%  nPublicsInps += 4 -%>

<%  for(let i = 1; i < stepsFRI.length; i++) { -%>
    for(var i = 0; i < 4; i++) {
        sv.publics[<%- nPublicsInps %> + i] <== sv_s<%- i %>_root[i];
    }
<%  nPublicsInps += 4 -%>
<%  } -%>

    for(var i = 0; i < 4; i++) {
        sv.publics[<%- nPublicsInps %> + i] <== sv_finalPolHash[i];
    }
<%  nPublicsInps += 4 -%>

    for(var i = 0; i < <%- nPublics %>; i++) {
        sv.publics[<%- nPublicsInps %> + i] <== publics[i];
    }
<%  nPublicsInps += nPublics -%>

    for(var i = 0; i < <%- nChallengesStages.reduce((nc, acc) => nc + acc, 0) + 4 %>; i++) {
        sv.publics[<%- nPublicsInps %> + 3*i] <== challenges[i][0];
        sv.publics[<%- nPublicsInps %> + 3*i+1] <== challenges[i][1];
        sv.publics[<%- nPublicsInps %> + 3*i+2] <== challenges[i][2];
    }
<%  nPublicsInps += (nChallengesStages.reduce((nc, acc) => nc + acc, 0) + 4)*3; -%>

    for(var i = 0; i < <%- stepsFRI.length + 1 %>; i++) {
        sv.publics[<%- nPublicsInps %> + 3*i] <== challengesFRISteps[i][0];
        sv.publics[<%- nPublicsInps %> + 3*i+1] <== challengesFRISteps[i][1];
        sv.publics[<%- nPublicsInps %> + 3*i+2] <== challengesFRISteps[i][2];
    }
<%  nPublicsInps += (stepsFRI.length + 1)*3; -%>
<%  } -%>  
<%  if(inOut === "output") { -%> 
    sv_rootC <== sv.rootC;
<%  } -%>    
}

<% const publics = []; -%>
<% if(inOut === "input") publics.push(...transcriptValues); -%>
<% publics.push(...["publics", "challenges", "challengesFRISteps", "rootCRecursive2"]); -%>
component main {public [<%- publics.join(", ") %>]} = Main();
