#include <stdio.h>
#include <iostream>
#include <assert.h>
#include "circom.hpp"
#include "calcwit.hpp"
void Poseidon12_0_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void Poseidon12_0_run(uint ctx_index,Circom_CalcWit* ctx);
void Poseidon_1_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void Poseidon_1_run(uint ctx_index,Circom_CalcWit* ctx);
void Num2Bits_2_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void Num2Bits_2_run(uint ctx_index,Circom_CalcWit* ctx);
void Num2Bits_3_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void Num2Bits_3_run(uint ctx_index,Circom_CalcWit* ctx);
void CompConstant_4_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void CompConstant_4_run(uint ctx_index,Circom_CalcWit* ctx);
void AliasCheck_5_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void AliasCheck_5_run(uint ctx_index,Circom_CalcWit* ctx);
void Num2Bits_strict_6_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void Num2Bits_strict_6_run(uint ctx_index,Circom_CalcWit* ctx);
void calculateFRIQueries0_7_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void calculateFRIQueries0_7_run(uint ctx_index,Circom_CalcWit* ctx);
void Transcript0_8_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void Transcript0_8_run(uint ctx_index,Circom_CalcWit* ctx);
void CMul_9_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void CMul_9_run(uint ctx_index,Circom_CalcWit* ctx);
void CInv_10_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void CInv_10_run(uint ctx_index,Circom_CalcWit* ctx);
void VerifyEvaluations0_11_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void VerifyEvaluations0_11_run_parallel(uint ctx_index,Circom_CalcWit* ctx);
void Poseidon_12_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void Poseidon_12_run(uint ctx_index,Circom_CalcWit* ctx);
void LinearHash_13_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void LinearHash_13_run(uint ctx_index,Circom_CalcWit* ctx);
void CustPoseidon12_14_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void CustPoseidon12_14_run(uint ctx_index,Circom_CalcWit* ctx);
void CustPoseidon_15_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void CustPoseidon_15_run(uint ctx_index,Circom_CalcWit* ctx);
void Merkle_16_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void Merkle_16_run(uint ctx_index,Circom_CalcWit* ctx);
void MerkleHash_17_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void MerkleHash_17_run(uint ctx_index,Circom_CalcWit* ctx);
void VerifyMerkleHash_18_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void VerifyMerkleHash_18_run_parallel(uint ctx_index,Circom_CalcWit* ctx);
void LinearHash_19_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void LinearHash_19_run(uint ctx_index,Circom_CalcWit* ctx);
void MerkleHash_20_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void MerkleHash_20_run(uint ctx_index,Circom_CalcWit* ctx);
void VerifyMerkleHash_21_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void VerifyMerkleHash_21_run_parallel(uint ctx_index,Circom_CalcWit* ctx);
void LinearHash_22_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void LinearHash_22_run(uint ctx_index,Circom_CalcWit* ctx);
void MerkleHash_23_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void MerkleHash_23_run(uint ctx_index,Circom_CalcWit* ctx);
void VerifyMerkleHash_24_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void VerifyMerkleHash_24_run_parallel(uint ctx_index,Circom_CalcWit* ctx);
void LinearHash_25_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void LinearHash_25_run(uint ctx_index,Circom_CalcWit* ctx);
void MerkleHash_26_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void MerkleHash_26_run(uint ctx_index,Circom_CalcWit* ctx);
void VerifyMerkleHash_27_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void VerifyMerkleHash_27_run_parallel(uint ctx_index,Circom_CalcWit* ctx);
void LinearHash_28_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void LinearHash_28_run(uint ctx_index,Circom_CalcWit* ctx);
void Merkle_29_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void Merkle_29_run(uint ctx_index,Circom_CalcWit* ctx);
void MerkleHash_30_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void MerkleHash_30_run(uint ctx_index,Circom_CalcWit* ctx);
void VerifyMerkleHash_31_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void VerifyMerkleHash_31_run_parallel(uint ctx_index,Circom_CalcWit* ctx);
void Merkle_32_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void Merkle_32_run(uint ctx_index,Circom_CalcWit* ctx);
void MerkleHash_33_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void MerkleHash_33_run(uint ctx_index,Circom_CalcWit* ctx);
void VerifyMerkleHash_34_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void VerifyMerkleHash_34_run_parallel(uint ctx_index,Circom_CalcWit* ctx);
void MapValues0_35_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void MapValues0_35_run(uint ctx_index,Circom_CalcWit* ctx);
void CalculateFRIPolValue0_36_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void CalculateFRIPolValue0_36_run_parallel(uint ctx_index,Circom_CalcWit* ctx);
void TreeSelector4_37_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void TreeSelector4_37_run(uint ctx_index,Circom_CalcWit* ctx);
void TreeSelector_38_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void TreeSelector_38_run(uint ctx_index,Circom_CalcWit* ctx);
void VerifyQuery0_39_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void VerifyQuery0_39_run_parallel(uint ctx_index,Circom_CalcWit* ctx);
void BitReverse_40_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void BitReverse_40_run(uint ctx_index,Circom_CalcWit* ctx);
void FFT4_41_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void FFT4_41_run(uint ctx_index,Circom_CalcWit* ctx);
void FFT4_42_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void FFT4_42_run(uint ctx_index,Circom_CalcWit* ctx);
void FFT4_43_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void FFT4_43_run(uint ctx_index,Circom_CalcWit* ctx);
void FFT4_44_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void FFT4_44_run(uint ctx_index,Circom_CalcWit* ctx);
void FFT4_45_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void FFT4_45_run(uint ctx_index,Circom_CalcWit* ctx);
void Permute_46_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void Permute_46_run(uint ctx_index,Circom_CalcWit* ctx);
void FFTBig_47_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void FFTBig_47_run(uint ctx_index,Circom_CalcWit* ctx);
void FFT_48_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void FFT_48_run(uint ctx_index,Circom_CalcWit* ctx);
void EvPol4_49_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void EvPol4_49_run(uint ctx_index,Circom_CalcWit* ctx);
void EvalPol_50_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void EvalPol_50_run(uint ctx_index,Circom_CalcWit* ctx);
void VerifyFRI0_51_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void VerifyFRI0_51_run_parallel(uint ctx_index,Circom_CalcWit* ctx);
void TreeSelector_52_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void TreeSelector_52_run(uint ctx_index,Circom_CalcWit* ctx);
void VerifyFRI0_53_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void VerifyFRI0_53_run_parallel(uint ctx_index,Circom_CalcWit* ctx);
void BitReverse_54_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void BitReverse_54_run(uint ctx_index,Circom_CalcWit* ctx);
void FFT4_55_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void FFT4_55_run(uint ctx_index,Circom_CalcWit* ctx);
void FFT4_56_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void FFT4_56_run(uint ctx_index,Circom_CalcWit* ctx);
void FFT4_57_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void FFT4_57_run(uint ctx_index,Circom_CalcWit* ctx);
void Permute_58_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void Permute_58_run(uint ctx_index,Circom_CalcWit* ctx);
void FFTBig_59_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void FFTBig_59_run(uint ctx_index,Circom_CalcWit* ctx);
void FFT_60_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void FFT_60_run(uint ctx_index,Circom_CalcWit* ctx);
void VerifyFinalPol0_61_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void VerifyFinalPol0_61_run_parallel(uint ctx_index,Circom_CalcWit* ctx);
void StarkVerifier0_62_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather);
void StarkVerifier0_62_run(uint ctx_index,Circom_CalcWit* ctx);
void CNST_0(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size);
void M_1(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size);
void P_2(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size);
void S_3(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size);
void roots_4(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size);
void rev_5(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size);
void CMulAddF_6(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size);
void invroots_7(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size);
Circom_TemplateFunction _functionTable[63] = { 
Poseidon12_0_run,
Poseidon_1_run,
Num2Bits_2_run,
Num2Bits_3_run,
CompConstant_4_run,
AliasCheck_5_run,
Num2Bits_strict_6_run,
calculateFRIQueries0_7_run,
Transcript0_8_run,
CMul_9_run,
CInv_10_run,
NULL,
Poseidon_12_run,
LinearHash_13_run,
CustPoseidon12_14_run,
CustPoseidon_15_run,
Merkle_16_run,
MerkleHash_17_run,
NULL,
LinearHash_19_run,
MerkleHash_20_run,
NULL,
LinearHash_22_run,
MerkleHash_23_run,
NULL,
LinearHash_25_run,
MerkleHash_26_run,
NULL,
LinearHash_28_run,
Merkle_29_run,
MerkleHash_30_run,
NULL,
Merkle_32_run,
MerkleHash_33_run,
NULL,
MapValues0_35_run,
NULL,
TreeSelector4_37_run,
TreeSelector_38_run,
NULL,
BitReverse_40_run,
FFT4_41_run,
FFT4_42_run,
FFT4_43_run,
FFT4_44_run,
FFT4_45_run,
Permute_46_run,
FFTBig_47_run,
FFT_48_run,
EvPol4_49_run,
EvalPol_50_run,
NULL,
TreeSelector_52_run,
NULL,
BitReverse_54_run,
FFT4_55_run,
FFT4_56_run,
FFT4_57_run,
Permute_58_run,
FFTBig_59_run,
FFT_60_run,
NULL,
StarkVerifier0_62_run };
Circom_TemplateFunction _functionTableParallel[63] = { 
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
VerifyEvaluations0_11_run_parallel,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
VerifyMerkleHash_18_run_parallel,
NULL,
NULL,
VerifyMerkleHash_21_run_parallel,
NULL,
NULL,
VerifyMerkleHash_24_run_parallel,
NULL,
NULL,
VerifyMerkleHash_27_run_parallel,
NULL,
NULL,
NULL,
VerifyMerkleHash_31_run_parallel,
NULL,
NULL,
VerifyMerkleHash_34_run_parallel,
NULL,
CalculateFRIPolValue0_36_run_parallel,
NULL,
NULL,
VerifyQuery0_39_run_parallel,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
VerifyFRI0_51_run_parallel,
NULL,
VerifyFRI0_53_run_parallel,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
VerifyFinalPol0_61_run_parallel,
NULL };
uint get_main_input_signal_start() {return 1;}

uint get_main_input_signal_no() {return 3484;}

uint get_total_signal_no() {return 149944;}

uint get_number_of_components() {return 2573;}

uint get_size_of_input_hashmap() {return 256;}

uint get_size_of_witness() {return 104618;}

uint get_size_of_constants() {return 1259;}

uint get_size_of_io_map() {return 7;}

void release_memory_component(Circom_CalcWit* ctx, uint pos) {{

if (pos != 0){{

if(ctx->componentMemory[pos].subcomponents)
delete []ctx->componentMemory[pos].subcomponents;

if(ctx->componentMemory[pos].subcomponentsParallel)
delete []ctx->componentMemory[pos].subcomponentsParallel;

if(ctx->componentMemory[pos].outputIsSet)
delete []ctx->componentMemory[pos].outputIsSet;

if(ctx->componentMemory[pos].mutexes)
delete []ctx->componentMemory[pos].mutexes;

if(ctx->componentMemory[pos].cvs)
delete []ctx->componentMemory[pos].cvs;

if(ctx->componentMemory[pos].sbct)
delete []ctx->componentMemory[pos].sbct;

}}


}}


// function declarations
void CNST_0(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size){
FrElement* circuitConstants = ctx->circuitConstants;
FrElement expaux[2];
std::string myTemplateName = "CNST";
u64 myId = componentFather;
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[79]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[80]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[81]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[82]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[83]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[84]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[85]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[86]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[87]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[88]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[89]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[90]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[91]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[92]);
}
{
PFrElement aux_dest = &lvar[15];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[93]);
}
{
PFrElement aux_dest = &lvar[16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[94]);
}
{
PFrElement aux_dest = &lvar[17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[95]);
}
{
PFrElement aux_dest = &lvar[18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[96]);
}
{
PFrElement aux_dest = &lvar[19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[97]);
}
{
PFrElement aux_dest = &lvar[20];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[98]);
}
{
PFrElement aux_dest = &lvar[21];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[99]);
}
{
PFrElement aux_dest = &lvar[22];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[100]);
}
{
PFrElement aux_dest = &lvar[23];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[101]);
}
{
PFrElement aux_dest = &lvar[24];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[102]);
}
{
PFrElement aux_dest = &lvar[25];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[103]);
}
{
PFrElement aux_dest = &lvar[26];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[104]);
}
{
PFrElement aux_dest = &lvar[27];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[105]);
}
{
PFrElement aux_dest = &lvar[28];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[106]);
}
{
PFrElement aux_dest = &lvar[29];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[107]);
}
{
PFrElement aux_dest = &lvar[30];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[108]);
}
{
PFrElement aux_dest = &lvar[31];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[109]);
}
{
PFrElement aux_dest = &lvar[32];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[110]);
}
{
PFrElement aux_dest = &lvar[33];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[111]);
}
{
PFrElement aux_dest = &lvar[34];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[112]);
}
{
PFrElement aux_dest = &lvar[35];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[113]);
}
{
PFrElement aux_dest = &lvar[36];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[114]);
}
{
PFrElement aux_dest = &lvar[37];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[115]);
}
{
PFrElement aux_dest = &lvar[38];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[116]);
}
{
PFrElement aux_dest = &lvar[39];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[117]);
}
{
PFrElement aux_dest = &lvar[40];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[118]);
}
{
PFrElement aux_dest = &lvar[41];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[119]);
}
{
PFrElement aux_dest = &lvar[42];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[120]);
}
{
PFrElement aux_dest = &lvar[43];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[121]);
}
{
PFrElement aux_dest = &lvar[44];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[123]);
}
{
PFrElement aux_dest = &lvar[45];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[125]);
}
{
PFrElement aux_dest = &lvar[46];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[127]);
}
{
PFrElement aux_dest = &lvar[47];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[129]);
}
{
PFrElement aux_dest = &lvar[48];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[131]);
}
{
PFrElement aux_dest = &lvar[49];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[133]);
}
{
PFrElement aux_dest = &lvar[50];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[135]);
}
{
PFrElement aux_dest = &lvar[51];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[137]);
}
{
PFrElement aux_dest = &lvar[52];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[139]);
}
{
PFrElement aux_dest = &lvar[53];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[141]);
}
{
PFrElement aux_dest = &lvar[54];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[143]);
}
{
PFrElement aux_dest = &lvar[55];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[145]);
}
{
PFrElement aux_dest = &lvar[56];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[147]);
}
{
PFrElement aux_dest = &lvar[57];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[149]);
}
{
PFrElement aux_dest = &lvar[58];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[151]);
}
{
PFrElement aux_dest = &lvar[59];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[153]);
}
{
PFrElement aux_dest = &lvar[60];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[155]);
}
{
PFrElement aux_dest = &lvar[61];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[13]);
}
{
PFrElement aux_dest = &lvar[62];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[157]);
}
{
PFrElement aux_dest = &lvar[63];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[159]);
}
{
PFrElement aux_dest = &lvar[64];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[160]);
}
{
PFrElement aux_dest = &lvar[65];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[161]);
}
{
PFrElement aux_dest = &lvar[66];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[163]);
}
{
PFrElement aux_dest = &lvar[67];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[165]);
}
{
PFrElement aux_dest = &lvar[68];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[167]);
}
{
PFrElement aux_dest = &lvar[69];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[169]);
}
{
PFrElement aux_dest = &lvar[70];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[171]);
}
{
PFrElement aux_dest = &lvar[71];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[173]);
}
{
PFrElement aux_dest = &lvar[72];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[175]);
}
{
PFrElement aux_dest = &lvar[73];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[177]);
}
{
PFrElement aux_dest = &lvar[74];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[179]);
}
{
PFrElement aux_dest = &lvar[75];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[181]);
}
{
PFrElement aux_dest = &lvar[76];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[183]);
}
{
PFrElement aux_dest = &lvar[77];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[185]);
}
{
PFrElement aux_dest = &lvar[78];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[187]);
}
{
PFrElement aux_dest = &lvar[79];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[189]);
}
{
PFrElement aux_dest = &lvar[80];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[191]);
}
{
PFrElement aux_dest = &lvar[81];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[193]);
}
{
PFrElement aux_dest = &lvar[82];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[195]);
}
{
PFrElement aux_dest = &lvar[83];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[196]);
}
{
PFrElement aux_dest = &lvar[84];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[198]);
}
{
PFrElement aux_dest = &lvar[85];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[200]);
}
{
PFrElement aux_dest = &lvar[86];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[202]);
}
{
PFrElement aux_dest = &lvar[87];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[204]);
}
{
PFrElement aux_dest = &lvar[88];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[206]);
}
{
PFrElement aux_dest = &lvar[89];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[208]);
}
{
PFrElement aux_dest = &lvar[90];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[210]);
}
{
PFrElement aux_dest = &lvar[91];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[212]);
}
{
PFrElement aux_dest = &lvar[92];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[214]);
}
{
PFrElement aux_dest = &lvar[93];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[216]);
}
{
PFrElement aux_dest = &lvar[94];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[218]);
}
{
PFrElement aux_dest = &lvar[95];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[220]);
}
{
PFrElement aux_dest = &lvar[96];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[222]);
}
{
PFrElement aux_dest = &lvar[97];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[224]);
}
{
PFrElement aux_dest = &lvar[98];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[226]);
}
{
PFrElement aux_dest = &lvar[99];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[228]);
}
{
PFrElement aux_dest = &lvar[100];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[230]);
}
{
PFrElement aux_dest = &lvar[101];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[232]);
}
{
PFrElement aux_dest = &lvar[102];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[234]);
}
{
PFrElement aux_dest = &lvar[103];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[236]);
}
{
PFrElement aux_dest = &lvar[104];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[238]);
}
{
PFrElement aux_dest = &lvar[105];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[240]);
}
{
PFrElement aux_dest = &lvar[106];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[242]);
}
{
PFrElement aux_dest = &lvar[107];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[244]);
}
{
PFrElement aux_dest = &lvar[108];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[246]);
}
{
PFrElement aux_dest = &lvar[109];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[248]);
}
{
PFrElement aux_dest = &lvar[110];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[250]);
}
{
PFrElement aux_dest = &lvar[111];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[252]);
}
{
PFrElement aux_dest = &lvar[112];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[254]);
}
{
PFrElement aux_dest = &lvar[113];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[256]);
}
{
PFrElement aux_dest = &lvar[114];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[258]);
}
{
PFrElement aux_dest = &lvar[115];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[260]);
}
{
PFrElement aux_dest = &lvar[116];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[262]);
}
{
PFrElement aux_dest = &lvar[117];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[264]);
}
{
PFrElement aux_dest = &lvar[118];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[266]);
}
// return bucket
Fr_copy(destination,&lvar[((1 * Fr_toInt(&lvar[0])) + 1)]);
return;
}

void M_1(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size){
FrElement* circuitConstants = ctx->circuitConstants;
FrElement expaux[3];
std::string myTemplateName = "M";
u64 myId = componentFather;
{
PFrElement aux_dest = &lvar[146];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[147];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[148];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[149];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[150];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[151];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[152];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[153];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[154];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[155];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[156];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[157];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[158];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[159];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[31]);
}
{
PFrElement aux_dest = &lvar[160];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[161];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[162];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[163];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[164];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[165];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[166];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[167];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[168];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[169];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[170];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[171];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[172];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[31]);
}
{
PFrElement aux_dest = &lvar[173];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[174];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[175];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[176];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[177];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[178];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[179];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[180];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[181];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[182];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[183];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[184];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[185];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[31]);
}
{
PFrElement aux_dest = &lvar[186];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[187];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[188];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[189];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[190];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[191];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[192];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[193];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[194];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[195];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[196];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[197];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[198];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[31]);
}
{
PFrElement aux_dest = &lvar[199];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[200];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[201];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[202];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[203];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[204];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[205];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[206];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[207];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[208];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[209];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[210];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[211];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[31]);
}
{
PFrElement aux_dest = &lvar[212];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[213];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[214];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[215];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[216];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[217];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[218];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[219];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[220];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[221];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[222];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[223];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[224];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[31]);
}
{
PFrElement aux_dest = &lvar[225];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[226];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[227];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[228];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[229];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[230];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[231];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[232];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[233];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[234];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[235];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[236];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[237];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[31]);
}
{
PFrElement aux_dest = &lvar[238];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[239];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[240];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[241];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[242];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[243];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[244];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[245];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[246];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[247];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[248];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[249];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[250];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[31]);
}
{
PFrElement aux_dest = &lvar[251];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[252];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[253];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[254];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[255];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[256];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[257];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[258];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[259];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[260];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[261];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[262];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[263];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[31]);
}
{
PFrElement aux_dest = &lvar[264];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[265];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[266];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[267];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[268];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[269];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[270];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[271];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[272];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[273];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[274];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[275];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[276];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[31]);
}
{
PFrElement aux_dest = &lvar[277];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[278];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[279];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[280];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[281];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[282];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[283];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[284];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[285];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[286];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[287];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[288];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[289];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[31]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[146],12);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[158],12);
}
{
PFrElement aux_dest = &lvar[26];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[170],12);
}
{
PFrElement aux_dest = &lvar[38];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[182],12);
}
{
PFrElement aux_dest = &lvar[50];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[194],12);
}
{
PFrElement aux_dest = &lvar[62];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[206],12);
}
{
PFrElement aux_dest = &lvar[74];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[218],12);
}
{
PFrElement aux_dest = &lvar[86];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[230],12);
}
{
PFrElement aux_dest = &lvar[98];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[242],12);
}
{
PFrElement aux_dest = &lvar[110];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[254],12);
}
{
PFrElement aux_dest = &lvar[122];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[266],12);
}
{
PFrElement aux_dest = &lvar[134];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[278],12);
}
// return bucket
Fr_copy(destination,&lvar[(((12 * Fr_toInt(&lvar[0])) + (1 * Fr_toInt(&lvar[1]))) + 2)]);
return;
}

void P_2(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size){
FrElement* circuitConstants = ctx->circuitConstants;
FrElement expaux[3];
std::string myTemplateName = "P";
u64 myId = componentFather;
{
PFrElement aux_dest = &lvar[146];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[147];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[267]);
}
{
PFrElement aux_dest = &lvar[148];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[268]);
}
{
PFrElement aux_dest = &lvar[149];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[269]);
}
{
PFrElement aux_dest = &lvar[150];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[270]);
}
{
PFrElement aux_dest = &lvar[151];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[271]);
}
{
PFrElement aux_dest = &lvar[152];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[272]);
}
{
PFrElement aux_dest = &lvar[153];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[273]);
}
{
PFrElement aux_dest = &lvar[154];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[274]);
}
{
PFrElement aux_dest = &lvar[155];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[275]);
}
{
PFrElement aux_dest = &lvar[156];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[276]);
}
{
PFrElement aux_dest = &lvar[157];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[277]);
}
{
PFrElement aux_dest = &lvar[158];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[159];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[278]);
}
{
PFrElement aux_dest = &lvar[160];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[279]);
}
{
PFrElement aux_dest = &lvar[161];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[280]);
}
{
PFrElement aux_dest = &lvar[162];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[281]);
}
{
PFrElement aux_dest = &lvar[163];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[282]);
}
{
PFrElement aux_dest = &lvar[164];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[283]);
}
{
PFrElement aux_dest = &lvar[165];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[284]);
}
{
PFrElement aux_dest = &lvar[166];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[285]);
}
{
PFrElement aux_dest = &lvar[167];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[286]);
}
{
PFrElement aux_dest = &lvar[168];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[287]);
}
{
PFrElement aux_dest = &lvar[169];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[288]);
}
{
PFrElement aux_dest = &lvar[170];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[171];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[289]);
}
{
PFrElement aux_dest = &lvar[172];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[290]);
}
{
PFrElement aux_dest = &lvar[173];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[291]);
}
{
PFrElement aux_dest = &lvar[174];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[292]);
}
{
PFrElement aux_dest = &lvar[175];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[293]);
}
{
PFrElement aux_dest = &lvar[176];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[294]);
}
{
PFrElement aux_dest = &lvar[177];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[295]);
}
{
PFrElement aux_dest = &lvar[178];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[296]);
}
{
PFrElement aux_dest = &lvar[179];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[297]);
}
{
PFrElement aux_dest = &lvar[180];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[298]);
}
{
PFrElement aux_dest = &lvar[181];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[287]);
}
{
PFrElement aux_dest = &lvar[182];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[183];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[299]);
}
{
PFrElement aux_dest = &lvar[184];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[300]);
}
{
PFrElement aux_dest = &lvar[185];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[301]);
}
{
PFrElement aux_dest = &lvar[186];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[302]);
}
{
PFrElement aux_dest = &lvar[187];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[303]);
}
{
PFrElement aux_dest = &lvar[188];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[304]);
}
{
PFrElement aux_dest = &lvar[189];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[305]);
}
{
PFrElement aux_dest = &lvar[190];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[306]);
}
{
PFrElement aux_dest = &lvar[191];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[307]);
}
{
PFrElement aux_dest = &lvar[192];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[297]);
}
{
PFrElement aux_dest = &lvar[193];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[286]);
}
{
PFrElement aux_dest = &lvar[194];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[195];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[308]);
}
{
PFrElement aux_dest = &lvar[196];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[309]);
}
{
PFrElement aux_dest = &lvar[197];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[310]);
}
{
PFrElement aux_dest = &lvar[198];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[311]);
}
{
PFrElement aux_dest = &lvar[199];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[312]);
}
{
PFrElement aux_dest = &lvar[200];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[313]);
}
{
PFrElement aux_dest = &lvar[201];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[314]);
}
{
PFrElement aux_dest = &lvar[202];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[315]);
}
{
PFrElement aux_dest = &lvar[203];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[306]);
}
{
PFrElement aux_dest = &lvar[204];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[296]);
}
{
PFrElement aux_dest = &lvar[205];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[285]);
}
{
PFrElement aux_dest = &lvar[206];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[207];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[316]);
}
{
PFrElement aux_dest = &lvar[208];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[317]);
}
{
PFrElement aux_dest = &lvar[209];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[318]);
}
{
PFrElement aux_dest = &lvar[210];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[319]);
}
{
PFrElement aux_dest = &lvar[211];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[320]);
}
{
PFrElement aux_dest = &lvar[212];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[321]);
}
{
PFrElement aux_dest = &lvar[213];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[322]);
}
{
PFrElement aux_dest = &lvar[214];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[314]);
}
{
PFrElement aux_dest = &lvar[215];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[305]);
}
{
PFrElement aux_dest = &lvar[216];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[295]);
}
{
PFrElement aux_dest = &lvar[217];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[284]);
}
{
PFrElement aux_dest = &lvar[218];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[219];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[323]);
}
{
PFrElement aux_dest = &lvar[220];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[324]);
}
{
PFrElement aux_dest = &lvar[221];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[325]);
}
{
PFrElement aux_dest = &lvar[222];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[326]);
}
{
PFrElement aux_dest = &lvar[223];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[327]);
}
{
PFrElement aux_dest = &lvar[224];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[328]);
}
{
PFrElement aux_dest = &lvar[225];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[321]);
}
{
PFrElement aux_dest = &lvar[226];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[313]);
}
{
PFrElement aux_dest = &lvar[227];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[304]);
}
{
PFrElement aux_dest = &lvar[228];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[294]);
}
{
PFrElement aux_dest = &lvar[229];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[283]);
}
{
PFrElement aux_dest = &lvar[230];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[231];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[329]);
}
{
PFrElement aux_dest = &lvar[232];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[330]);
}
{
PFrElement aux_dest = &lvar[233];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[331]);
}
{
PFrElement aux_dest = &lvar[234];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[332]);
}
{
PFrElement aux_dest = &lvar[235];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[333]);
}
{
PFrElement aux_dest = &lvar[236];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[327]);
}
{
PFrElement aux_dest = &lvar[237];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[320]);
}
{
PFrElement aux_dest = &lvar[238];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[312]);
}
{
PFrElement aux_dest = &lvar[239];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[303]);
}
{
PFrElement aux_dest = &lvar[240];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[293]);
}
{
PFrElement aux_dest = &lvar[241];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[282]);
}
{
PFrElement aux_dest = &lvar[242];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[243];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[334]);
}
{
PFrElement aux_dest = &lvar[244];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[335]);
}
{
PFrElement aux_dest = &lvar[245];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[336]);
}
{
PFrElement aux_dest = &lvar[246];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[337]);
}
{
PFrElement aux_dest = &lvar[247];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[332]);
}
{
PFrElement aux_dest = &lvar[248];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[326]);
}
{
PFrElement aux_dest = &lvar[249];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[319]);
}
{
PFrElement aux_dest = &lvar[250];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[311]);
}
{
PFrElement aux_dest = &lvar[251];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[302]);
}
{
PFrElement aux_dest = &lvar[252];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[292]);
}
{
PFrElement aux_dest = &lvar[253];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[281]);
}
{
PFrElement aux_dest = &lvar[254];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[255];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[338]);
}
{
PFrElement aux_dest = &lvar[256];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[339]);
}
{
PFrElement aux_dest = &lvar[257];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[340]);
}
{
PFrElement aux_dest = &lvar[258];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[336]);
}
{
PFrElement aux_dest = &lvar[259];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[331]);
}
{
PFrElement aux_dest = &lvar[260];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[325]);
}
{
PFrElement aux_dest = &lvar[261];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[318]);
}
{
PFrElement aux_dest = &lvar[262];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[310]);
}
{
PFrElement aux_dest = &lvar[263];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[301]);
}
{
PFrElement aux_dest = &lvar[264];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[291]);
}
{
PFrElement aux_dest = &lvar[265];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[280]);
}
{
PFrElement aux_dest = &lvar[266];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[267];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[341]);
}
{
PFrElement aux_dest = &lvar[268];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[342]);
}
{
PFrElement aux_dest = &lvar[269];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[339]);
}
{
PFrElement aux_dest = &lvar[270];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[335]);
}
{
PFrElement aux_dest = &lvar[271];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[330]);
}
{
PFrElement aux_dest = &lvar[272];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[324]);
}
{
PFrElement aux_dest = &lvar[273];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[317]);
}
{
PFrElement aux_dest = &lvar[274];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[309]);
}
{
PFrElement aux_dest = &lvar[275];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[300]);
}
{
PFrElement aux_dest = &lvar[276];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[290]);
}
{
PFrElement aux_dest = &lvar[277];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[279]);
}
{
PFrElement aux_dest = &lvar[278];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[279];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[343]);
}
{
PFrElement aux_dest = &lvar[280];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[341]);
}
{
PFrElement aux_dest = &lvar[281];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[338]);
}
{
PFrElement aux_dest = &lvar[282];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[334]);
}
{
PFrElement aux_dest = &lvar[283];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[329]);
}
{
PFrElement aux_dest = &lvar[284];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[323]);
}
{
PFrElement aux_dest = &lvar[285];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[316]);
}
{
PFrElement aux_dest = &lvar[286];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[308]);
}
{
PFrElement aux_dest = &lvar[287];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[299]);
}
{
PFrElement aux_dest = &lvar[288];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[289]);
}
{
PFrElement aux_dest = &lvar[289];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[278]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[146],12);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[158],12);
}
{
PFrElement aux_dest = &lvar[26];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[170],12);
}
{
PFrElement aux_dest = &lvar[38];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[182],12);
}
{
PFrElement aux_dest = &lvar[50];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[194],12);
}
{
PFrElement aux_dest = &lvar[62];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[206],12);
}
{
PFrElement aux_dest = &lvar[74];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[218],12);
}
{
PFrElement aux_dest = &lvar[86];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[230],12);
}
{
PFrElement aux_dest = &lvar[98];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[242],12);
}
{
PFrElement aux_dest = &lvar[110];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[254],12);
}
{
PFrElement aux_dest = &lvar[122];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[266],12);
}
{
PFrElement aux_dest = &lvar[134];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[278],12);
}
// return bucket
Fr_copy(destination,&lvar[(((12 * Fr_toInt(&lvar[0])) + (1 * Fr_toInt(&lvar[1]))) + 2)]);
return;
}

void S_3(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size){
FrElement* circuitConstants = ctx->circuitConstants;
FrElement expaux[2];
std::string myTemplateName = "S";
u64 myId = componentFather;
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[344]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[345]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[346]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[347]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[348]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[349]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[350]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[351]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[352]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[353]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[354]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[355]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[356]);
}
{
PFrElement aux_dest = &lvar[15];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[357]);
}
{
PFrElement aux_dest = &lvar[16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[358]);
}
{
PFrElement aux_dest = &lvar[17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[359]);
}
{
PFrElement aux_dest = &lvar[18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[360]);
}
{
PFrElement aux_dest = &lvar[19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[361]);
}
{
PFrElement aux_dest = &lvar[20];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[362]);
}
{
PFrElement aux_dest = &lvar[21];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[363]);
}
{
PFrElement aux_dest = &lvar[22];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[364]);
}
{
PFrElement aux_dest = &lvar[23];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[365]);
}
{
PFrElement aux_dest = &lvar[24];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[25];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[366]);
}
{
PFrElement aux_dest = &lvar[26];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[367]);
}
{
PFrElement aux_dest = &lvar[27];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[368]);
}
{
PFrElement aux_dest = &lvar[28];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[369]);
}
{
PFrElement aux_dest = &lvar[29];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[370]);
}
{
PFrElement aux_dest = &lvar[30];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[371]);
}
{
PFrElement aux_dest = &lvar[31];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[372]);
}
{
PFrElement aux_dest = &lvar[32];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[373]);
}
{
PFrElement aux_dest = &lvar[33];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[374]);
}
{
PFrElement aux_dest = &lvar[34];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[375]);
}
{
PFrElement aux_dest = &lvar[35];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[376]);
}
{
PFrElement aux_dest = &lvar[36];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[377]);
}
{
PFrElement aux_dest = &lvar[37];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[378]);
}
{
PFrElement aux_dest = &lvar[38];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[379]);
}
{
PFrElement aux_dest = &lvar[39];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[380]);
}
{
PFrElement aux_dest = &lvar[40];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[381]);
}
{
PFrElement aux_dest = &lvar[41];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[382]);
}
{
PFrElement aux_dest = &lvar[42];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[383]);
}
{
PFrElement aux_dest = &lvar[43];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[384]);
}
{
PFrElement aux_dest = &lvar[44];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[385]);
}
{
PFrElement aux_dest = &lvar[45];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[386]);
}
{
PFrElement aux_dest = &lvar[46];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[387]);
}
{
PFrElement aux_dest = &lvar[47];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[48];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[388]);
}
{
PFrElement aux_dest = &lvar[49];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[389]);
}
{
PFrElement aux_dest = &lvar[50];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[390]);
}
{
PFrElement aux_dest = &lvar[51];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[391]);
}
{
PFrElement aux_dest = &lvar[52];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[392]);
}
{
PFrElement aux_dest = &lvar[53];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[393]);
}
{
PFrElement aux_dest = &lvar[54];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[394]);
}
{
PFrElement aux_dest = &lvar[55];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[395]);
}
{
PFrElement aux_dest = &lvar[56];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[396]);
}
{
PFrElement aux_dest = &lvar[57];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[397]);
}
{
PFrElement aux_dest = &lvar[58];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[398]);
}
{
PFrElement aux_dest = &lvar[59];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[399]);
}
{
PFrElement aux_dest = &lvar[60];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[400]);
}
{
PFrElement aux_dest = &lvar[61];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[401]);
}
{
PFrElement aux_dest = &lvar[62];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[402]);
}
{
PFrElement aux_dest = &lvar[63];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[403]);
}
{
PFrElement aux_dest = &lvar[64];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[404]);
}
{
PFrElement aux_dest = &lvar[65];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[405]);
}
{
PFrElement aux_dest = &lvar[66];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[406]);
}
{
PFrElement aux_dest = &lvar[67];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[407]);
}
{
PFrElement aux_dest = &lvar[68];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[408]);
}
{
PFrElement aux_dest = &lvar[69];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[409]);
}
{
PFrElement aux_dest = &lvar[70];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[71];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[410]);
}
{
PFrElement aux_dest = &lvar[72];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[411]);
}
{
PFrElement aux_dest = &lvar[73];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[412]);
}
{
PFrElement aux_dest = &lvar[74];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[413]);
}
{
PFrElement aux_dest = &lvar[75];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[414]);
}
{
PFrElement aux_dest = &lvar[76];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[415]);
}
{
PFrElement aux_dest = &lvar[77];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[416]);
}
{
PFrElement aux_dest = &lvar[78];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[417]);
}
{
PFrElement aux_dest = &lvar[79];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[418]);
}
{
PFrElement aux_dest = &lvar[80];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[419]);
}
{
PFrElement aux_dest = &lvar[81];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[420]);
}
{
PFrElement aux_dest = &lvar[82];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[421]);
}
{
PFrElement aux_dest = &lvar[83];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[422]);
}
{
PFrElement aux_dest = &lvar[84];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[423]);
}
{
PFrElement aux_dest = &lvar[85];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[424]);
}
{
PFrElement aux_dest = &lvar[86];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[425]);
}
{
PFrElement aux_dest = &lvar[87];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[426]);
}
{
PFrElement aux_dest = &lvar[88];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[427]);
}
{
PFrElement aux_dest = &lvar[89];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[428]);
}
{
PFrElement aux_dest = &lvar[90];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[429]);
}
{
PFrElement aux_dest = &lvar[91];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[430]);
}
{
PFrElement aux_dest = &lvar[92];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[431]);
}
{
PFrElement aux_dest = &lvar[93];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[94];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[432]);
}
{
PFrElement aux_dest = &lvar[95];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[433]);
}
{
PFrElement aux_dest = &lvar[96];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[434]);
}
{
PFrElement aux_dest = &lvar[97];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[435]);
}
{
PFrElement aux_dest = &lvar[98];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[436]);
}
{
PFrElement aux_dest = &lvar[99];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[437]);
}
{
PFrElement aux_dest = &lvar[100];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[438]);
}
{
PFrElement aux_dest = &lvar[101];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[439]);
}
{
PFrElement aux_dest = &lvar[102];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[440]);
}
{
PFrElement aux_dest = &lvar[103];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[441]);
}
{
PFrElement aux_dest = &lvar[104];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[442]);
}
{
PFrElement aux_dest = &lvar[105];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[443]);
}
{
PFrElement aux_dest = &lvar[106];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[444]);
}
{
PFrElement aux_dest = &lvar[107];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[445]);
}
{
PFrElement aux_dest = &lvar[108];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[446]);
}
{
PFrElement aux_dest = &lvar[109];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[447]);
}
{
PFrElement aux_dest = &lvar[110];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[448]);
}
{
PFrElement aux_dest = &lvar[111];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[449]);
}
{
PFrElement aux_dest = &lvar[112];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[450]);
}
{
PFrElement aux_dest = &lvar[113];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[451]);
}
{
PFrElement aux_dest = &lvar[114];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[452]);
}
{
PFrElement aux_dest = &lvar[115];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[453]);
}
{
PFrElement aux_dest = &lvar[116];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[117];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[454]);
}
{
PFrElement aux_dest = &lvar[118];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[455]);
}
{
PFrElement aux_dest = &lvar[119];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[457]);
}
{
PFrElement aux_dest = &lvar[120];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[459]);
}
{
PFrElement aux_dest = &lvar[121];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[461]);
}
{
PFrElement aux_dest = &lvar[122];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[463]);
}
{
PFrElement aux_dest = &lvar[123];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[465]);
}
{
PFrElement aux_dest = &lvar[124];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[467]);
}
{
PFrElement aux_dest = &lvar[125];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[469]);
}
{
PFrElement aux_dest = &lvar[126];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[471]);
}
{
PFrElement aux_dest = &lvar[127];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[473]);
}
{
PFrElement aux_dest = &lvar[128];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[475]);
}
{
PFrElement aux_dest = &lvar[129];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[476]);
}
{
PFrElement aux_dest = &lvar[130];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[478]);
}
{
PFrElement aux_dest = &lvar[131];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[480]);
}
{
PFrElement aux_dest = &lvar[132];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[482]);
}
{
PFrElement aux_dest = &lvar[133];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[484]);
}
{
PFrElement aux_dest = &lvar[134];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[486]);
}
{
PFrElement aux_dest = &lvar[135];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[488]);
}
{
PFrElement aux_dest = &lvar[136];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[490]);
}
{
PFrElement aux_dest = &lvar[137];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[492]);
}
{
PFrElement aux_dest = &lvar[138];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[494]);
}
{
PFrElement aux_dest = &lvar[139];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[140];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[497]);
}
{
PFrElement aux_dest = &lvar[141];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[499]);
}
{
PFrElement aux_dest = &lvar[142];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[501]);
}
{
PFrElement aux_dest = &lvar[143];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[503]);
}
{
PFrElement aux_dest = &lvar[144];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[505]);
}
{
PFrElement aux_dest = &lvar[145];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[507]);
}
{
PFrElement aux_dest = &lvar[146];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[509]);
}
{
PFrElement aux_dest = &lvar[147];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[511]);
}
{
PFrElement aux_dest = &lvar[148];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[513]);
}
{
PFrElement aux_dest = &lvar[149];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[515]);
}
{
PFrElement aux_dest = &lvar[150];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[517]);
}
{
PFrElement aux_dest = &lvar[151];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[519]);
}
{
PFrElement aux_dest = &lvar[152];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[521]);
}
{
PFrElement aux_dest = &lvar[153];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[523]);
}
{
PFrElement aux_dest = &lvar[154];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[525]);
}
{
PFrElement aux_dest = &lvar[155];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[527]);
}
{
PFrElement aux_dest = &lvar[156];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[529]);
}
{
PFrElement aux_dest = &lvar[157];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[531]);
}
{
PFrElement aux_dest = &lvar[158];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[533]);
}
{
PFrElement aux_dest = &lvar[159];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[535]);
}
{
PFrElement aux_dest = &lvar[160];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[537]);
}
{
PFrElement aux_dest = &lvar[161];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[539]);
}
{
PFrElement aux_dest = &lvar[162];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[163];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[542]);
}
{
PFrElement aux_dest = &lvar[164];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[544]);
}
{
PFrElement aux_dest = &lvar[165];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[546]);
}
{
PFrElement aux_dest = &lvar[166];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[548]);
}
{
PFrElement aux_dest = &lvar[167];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[550]);
}
{
PFrElement aux_dest = &lvar[168];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[552]);
}
{
PFrElement aux_dest = &lvar[169];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[554]);
}
{
PFrElement aux_dest = &lvar[170];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[556]);
}
{
PFrElement aux_dest = &lvar[171];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[558]);
}
{
PFrElement aux_dest = &lvar[172];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[560]);
}
{
PFrElement aux_dest = &lvar[173];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[562]);
}
{
PFrElement aux_dest = &lvar[174];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[564]);
}
{
PFrElement aux_dest = &lvar[175];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[566]);
}
{
PFrElement aux_dest = &lvar[176];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[568]);
}
{
PFrElement aux_dest = &lvar[177];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[570]);
}
{
PFrElement aux_dest = &lvar[178];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[572]);
}
{
PFrElement aux_dest = &lvar[179];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[574]);
}
{
PFrElement aux_dest = &lvar[180];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[576]);
}
{
PFrElement aux_dest = &lvar[181];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[578]);
}
{
PFrElement aux_dest = &lvar[182];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[580]);
}
{
PFrElement aux_dest = &lvar[183];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[582]);
}
{
PFrElement aux_dest = &lvar[184];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[584]);
}
{
PFrElement aux_dest = &lvar[185];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[186];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[587]);
}
{
PFrElement aux_dest = &lvar[187];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[589]);
}
{
PFrElement aux_dest = &lvar[188];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[591]);
}
{
PFrElement aux_dest = &lvar[189];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[593]);
}
{
PFrElement aux_dest = &lvar[190];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[595]);
}
{
PFrElement aux_dest = &lvar[191];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[597]);
}
{
PFrElement aux_dest = &lvar[192];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[599]);
}
{
PFrElement aux_dest = &lvar[193];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[601]);
}
{
PFrElement aux_dest = &lvar[194];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[603]);
}
{
PFrElement aux_dest = &lvar[195];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[605]);
}
{
PFrElement aux_dest = &lvar[196];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[607]);
}
{
PFrElement aux_dest = &lvar[197];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[609]);
}
{
PFrElement aux_dest = &lvar[198];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[611]);
}
{
PFrElement aux_dest = &lvar[199];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[613]);
}
{
PFrElement aux_dest = &lvar[200];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[615]);
}
{
PFrElement aux_dest = &lvar[201];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[617]);
}
{
PFrElement aux_dest = &lvar[202];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[619]);
}
{
PFrElement aux_dest = &lvar[203];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[621]);
}
{
PFrElement aux_dest = &lvar[204];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[623]);
}
{
PFrElement aux_dest = &lvar[205];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[625]);
}
{
PFrElement aux_dest = &lvar[206];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[627]);
}
{
PFrElement aux_dest = &lvar[207];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[629]);
}
{
PFrElement aux_dest = &lvar[208];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[209];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[632]);
}
{
PFrElement aux_dest = &lvar[210];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[634]);
}
{
PFrElement aux_dest = &lvar[211];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[636]);
}
{
PFrElement aux_dest = &lvar[212];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[638]);
}
{
PFrElement aux_dest = &lvar[213];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[640]);
}
{
PFrElement aux_dest = &lvar[214];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[642]);
}
{
PFrElement aux_dest = &lvar[215];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[644]);
}
{
PFrElement aux_dest = &lvar[216];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[646]);
}
{
PFrElement aux_dest = &lvar[217];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[648]);
}
{
PFrElement aux_dest = &lvar[218];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[650]);
}
{
PFrElement aux_dest = &lvar[219];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[652]);
}
{
PFrElement aux_dest = &lvar[220];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[654]);
}
{
PFrElement aux_dest = &lvar[221];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[656]);
}
{
PFrElement aux_dest = &lvar[222];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[658]);
}
{
PFrElement aux_dest = &lvar[223];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[660]);
}
{
PFrElement aux_dest = &lvar[224];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[662]);
}
{
PFrElement aux_dest = &lvar[225];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[664]);
}
{
PFrElement aux_dest = &lvar[226];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[666]);
}
{
PFrElement aux_dest = &lvar[227];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[668]);
}
{
PFrElement aux_dest = &lvar[228];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[670]);
}
{
PFrElement aux_dest = &lvar[229];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[672]);
}
{
PFrElement aux_dest = &lvar[230];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[674]);
}
{
PFrElement aux_dest = &lvar[231];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[232];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[677]);
}
{
PFrElement aux_dest = &lvar[233];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[679]);
}
{
PFrElement aux_dest = &lvar[234];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[681]);
}
{
PFrElement aux_dest = &lvar[235];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[683]);
}
{
PFrElement aux_dest = &lvar[236];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[685]);
}
{
PFrElement aux_dest = &lvar[237];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[687]);
}
{
PFrElement aux_dest = &lvar[238];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[689]);
}
{
PFrElement aux_dest = &lvar[239];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[691]);
}
{
PFrElement aux_dest = &lvar[240];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[693]);
}
{
PFrElement aux_dest = &lvar[241];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[695]);
}
{
PFrElement aux_dest = &lvar[242];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[697]);
}
{
PFrElement aux_dest = &lvar[243];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[699]);
}
{
PFrElement aux_dest = &lvar[244];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[701]);
}
{
PFrElement aux_dest = &lvar[245];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[703]);
}
{
PFrElement aux_dest = &lvar[246];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[705]);
}
{
PFrElement aux_dest = &lvar[247];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[707]);
}
{
PFrElement aux_dest = &lvar[248];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[709]);
}
{
PFrElement aux_dest = &lvar[249];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[711]);
}
{
PFrElement aux_dest = &lvar[250];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[713]);
}
{
PFrElement aux_dest = &lvar[251];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[715]);
}
{
PFrElement aux_dest = &lvar[252];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[717]);
}
{
PFrElement aux_dest = &lvar[253];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[719]);
}
{
PFrElement aux_dest = &lvar[254];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[255];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[722]);
}
{
PFrElement aux_dest = &lvar[256];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[724]);
}
{
PFrElement aux_dest = &lvar[257];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[726]);
}
{
PFrElement aux_dest = &lvar[258];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[728]);
}
{
PFrElement aux_dest = &lvar[259];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[730]);
}
{
PFrElement aux_dest = &lvar[260];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[732]);
}
{
PFrElement aux_dest = &lvar[261];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[734]);
}
{
PFrElement aux_dest = &lvar[262];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[736]);
}
{
PFrElement aux_dest = &lvar[263];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[738]);
}
{
PFrElement aux_dest = &lvar[264];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[740]);
}
{
PFrElement aux_dest = &lvar[265];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[742]);
}
{
PFrElement aux_dest = &lvar[266];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[744]);
}
{
PFrElement aux_dest = &lvar[267];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[746]);
}
{
PFrElement aux_dest = &lvar[268];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[748]);
}
{
PFrElement aux_dest = &lvar[269];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[750]);
}
{
PFrElement aux_dest = &lvar[270];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[752]);
}
{
PFrElement aux_dest = &lvar[271];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[754]);
}
{
PFrElement aux_dest = &lvar[272];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[756]);
}
{
PFrElement aux_dest = &lvar[273];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[758]);
}
{
PFrElement aux_dest = &lvar[274];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[760]);
}
{
PFrElement aux_dest = &lvar[275];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[762]);
}
{
PFrElement aux_dest = &lvar[276];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[764]);
}
{
PFrElement aux_dest = &lvar[277];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[278];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[767]);
}
{
PFrElement aux_dest = &lvar[279];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[769]);
}
{
PFrElement aux_dest = &lvar[280];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[771]);
}
{
PFrElement aux_dest = &lvar[281];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[773]);
}
{
PFrElement aux_dest = &lvar[282];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[775]);
}
{
PFrElement aux_dest = &lvar[283];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[777]);
}
{
PFrElement aux_dest = &lvar[284];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[779]);
}
{
PFrElement aux_dest = &lvar[285];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[781]);
}
{
PFrElement aux_dest = &lvar[286];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[783]);
}
{
PFrElement aux_dest = &lvar[287];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[785]);
}
{
PFrElement aux_dest = &lvar[288];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[787]);
}
{
PFrElement aux_dest = &lvar[289];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[789]);
}
{
PFrElement aux_dest = &lvar[290];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[791]);
}
{
PFrElement aux_dest = &lvar[291];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[793]);
}
{
PFrElement aux_dest = &lvar[292];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[795]);
}
{
PFrElement aux_dest = &lvar[293];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[797]);
}
{
PFrElement aux_dest = &lvar[294];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[799]);
}
{
PFrElement aux_dest = &lvar[295];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[801]);
}
{
PFrElement aux_dest = &lvar[296];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[803]);
}
{
PFrElement aux_dest = &lvar[297];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[805]);
}
{
PFrElement aux_dest = &lvar[298];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[807]);
}
{
PFrElement aux_dest = &lvar[299];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[809]);
}
{
PFrElement aux_dest = &lvar[300];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[301];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[812]);
}
{
PFrElement aux_dest = &lvar[302];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[814]);
}
{
PFrElement aux_dest = &lvar[303];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[816]);
}
{
PFrElement aux_dest = &lvar[304];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[818]);
}
{
PFrElement aux_dest = &lvar[305];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[820]);
}
{
PFrElement aux_dest = &lvar[306];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[822]);
}
{
PFrElement aux_dest = &lvar[307];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[824]);
}
{
PFrElement aux_dest = &lvar[308];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[826]);
}
{
PFrElement aux_dest = &lvar[309];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[828]);
}
{
PFrElement aux_dest = &lvar[310];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[830]);
}
{
PFrElement aux_dest = &lvar[311];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[832]);
}
{
PFrElement aux_dest = &lvar[312];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[834]);
}
{
PFrElement aux_dest = &lvar[313];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[836]);
}
{
PFrElement aux_dest = &lvar[314];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[838]);
}
{
PFrElement aux_dest = &lvar[315];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[840]);
}
{
PFrElement aux_dest = &lvar[316];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[842]);
}
{
PFrElement aux_dest = &lvar[317];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[844]);
}
{
PFrElement aux_dest = &lvar[318];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[846]);
}
{
PFrElement aux_dest = &lvar[319];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[848]);
}
{
PFrElement aux_dest = &lvar[320];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[850]);
}
{
PFrElement aux_dest = &lvar[321];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[852]);
}
{
PFrElement aux_dest = &lvar[322];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[854]);
}
{
PFrElement aux_dest = &lvar[323];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[324];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[857]);
}
{
PFrElement aux_dest = &lvar[325];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[859]);
}
{
PFrElement aux_dest = &lvar[326];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[861]);
}
{
PFrElement aux_dest = &lvar[327];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[863]);
}
{
PFrElement aux_dest = &lvar[328];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[865]);
}
{
PFrElement aux_dest = &lvar[329];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[867]);
}
{
PFrElement aux_dest = &lvar[330];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[869]);
}
{
PFrElement aux_dest = &lvar[331];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[871]);
}
{
PFrElement aux_dest = &lvar[332];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[873]);
}
{
PFrElement aux_dest = &lvar[333];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[875]);
}
{
PFrElement aux_dest = &lvar[334];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[877]);
}
{
PFrElement aux_dest = &lvar[335];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[879]);
}
{
PFrElement aux_dest = &lvar[336];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[881]);
}
{
PFrElement aux_dest = &lvar[337];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[883]);
}
{
PFrElement aux_dest = &lvar[338];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[885]);
}
{
PFrElement aux_dest = &lvar[339];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[887]);
}
{
PFrElement aux_dest = &lvar[340];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[889]);
}
{
PFrElement aux_dest = &lvar[341];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[891]);
}
{
PFrElement aux_dest = &lvar[342];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[893]);
}
{
PFrElement aux_dest = &lvar[343];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[895]);
}
{
PFrElement aux_dest = &lvar[344];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[897]);
}
{
PFrElement aux_dest = &lvar[345];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[899]);
}
{
PFrElement aux_dest = &lvar[346];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[347];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[902]);
}
{
PFrElement aux_dest = &lvar[348];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[904]);
}
{
PFrElement aux_dest = &lvar[349];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[906]);
}
{
PFrElement aux_dest = &lvar[350];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[908]);
}
{
PFrElement aux_dest = &lvar[351];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[910]);
}
{
PFrElement aux_dest = &lvar[352];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[912]);
}
{
PFrElement aux_dest = &lvar[353];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[914]);
}
{
PFrElement aux_dest = &lvar[354];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[916]);
}
{
PFrElement aux_dest = &lvar[355];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[918]);
}
{
PFrElement aux_dest = &lvar[356];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[920]);
}
{
PFrElement aux_dest = &lvar[357];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[922]);
}
{
PFrElement aux_dest = &lvar[358];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[924]);
}
{
PFrElement aux_dest = &lvar[359];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[926]);
}
{
PFrElement aux_dest = &lvar[360];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[928]);
}
{
PFrElement aux_dest = &lvar[361];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[930]);
}
{
PFrElement aux_dest = &lvar[362];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[932]);
}
{
PFrElement aux_dest = &lvar[363];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[934]);
}
{
PFrElement aux_dest = &lvar[364];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[936]);
}
{
PFrElement aux_dest = &lvar[365];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[938]);
}
{
PFrElement aux_dest = &lvar[366];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[940]);
}
{
PFrElement aux_dest = &lvar[367];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[942]);
}
{
PFrElement aux_dest = &lvar[368];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[944]);
}
{
PFrElement aux_dest = &lvar[369];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[370];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[947]);
}
{
PFrElement aux_dest = &lvar[371];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[949]);
}
{
PFrElement aux_dest = &lvar[372];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[951]);
}
{
PFrElement aux_dest = &lvar[373];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[953]);
}
{
PFrElement aux_dest = &lvar[374];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[955]);
}
{
PFrElement aux_dest = &lvar[375];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[957]);
}
{
PFrElement aux_dest = &lvar[376];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[959]);
}
{
PFrElement aux_dest = &lvar[377];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[961]);
}
{
PFrElement aux_dest = &lvar[378];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[963]);
}
{
PFrElement aux_dest = &lvar[379];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[965]);
}
{
PFrElement aux_dest = &lvar[380];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[967]);
}
{
PFrElement aux_dest = &lvar[381];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[969]);
}
{
PFrElement aux_dest = &lvar[382];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[971]);
}
{
PFrElement aux_dest = &lvar[383];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[973]);
}
{
PFrElement aux_dest = &lvar[384];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[975]);
}
{
PFrElement aux_dest = &lvar[385];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[977]);
}
{
PFrElement aux_dest = &lvar[386];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[979]);
}
{
PFrElement aux_dest = &lvar[387];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[981]);
}
{
PFrElement aux_dest = &lvar[388];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[983]);
}
{
PFrElement aux_dest = &lvar[389];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[985]);
}
{
PFrElement aux_dest = &lvar[390];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[987]);
}
{
PFrElement aux_dest = &lvar[391];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[989]);
}
{
PFrElement aux_dest = &lvar[392];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[393];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[992]);
}
{
PFrElement aux_dest = &lvar[394];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[994]);
}
{
PFrElement aux_dest = &lvar[395];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[996]);
}
{
PFrElement aux_dest = &lvar[396];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[998]);
}
{
PFrElement aux_dest = &lvar[397];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1000]);
}
{
PFrElement aux_dest = &lvar[398];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1002]);
}
{
PFrElement aux_dest = &lvar[399];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1004]);
}
{
PFrElement aux_dest = &lvar[400];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1006]);
}
{
PFrElement aux_dest = &lvar[401];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1008]);
}
{
PFrElement aux_dest = &lvar[402];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1010]);
}
{
PFrElement aux_dest = &lvar[403];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1012]);
}
{
PFrElement aux_dest = &lvar[404];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1014]);
}
{
PFrElement aux_dest = &lvar[405];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1016]);
}
{
PFrElement aux_dest = &lvar[406];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1018]);
}
{
PFrElement aux_dest = &lvar[407];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1020]);
}
{
PFrElement aux_dest = &lvar[408];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1022]);
}
{
PFrElement aux_dest = &lvar[409];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1024]);
}
{
PFrElement aux_dest = &lvar[410];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1026]);
}
{
PFrElement aux_dest = &lvar[411];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1028]);
}
{
PFrElement aux_dest = &lvar[412];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1030]);
}
{
PFrElement aux_dest = &lvar[413];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1032]);
}
{
PFrElement aux_dest = &lvar[414];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1034]);
}
{
PFrElement aux_dest = &lvar[415];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[416];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1037]);
}
{
PFrElement aux_dest = &lvar[417];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1039]);
}
{
PFrElement aux_dest = &lvar[418];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1041]);
}
{
PFrElement aux_dest = &lvar[419];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1043]);
}
{
PFrElement aux_dest = &lvar[420];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1045]);
}
{
PFrElement aux_dest = &lvar[421];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1047]);
}
{
PFrElement aux_dest = &lvar[422];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1049]);
}
{
PFrElement aux_dest = &lvar[423];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1051]);
}
{
PFrElement aux_dest = &lvar[424];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1053]);
}
{
PFrElement aux_dest = &lvar[425];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1055]);
}
{
PFrElement aux_dest = &lvar[426];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1057]);
}
{
PFrElement aux_dest = &lvar[427];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1059]);
}
{
PFrElement aux_dest = &lvar[428];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1061]);
}
{
PFrElement aux_dest = &lvar[429];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1063]);
}
{
PFrElement aux_dest = &lvar[430];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1065]);
}
{
PFrElement aux_dest = &lvar[431];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1067]);
}
{
PFrElement aux_dest = &lvar[432];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1069]);
}
{
PFrElement aux_dest = &lvar[433];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1071]);
}
{
PFrElement aux_dest = &lvar[434];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1073]);
}
{
PFrElement aux_dest = &lvar[435];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1075]);
}
{
PFrElement aux_dest = &lvar[436];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1077]);
}
{
PFrElement aux_dest = &lvar[437];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1079]);
}
{
PFrElement aux_dest = &lvar[438];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[439];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1082]);
}
{
PFrElement aux_dest = &lvar[440];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1084]);
}
{
PFrElement aux_dest = &lvar[441];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1086]);
}
{
PFrElement aux_dest = &lvar[442];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1088]);
}
{
PFrElement aux_dest = &lvar[443];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1090]);
}
{
PFrElement aux_dest = &lvar[444];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1092]);
}
{
PFrElement aux_dest = &lvar[445];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1094]);
}
{
PFrElement aux_dest = &lvar[446];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1096]);
}
{
PFrElement aux_dest = &lvar[447];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1098]);
}
{
PFrElement aux_dest = &lvar[448];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1100]);
}
{
PFrElement aux_dest = &lvar[449];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1102]);
}
{
PFrElement aux_dest = &lvar[450];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1104]);
}
{
PFrElement aux_dest = &lvar[451];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1106]);
}
{
PFrElement aux_dest = &lvar[452];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1108]);
}
{
PFrElement aux_dest = &lvar[453];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1110]);
}
{
PFrElement aux_dest = &lvar[454];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1112]);
}
{
PFrElement aux_dest = &lvar[455];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1114]);
}
{
PFrElement aux_dest = &lvar[456];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1116]);
}
{
PFrElement aux_dest = &lvar[457];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1118]);
}
{
PFrElement aux_dest = &lvar[458];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1120]);
}
{
PFrElement aux_dest = &lvar[459];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1122]);
}
{
PFrElement aux_dest = &lvar[460];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1124]);
}
{
PFrElement aux_dest = &lvar[461];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[462];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1127]);
}
{
PFrElement aux_dest = &lvar[463];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1129]);
}
{
PFrElement aux_dest = &lvar[464];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1131]);
}
{
PFrElement aux_dest = &lvar[465];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1133]);
}
{
PFrElement aux_dest = &lvar[466];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1135]);
}
{
PFrElement aux_dest = &lvar[467];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1137]);
}
{
PFrElement aux_dest = &lvar[468];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1139]);
}
{
PFrElement aux_dest = &lvar[469];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1141]);
}
{
PFrElement aux_dest = &lvar[470];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1143]);
}
{
PFrElement aux_dest = &lvar[471];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1145]);
}
{
PFrElement aux_dest = &lvar[472];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1147]);
}
{
PFrElement aux_dest = &lvar[473];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1149]);
}
{
PFrElement aux_dest = &lvar[474];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1151]);
}
{
PFrElement aux_dest = &lvar[475];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1153]);
}
{
PFrElement aux_dest = &lvar[476];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1155]);
}
{
PFrElement aux_dest = &lvar[477];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1157]);
}
{
PFrElement aux_dest = &lvar[478];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1159]);
}
{
PFrElement aux_dest = &lvar[479];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1161]);
}
{
PFrElement aux_dest = &lvar[480];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1163]);
}
{
PFrElement aux_dest = &lvar[481];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1165]);
}
{
PFrElement aux_dest = &lvar[482];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1167]);
}
{
PFrElement aux_dest = &lvar[483];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1169]);
}
{
PFrElement aux_dest = &lvar[484];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
{
PFrElement aux_dest = &lvar[485];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1172]);
}
{
PFrElement aux_dest = &lvar[486];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1174]);
}
{
PFrElement aux_dest = &lvar[487];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1176]);
}
{
PFrElement aux_dest = &lvar[488];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1178]);
}
{
PFrElement aux_dest = &lvar[489];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1180]);
}
{
PFrElement aux_dest = &lvar[490];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1182]);
}
{
PFrElement aux_dest = &lvar[491];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1184]);
}
{
PFrElement aux_dest = &lvar[492];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1186]);
}
{
PFrElement aux_dest = &lvar[493];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1188]);
}
{
PFrElement aux_dest = &lvar[494];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1190]);
}
{
PFrElement aux_dest = &lvar[495];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1192]);
}
{
PFrElement aux_dest = &lvar[496];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[34]);
}
{
PFrElement aux_dest = &lvar[497];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[41]);
}
{
PFrElement aux_dest = &lvar[498];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[32]);
}
{
PFrElement aux_dest = &lvar[499];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[46]);
}
{
PFrElement aux_dest = &lvar[500];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[501];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[502];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[38]);
}
{
PFrElement aux_dest = &lvar[503];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[504];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[505];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[48]);
}
{
PFrElement aux_dest = &lvar[506];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
// return bucket
Fr_copy(destination,&lvar[((1 * Fr_toInt(&lvar[0])) + 1)]);
return;
}

void roots_4(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size){
FrElement* circuitConstants = ctx->circuitConstants;
FrElement expaux[2];
std::string myTemplateName = "roots";
u64 myId = componentFather;
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[21]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[61]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[60]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[19]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[8]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1204]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1205]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1206]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[55]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1207]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1208]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1209]);
}
{
PFrElement aux_dest = &lvar[15];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1210]);
}
{
PFrElement aux_dest = &lvar[16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1211]);
}
{
PFrElement aux_dest = &lvar[17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1212]);
}
{
PFrElement aux_dest = &lvar[18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1213]);
}
{
PFrElement aux_dest = &lvar[19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1214]);
}
{
PFrElement aux_dest = &lvar[20];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1215]);
}
{
PFrElement aux_dest = &lvar[21];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1216]);
}
{
PFrElement aux_dest = &lvar[22];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1217]);
}
{
PFrElement aux_dest = &lvar[23];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1218]);
}
{
PFrElement aux_dest = &lvar[24];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1219]);
}
{
PFrElement aux_dest = &lvar[25];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1220]);
}
{
PFrElement aux_dest = &lvar[26];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1221]);
}
{
PFrElement aux_dest = &lvar[27];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1222]);
}
{
PFrElement aux_dest = &lvar[28];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1223]);
}
{
PFrElement aux_dest = &lvar[29];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1224]);
}
{
PFrElement aux_dest = &lvar[30];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1225]);
}
{
PFrElement aux_dest = &lvar[31];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1226]);
}
{
PFrElement aux_dest = &lvar[32];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1227]);
}
{
PFrElement aux_dest = &lvar[33];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1228]);
}
// return bucket
Fr_copy(destination,&lvar[((1 * Fr_toInt(&lvar[0])) + 1)]);
return;
}

void rev_5(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size){
FrElement* circuitConstants = ctx->circuitConstants;
FrElement expaux[8];
std::string myTemplateName = "rev";
u64 myId = componentFather;
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[8]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[12]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[10]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[6]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[28]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[9]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[5]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[27]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[15];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
{
PFrElement aux_dest = &lvar[16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[7]);
}
{
PFrElement aux_dest = &lvar[17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[19],&circuitConstants[8]); // line circom 8
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[18];
// load src
Fr_shl(&expaux[0],&lvar[18],&circuitConstants[4]); // line circom 9
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[18];
// load src
Fr_mul(&expaux[5],&lvar[19],&circuitConstants[4]); // line circom 10
Fr_shr(&expaux[3],&lvar[0],&expaux[5]); // line circom 10
Fr_band(&expaux[2],&expaux[3],&circuitConstants[29]); // line circom 10
Fr_add(&expaux[0],&lvar[18],&lvar[((1 * Fr_toInt(&expaux[2])) + 2)]); // line circom 10
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[19];
// load src
Fr_add(&expaux[0],&lvar[19],&circuitConstants[1]); // line circom 8
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[19],&circuitConstants[8]); // line circom 8
}
{
PFrElement aux_dest = &lvar[18];
// load src
Fr_sub(&expaux[2],&circuitConstants[22],&lvar[1]); // line circom 13
Fr_shr(&expaux[0],&lvar[18],&expaux[2]); // line circom 13
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
// return bucket
Fr_copy(destination,&lvar[18]);
return;
}

void CMulAddF_6(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size){
FrElement* circuitConstants = ctx->circuitConstants;
FrElement expaux[7];
std::string myTemplateName = "CMulAddF";
u64 myId = componentFather;
{
PFrElement aux_dest = &lvar[9];
// load src
Fr_add(&expaux[1],&lvar[0],&lvar[1]); // line circom 7
Fr_add(&expaux[2],&lvar[3],&lvar[4]); // line circom 7
Fr_mul(&expaux[0],&expaux[1],&expaux[2]); // line circom 7
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_add(&expaux[1],&lvar[0],&lvar[2]); // line circom 8
Fr_add(&expaux[2],&lvar[3],&lvar[5]); // line circom 8
Fr_mul(&expaux[0],&expaux[1],&expaux[2]); // line circom 8
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
Fr_add(&expaux[1],&lvar[1],&lvar[2]); // line circom 9
Fr_add(&expaux[2],&lvar[4],&lvar[5]); // line circom 9
Fr_mul(&expaux[0],&expaux[1],&expaux[2]); // line circom 9
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
Fr_mul(&expaux[0],&lvar[0],&lvar[3]); // line circom 10
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
Fr_mul(&expaux[0],&lvar[1],&lvar[4]); // line circom 11
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_mul(&expaux[0],&lvar[2],&lvar[5]); // line circom 12
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[15];
// load src
Fr_sub(&expaux[0],&lvar[12],&lvar[13]); // line circom 13
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[16];
// load src
Fr_add(&expaux[2],&lvar[11],&lvar[15]); // line circom 17
Fr_sub(&expaux[1],&expaux[2],&lvar[14]); // line circom 17
Fr_add(&expaux[0],&expaux[1],&lvar[6]); // line circom 17
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[17];
// load src
Fr_add(&expaux[4],&lvar[9],&lvar[11]); // line circom 18
Fr_sub(&expaux[3],&expaux[4],&lvar[13]); // line circom 18
Fr_sub(&expaux[2],&expaux[3],&lvar[13]); // line circom 18
Fr_sub(&expaux[1],&expaux[2],&lvar[12]); // line circom 18
Fr_add(&expaux[0],&expaux[1],&lvar[7]); // line circom 18
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[18];
// load src
Fr_sub(&expaux[1],&lvar[10],&lvar[15]); // line circom 19
Fr_add(&expaux[0],&expaux[1],&lvar[8]); // line circom 19
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
// return bucket
Fr_copyn(destination,&lvar[16],destination_size);
return;
}

void invroots_7(Circom_CalcWit* ctx,FrElement* lvar,uint componentFather,FrElement* destination,int destination_size){
FrElement* circuitConstants = ctx->circuitConstants;
FrElement expaux[2];
std::string myTemplateName = "invroots";
u64 myId = componentFather;
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[21]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1229]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1230]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1231]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1232]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[73]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1233]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1234]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1235]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1236]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1237]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1238]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1239]);
}
{
PFrElement aux_dest = &lvar[15];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1240]);
}
{
PFrElement aux_dest = &lvar[16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1241]);
}
{
PFrElement aux_dest = &lvar[17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1242]);
}
{
PFrElement aux_dest = &lvar[18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1243]);
}
{
PFrElement aux_dest = &lvar[19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1244]);
}
{
PFrElement aux_dest = &lvar[20];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1245]);
}
{
PFrElement aux_dest = &lvar[21];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1246]);
}
{
PFrElement aux_dest = &lvar[22];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1247]);
}
{
PFrElement aux_dest = &lvar[23];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1248]);
}
{
PFrElement aux_dest = &lvar[24];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1249]);
}
{
PFrElement aux_dest = &lvar[25];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1250]);
}
{
PFrElement aux_dest = &lvar[26];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1251]);
}
{
PFrElement aux_dest = &lvar[27];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1252]);
}
{
PFrElement aux_dest = &lvar[28];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1253]);
}
{
PFrElement aux_dest = &lvar[29];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1254]);
}
{
PFrElement aux_dest = &lvar[30];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1255]);
}
{
PFrElement aux_dest = &lvar[31];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1256]);
}
{
PFrElement aux_dest = &lvar[32];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1257]);
}
{
PFrElement aux_dest = &lvar[33];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1258]);
}
// return bucket
Fr_copy(destination,&lvar[((1 * Fr_toInt(&lvar[0])) + 1)]);
return;
}

// template declarations
void Poseidon12_0_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 0;
ctx->componentMemory[coffset].templateName = "Poseidon12";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 12;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void Poseidon12_0_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[7];
FrElement lvar[29];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 120],12);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[12],&circuitConstants[12]); // line circom 15
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[119];
// copying argument 0
Fr_copy(&lvarcall[0],&lvar[12]);
// end copying argument 0
CNST_0(ctx,lvarcall,myId,&lvar[13],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[12])) + 0)];
// load src
Fr_add(&expaux[0],&lvar[((1 * Fr_toInt(&lvar[12])) + 0)],&lvar[13]); // line circom 16
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
Fr_add(&expaux[0],&lvar[12],&circuitConstants[1]); // line circom 15
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[12],&circuitConstants[12]); // line circom 15
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[15];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[20];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[21];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[22];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[23];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[24];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[24],&circuitConstants[4]); // line circom 20
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[25];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[25],&circuitConstants[12]); // line circom 21
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[25])) + 0)];
// load src
Fr_pow(&expaux[0],&lvar[((1 * Fr_toInt(&lvar[25])) + 0)],&circuitConstants[7]); // line circom 22
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{

// start of call bucket
FrElement lvarcall[119];
// copying argument 0
Fr_add(&expaux[3],&lvar[24],&circuitConstants[1]); // line circom 23
Fr_mul(&expaux[2],&expaux[3],&circuitConstants[12]); // line circom 23
Fr_add(&expaux[1],&expaux[2],&lvar[25]); // line circom 23
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
CNST_0(ctx,lvarcall,myId,&lvar[26],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[25])) + 0)];
// load src
Fr_add(&expaux[0],&lvar[((1 * Fr_toInt(&lvar[25])) + 0)],&lvar[26]); // line circom 23
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[25];
// load src
Fr_add(&expaux[0],&lvar[25],&circuitConstants[1]); // line circom 21
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[25],&circuitConstants[12]); // line circom 21
}
{
PFrElement aux_dest = &lvar[25];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[25],&circuitConstants[12]); // line circom 26
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[26];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[27];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[27],&circuitConstants[12]); // line circom 28
while(Fr_isTrue(&expaux[0])){
Fr_lt(&expaux[0],&lvar[24],&circuitConstants[3]); // line circom 29
if(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[290];
// copying argument 0
Fr_copy(&lvarcall[0],&lvar[27]);
// end copying argument 0
// copying argument 1
Fr_copy(&lvarcall[1],&lvar[25]);
// end copying argument 1
M_1(ctx,lvarcall,myId,&lvar[28],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[26];
// load src
Fr_mul(&expaux[2],&lvar[28],&lvar[((1 * Fr_toInt(&lvar[27])) + 0)]); // line circom 30
Fr_add(&expaux[0],&lvar[26],&expaux[2]); // line circom 30
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}else{
{

// start of call bucket
FrElement lvarcall[290];
// copying argument 0
Fr_copy(&lvarcall[0],&lvar[27]);
// end copying argument 0
// copying argument 1
Fr_copy(&lvarcall[1],&lvar[25]);
// end copying argument 1
P_2(ctx,lvarcall,myId,&lvar[28],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[26];
// load src
Fr_mul(&expaux[2],&lvar[28],&lvar[((1 * Fr_toInt(&lvar[27])) + 0)]); // line circom 32
Fr_add(&expaux[0],&lvar[26],&expaux[2]); // line circom 32
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
{
PFrElement aux_dest = &lvar[27];
// load src
Fr_add(&expaux[0],&lvar[27],&circuitConstants[1]); // line circom 28
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[27],&circuitConstants[12]); // line circom 28
}
{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[25])) + 12)];
// load src
// end load src
Fr_copy(aux_dest,&lvar[26]);
}
{
PFrElement aux_dest = &lvar[25];
// load src
Fr_add(&expaux[0],&lvar[25],&circuitConstants[1]); // line circom 26
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[25],&circuitConstants[12]); // line circom 26
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[12],12);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((12 * Fr_toInt(&lvar[24])) + 0)];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[0],12);
}
{
PFrElement aux_dest = &lvar[24];
// load src
Fr_add(&expaux[0],&lvar[24],&circuitConstants[1]); // line circom 20
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[24],&circuitConstants[4]); // line circom 20
}
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_pow(&expaux[0],&lvar[0],&circuitConstants[7]); // line circom 41
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[13]); // line circom 42
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[24];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[24],&circuitConstants[14]); // line circom 44
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[25];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[26];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[26],&circuitConstants[12]); // line circom 47
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[507];
// copying argument 0
Fr_mul(&expaux[2],&circuitConstants[15],&lvar[24]); // line circom 48
Fr_add(&expaux[1],&expaux[2],&lvar[26]); // line circom 48
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
S_3(ctx,lvarcall,myId,&lvar[27],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[25];
// load src
Fr_mul(&expaux[2],&lvar[27],&lvar[((1 * Fr_toInt(&lvar[26])) + 0)]); // line circom 48
Fr_add(&expaux[0],&lvar[25],&expaux[2]); // line circom 48
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[26];
// load src
Fr_add(&expaux[0],&lvar[26],&circuitConstants[1]); // line circom 47
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[26],&circuitConstants[12]); // line circom 47
}
{
PFrElement aux_dest = &lvar[26];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
Fr_lt(&expaux[0],&lvar[26],&circuitConstants[12]); // line circom 51
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[507];
// copying argument 0
Fr_mul(&expaux[3],&circuitConstants[15],&lvar[24]); // line circom 52
Fr_add(&expaux[2],&expaux[3],&circuitConstants[11]); // line circom 52
Fr_add(&expaux[1],&expaux[2],&lvar[26]); // line circom 52
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
S_3(ctx,lvarcall,myId,&lvar[27],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[26])) + 0)];
// load src
Fr_mul(&expaux[2],&lvar[0],&lvar[27]); // line circom 52
Fr_add(&expaux[0],&lvar[((1 * Fr_toInt(&lvar[26])) + 0)],&expaux[2]); // line circom 52
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[26];
// load src
Fr_add(&expaux[0],&lvar[26],&circuitConstants[1]); // line circom 51
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[26],&circuitConstants[12]); // line circom 51
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&lvar[25]);
}
Fr_eq(&expaux[0],&lvar[24],&circuitConstants[10]); // line circom 56
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + 48];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[0],12);
}
}
Fr_lt(&expaux[0],&lvar[24],&circuitConstants[16]); // line circom 57
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_pow(&expaux[0],&lvar[0],&circuitConstants[7]); // line circom 58
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{

// start of call bucket
FrElement lvarcall[119];
// copying argument 0
Fr_add(&expaux[2],&circuitConstants[17],&lvar[24]); // line circom 59
Fr_add(&expaux[1],&expaux[2],&circuitConstants[1]); // line circom 59
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
CNST_0(ctx,lvarcall,myId,&lvar[26],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&lvar[26]); // line circom 59
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
{
PFrElement aux_dest = &lvar[24];
// load src
Fr_add(&expaux[0],&lvar[24],&circuitConstants[1]); // line circom 44
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[24],&circuitConstants[14]); // line circom 44
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 60];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[0],12);
}
{
PFrElement aux_dest = &lvar[24];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[24],&circuitConstants[4]); // line circom 64
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[25];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[25],&circuitConstants[12]); // line circom 65
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[25])) + 0)];
// load src
Fr_pow(&expaux[0],&lvar[((1 * Fr_toInt(&lvar[25])) + 0)],&circuitConstants[7]); // line circom 66
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{

// start of call bucket
FrElement lvarcall[119];
// copying argument 0
Fr_mul(&expaux[4],&circuitConstants[12],&lvar[24]); // line circom 67
Fr_add(&expaux[2],&circuitConstants[18],&expaux[4]); // line circom 67
Fr_add(&expaux[1],&expaux[2],&lvar[25]); // line circom 67
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
CNST_0(ctx,lvarcall,myId,&lvar[26],1);
// end call bucket
}

Fr_lt(&expaux[0],&lvar[24],&circuitConstants[3]); // line circom 67
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[25])) + 0)];
// load src
Fr_add(&expaux[0],&lvar[((1 * Fr_toInt(&lvar[25])) + 0)],&lvar[26]); // line circom 67
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
{
PFrElement aux_dest = &lvar[25];
// load src
Fr_add(&expaux[0],&lvar[25],&circuitConstants[1]); // line circom 65
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[25],&circuitConstants[12]); // line circom 65
}
{
PFrElement aux_dest = &lvar[25];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[25],&circuitConstants[12]); // line circom 70
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[26];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[27];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[27],&circuitConstants[12]); // line circom 72
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[290];
// copying argument 0
Fr_copy(&lvarcall[0],&lvar[27]);
// end copying argument 0
// copying argument 1
Fr_copy(&lvarcall[1],&lvar[25]);
// end copying argument 1
M_1(ctx,lvarcall,myId,&lvar[28],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[26];
// load src
Fr_mul(&expaux[2],&lvar[28],&lvar[((1 * Fr_toInt(&lvar[27])) + 0)]); // line circom 73
Fr_add(&expaux[0],&lvar[26],&expaux[2]); // line circom 73
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[27];
// load src
Fr_add(&expaux[0],&lvar[27],&circuitConstants[1]); // line circom 72
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[27],&circuitConstants[12]); // line circom 72
}
{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[25])) + 12)];
// load src
// end load src
Fr_copy(aux_dest,&lvar[26]);
}
{
PFrElement aux_dest = &lvar[25];
// load src
Fr_add(&expaux[0],&lvar[25],&circuitConstants[1]); // line circom 70
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[25],&circuitConstants[12]); // line circom 70
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[12],12);
}
Fr_lt(&expaux[0],&lvar[24],&circuitConstants[3]); // line circom 78
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((12 * (Fr_toInt(&lvar[24]) + 6)) + 0)];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[0],12);
}
}else{
{
PFrElement aux_dest = &signalValues[mySignalStart + 108];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[0],12);
}
}
{
PFrElement aux_dest = &lvar[24];
// load src
Fr_add(&expaux[0],&lvar[24],&circuitConstants[1]); // line circom 64
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[24],&circuitConstants[4]); // line circom 64
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void Poseidon_1_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 1;
ctx->componentMemory[coffset].templateName = "Poseidon";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 12;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
}

void Poseidon_1_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[2];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[12]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+24;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "p";
Poseidon12_0_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 132 ;
aux_cmp_num += 1;
}
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[8]); // line circom 194
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[1])) + 120)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[1])) + 12)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon12_0_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 194
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[8]); // line circom 194
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[4]); // line circom 197
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * (8 + Fr_toInt(&lvar[1]))) + 120)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[1])) + 20)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon12_0_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 197
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[4]); // line circom 197
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[12]); // line circom 202
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[1])) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + ((1 * Fr_toInt(&lvar[1])) + 108)]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 202
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[12]); // line circom 202
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[12]);
}
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void Num2Bits_2_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 2;
ctx->componentMemory[coffset].templateName = "Num2Bits";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 1;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void Num2Bits_2_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[19]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[19]); // line circom 9
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[3])) + 0)];
// load src
Fr_shr(&expaux[1],&signalValues[mySignalStart + 64],&lvar[3]); // line circom 10
Fr_band(&expaux[0],&expaux[1],&circuitConstants[1]); // line circom 10
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[3])) + 0)],&circuitConstants[1]); // line circom 11
Fr_mul(&expaux[1],&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[3])) + 0)],&expaux[3]); // line circom 11
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 11
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 11. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_mul(&expaux[2],&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[3])) + 0)],&lvar[2]); // line circom 12
Fr_add(&expaux[0],&lvar[1],&expaux[2]); // line circom 12
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_add(&expaux[0],&lvar[2],&lvar[2]); // line circom 13
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_add(&expaux[0],&lvar[3],&circuitConstants[1]); // line circom 9
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[19]); // line circom 9
}
Fr_eq(&expaux[0],&lvar[1],&signalValues[mySignalStart + 64]); // line circom 16
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 16. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void Num2Bits_3_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 3;
ctx->componentMemory[coffset].templateName = "Num2Bits";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 1;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void Num2Bits_3_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[20]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[20]); // line circom 9
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[3])) + 0)];
// load src
Fr_shr(&expaux[1],&signalValues[mySignalStart + 33],&lvar[3]); // line circom 10
Fr_band(&expaux[0],&expaux[1],&circuitConstants[1]); // line circom 10
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[3])) + 0)],&circuitConstants[1]); // line circom 11
Fr_mul(&expaux[1],&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[3])) + 0)],&expaux[3]); // line circom 11
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 11
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 11. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_mul(&expaux[2],&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[3])) + 0)],&lvar[2]); // line circom 12
Fr_add(&expaux[0],&lvar[1],&expaux[2]); // line circom 12
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_add(&expaux[0],&lvar[2],&lvar[2]); // line circom 13
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_add(&expaux[0],&lvar[3],&circuitConstants[1]); // line circom 9
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[20]); // line circom 9
}
Fr_eq(&expaux[0],&lvar[1],&signalValues[mySignalStart + 33]); // line circom 16
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 16. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void CompConstant_4_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 4;
ctx->componentMemory[coffset].templateName = "CompConstant";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 64;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
}

void CompConstant_4_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[7];
FrElement lvar[8];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[21]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+162;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Num2Bits_84_1581";
Num2Bits_3_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 34 ;
aux_cmp_num += 1;
}
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[22]); // line circom 59
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_mul(&expaux[3],&lvar[6],&circuitConstants[2]); // line circom 60
Fr_shr(&expaux[1],&circuitConstants[21],&expaux[3]); // line circom 60
Fr_band(&expaux[0],&expaux[1],&circuitConstants[1]); // line circom 60
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_mul(&expaux[4],&lvar[6],&circuitConstants[2]); // line circom 61
Fr_add(&expaux[3],&expaux[4],&circuitConstants[1]); // line circom 61
Fr_shr(&expaux[1],&circuitConstants[21],&expaux[3]); // line circom 61
Fr_band(&expaux[0],&expaux[1],&circuitConstants[1]); // line circom 61
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * (Fr_toInt(&lvar[6]) * 2)) + 1)]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * ((Fr_toInt(&lvar[6]) * 2) + 1)) + 1)]);
}
Fr_eq(&expaux[1],&lvar[2],&circuitConstants[0]); // line circom 65
Fr_eq(&expaux[2],&lvar[1],&circuitConstants[0]); // line circom 65
Fr_land(&expaux[0],&expaux[1],&expaux[2]); // line circom 65
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[6])) + 65)];
// load src
Fr_mul(&expaux[2],&lvar[4],&lvar[5]); // line circom 66
Fr_mul(&expaux[3],&lvar[3],&lvar[5]); // line circom 66
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 66
Fr_mul(&expaux[3],&lvar[4],&lvar[3]); // line circom 66
Fr_mul(&expaux[2],&expaux[3],&lvar[5]); // line circom 66
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 66
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}else{
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[6])) + 65)];
// load src
Fr_mul(&expaux[2],&lvar[5],&lvar[4]); // line circom 72
Fr_mul(&expaux[1],&expaux[2],&lvar[3]); // line circom 72
Fr_sub(&expaux[0],&expaux[1],&lvar[5]); // line circom 72
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
Fr_eq(&expaux[0],&lvar[6],&circuitConstants[0]); // line circom 75
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + 97];
// load src
Fr_add(&expaux[0],&circuitConstants[23],&signalValues[mySignalStart + 65]); // line circom 76
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}else{
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[6])) + 97)];
// load src
Fr_sub(&expaux[1],&lvar[6],&circuitConstants[1]); // line circom 78
Fr_add(&expaux[0],&signalValues[mySignalStart + ((1 * Fr_toInt(&expaux[1])) + 97)],&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[6])) + 65)]); // line circom 78
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_mul(&expaux[0],&lvar[5],&circuitConstants[2]); // line circom 81
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 59
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[22]); // line circom 59
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 33];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 128]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Num2Bits_3_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 129];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],33);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[22]); // line circom 86
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[7];
// load src
Fr_add(&expaux[0],&lvar[7],&circuitConstants[1]); // line circom 86
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[22]); // line circom 86
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 161]);
}
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void AliasCheck_5_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 5;
ctx->componentMemory[coffset].templateName = "AliasCheck";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 64;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
}

void AliasCheck_5_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[0];
uint sub_component_aux;
uint index_multiple_eq;
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+65;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CompConstant_97_1782";
CompConstant_4_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 196 ;
aux_cmp_num += 2;
}
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 1];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],64);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 64;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CompConstant_4_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 64];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0]);
}
Fr_eq(&expaux[0],&signalValues[mySignalStart + 64],&circuitConstants[0]); // line circom 98
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 98. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void Num2Bits_strict_6_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 6;
ctx->componentMemory[coffset].templateName = "Num2Bits_strict";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 1;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[2]{0};
}

void Num2Bits_strict_6_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[2];
FrElement lvar[0];
uint sub_component_aux;
uint index_multiple_eq;
{
uint aux_create = 0;
int aux_cmp_num = 3+ctx_index+1;
uint csoffset = mySignalStart+390;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Num2Bits_105_1941";
Num2Bits_2_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 65 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+129;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "AliasCheck_107_1968";
AliasCheck_5_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 261 ;
aux_cmp_num += 3;
}
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 64];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 64]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Num2Bits_2_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 65];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],64);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 65],64);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 64;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
AliasCheck_5_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 65],64);
}
for (uint i = 0; i < 2; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void calculateFRIQueries0_7_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 7;
ctx->componentMemory[coffset].templateName = "calculateFRIQueries0";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 3;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[3]{0};
}

void calculateFRIQueries0_7_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[3];
uint sub_component_aux;
uint index_multiple_eq;
{
uint aux_create = 0;
int aux_cmp_num = 10+ctx_index+1;
uint csoffset = mySignalStart+1141;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_25_470";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+231;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Num2Bits_strict_26_621";
Num2Bits_strict_6_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 455 ;
aux_cmp_num += 5;
}
}
{
uint aux_create = 2;
int aux_cmp_num = 5+ctx_index+1;
uint csoffset = mySignalStart+686;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Num2Bits_strict_27_716";
Num2Bits_strict_6_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 455 ;
aux_cmp_num += 5;
}
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 88]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 89]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 90]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 91];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],12);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 64];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 91]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Num2Bits_strict_6_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 103];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + 0],64);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 64];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 92]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Num2Bits_strict_6_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 167];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[2]].signalStart + 0],64);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 28
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 28
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 28
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[25]); // line circom 35
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + (((11 * Fr_toInt(&lvar[0])) + (1 * Fr_toInt(&lvar[1]))) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[2])) + 103)]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 37
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_eq(&expaux[0],&lvar[1],&circuitConstants[11]); // line circom 38
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 40
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_add(&expaux[0],&lvar[2],&circuitConstants[1]); // line circom 35
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[25]); // line circom 35
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[26]); // line circom 45
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + (((11 * Fr_toInt(&lvar[0])) + (1 * Fr_toInt(&lvar[1]))) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[2])) + 167)]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 47
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_eq(&expaux[0],&lvar[1],&circuitConstants[11]); // line circom 48
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 50
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_add(&expaux[0],&lvar[2],&circuitConstants[1]); // line circom 45
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[26]); // line circom 45
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[26]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[19]); // line circom 53
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_add(&expaux[0],&lvar[2],&circuitConstants[1]); // line circom 53
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[19]); // line circom 53
}
for (uint i = 0; i < 3; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void Transcript0_8_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 8;
ctx->componentMemory[coffset].templateName = "Transcript0";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 184;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[28]{0};
}

void Transcript0_8_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[1];
uint sub_component_aux;
uint index_multiple_eq;
{
uint aux_create = 0;
int aux_cmp_num = 50+ctx_index+1;
uint csoffset = mySignalStart+4535;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_90_2271";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 52+ctx_index+1;
uint csoffset = mySignalStart+4691;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_95_2521";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 2;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+635;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_103_3081";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 3;
int aux_cmp_num = 2+ctx_index+1;
uint csoffset = mySignalStart+791;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_110_3555";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 4;
int aux_cmp_num = 4+ctx_index+1;
uint csoffset = mySignalStart+947;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_116_3927";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 5;
int aux_cmp_num = 6+ctx_index+1;
uint csoffset = mySignalStart+1103;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_122_4300";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 6;
int aux_cmp_num = 8+ctx_index+1;
uint csoffset = mySignalStart+1259;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_127_4640";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 7;
int aux_cmp_num = 10+ctx_index+1;
uint csoffset = mySignalStart+1415;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_132_4980";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 8;
int aux_cmp_num = 12+ctx_index+1;
uint csoffset = mySignalStart+1571;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_137_5320";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 9;
int aux_cmp_num = 14+ctx_index+1;
uint csoffset = mySignalStart+1727;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_142_5662";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 10;
int aux_cmp_num = 16+ctx_index+1;
uint csoffset = mySignalStart+1883;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_147_6011";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 11;
int aux_cmp_num = 18+ctx_index+1;
uint csoffset = mySignalStart+2039;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_152_6361";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 12;
int aux_cmp_num = 20+ctx_index+1;
uint csoffset = mySignalStart+2195;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_157_6715";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 13;
int aux_cmp_num = 22+ctx_index+1;
uint csoffset = mySignalStart+2351;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_162_7069";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 14;
int aux_cmp_num = 24+ctx_index+1;
uint csoffset = mySignalStart+2507;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_167_7423";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 15;
int aux_cmp_num = 26+ctx_index+1;
uint csoffset = mySignalStart+2663;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_172_7777";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 16;
int aux_cmp_num = 28+ctx_index+1;
uint csoffset = mySignalStart+2819;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_177_8131";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 17;
int aux_cmp_num = 30+ctx_index+1;
uint csoffset = mySignalStart+2975;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_182_8485";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 18;
int aux_cmp_num = 32+ctx_index+1;
uint csoffset = mySignalStart+3131;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_187_8839";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 19;
int aux_cmp_num = 34+ctx_index+1;
uint csoffset = mySignalStart+3287;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_192_9193";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 20;
int aux_cmp_num = 36+ctx_index+1;
uint csoffset = mySignalStart+3443;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_197_9547";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 21;
int aux_cmp_num = 38+ctx_index+1;
uint csoffset = mySignalStart+3599;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_202_9901";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 22;
int aux_cmp_num = 40+ctx_index+1;
uint csoffset = mySignalStart+3755;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_210_10462";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 23;
int aux_cmp_num = 42+ctx_index+1;
uint csoffset = mySignalStart+3911;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_216_10862";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 24;
int aux_cmp_num = 44+ctx_index+1;
uint csoffset = mySignalStart+4067;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_222_11262";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 25;
int aux_cmp_num = 46+ctx_index+1;
uint csoffset = mySignalStart+4223;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_227_11632";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 26;
int aux_cmp_num = 48+ctx_index+1;
uint csoffset = mySignalStart+4379;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Poseidon_232_12002";
Poseidon_1_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 156 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 27;
int aux_cmp_num = 54+ctx_index+1;
uint csoffset = mySignalStart+4847;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "calculateFRIQueries0_235_12344";
calculateFRIQueries0_7_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1297 ;
aux_cmp_num += 13;
}
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 130]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 131]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 132]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 133]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 127]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 128]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 129]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 134]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 311];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 91
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 91
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 91
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 311]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 312]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 313]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 314]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 135]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 136]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 137]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 323];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + 0],12);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 323]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 1];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 324]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 2];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 325]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 326]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 4];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 327]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 5];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 328]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 6];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 329]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 7];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 330]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 8];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 331]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[9]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 99
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 99
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 99
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 323]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 324]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 325]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 326]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 138]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 139]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 140]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 141]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 335];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[2]].signalStart + 0],12);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 9];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 335]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 10];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 336]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 11];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 337]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 338]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 339]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 340]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[6]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 106
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 106
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 106
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 335]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 336]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 337]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 338]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 142]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 143]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 144]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 145]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 347];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[3]].signalStart + 0],12);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 347]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 348]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 349]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 112
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 112
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 112
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 347]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 348]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 349]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 350]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 146]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 147]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 148]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 149]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 359];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[4]].signalStart + 0],12);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 359]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 360]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 361]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 118
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 118
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 118
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 359]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 360]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 361]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 362]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 150]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 151]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 152]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 153]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 154]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 155]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 156]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 157]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 371];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[5]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 123
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 123
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 123
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 371]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 372]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 373]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 374]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 158]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 159]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 160]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 161]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 162]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 163]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 164]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 165]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 383];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[6]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 128
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 128
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 128
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 383]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 384]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 385]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 386]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 166]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 167]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 168]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 169]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 170]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 171]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 172]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 173]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 395];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[7]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 133
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 133
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 133
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 395]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 396]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 397]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 398]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 174]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 175]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 176]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 177]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 178]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 179]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 180]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 181]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 407];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[8]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 138
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 138
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 138
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 407]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 408]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 409]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 410]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 182]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 183]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 184]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 185]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 186]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 187]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 188]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 189]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 419];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[9]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 143
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 143
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 143
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 419]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 420]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 421]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 422]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 190]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 191]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 192]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 193]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 194]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 195]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 196]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 197]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 431];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[10]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 148
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 148
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 148
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 431]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 432]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 433]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 434]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 198]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 199]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 200]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 201]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 202]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 203]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 204]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 205]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 443];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[11]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 153
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 153
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 153
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 443]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 444]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 445]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 446]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 206]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 207]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 208]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 209]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 210]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 211]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 212]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 213]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 455];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[12]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 158
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 158
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 158
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 455]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 456]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 457]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 458]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 214]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 215]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 216]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 217]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 218]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 219]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 220]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 221]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 467];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[13]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 163
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 163
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 163
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 467]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 468]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 469]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 470]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 222]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 223]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 224]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 225]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 226]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 227]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 228]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 229]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 479];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[14]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 168
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 168
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 168
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 479]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 480]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 481]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 482]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 230]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 231]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 232]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 233]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 234]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 235]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 236]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 237]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 491];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[15]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 173
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 173
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 173
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 491]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 492]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 493]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 494]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 238]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 239]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 240]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 241]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 242]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 243]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 244]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 245]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 503];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[16]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 178
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 178
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 178
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 503]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 504]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 505]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 506]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 246]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 247]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 248]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 249]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 250]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 251]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 252]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 253]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 515];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[17]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 183
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 183
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 183
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 515]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 516]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 517]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 518]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 254]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 255]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 256]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 257]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 258]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 259]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 260]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 261]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 527];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[18]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 188
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 188
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 188
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 527]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 528]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 529]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 530]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 262]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 263]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 264]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 265]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 266]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 267]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 268]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 269]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 539];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[19]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 193
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 193
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 193
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 539]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 540]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 541]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 542]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 270]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 271]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 272]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 273]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 274]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 275]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 276]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 277]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 551];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[20]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 198
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 198
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 198
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 551]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 552]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 553]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 554]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 278]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 563];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[21]].signalStart + 0],12);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 563]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 564]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 565]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 24];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 566]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 25];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 567]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 26];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 568]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 27];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 569]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 28];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 570]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 29];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 571]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[9]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 206
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 206
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 206
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 563]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 564]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 565]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 566]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 279]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 280]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 281]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 282]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 575];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[22]].signalStart + 0],12);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 30];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 575]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 31];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 576]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 32];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 577]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 212
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 212
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 212
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 575]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 576]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 577]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 578]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 283]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 284]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 285]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 286]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 587];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[23]].signalStart + 0],12);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 33];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 587]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 34];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 588]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 35];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 589]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 218
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 218
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 218
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 587]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 588]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 589]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 590]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 287]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 288]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 289]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 290]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 291]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 292]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 293]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 294]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 599];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[24]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 223
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 223
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 223
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 599]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 600]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 601]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 602]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 295]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 296]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 297]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 298]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 299]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 300]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 301]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 302]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 611];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[25]].signalStart + 0],12);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 228
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 228
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[12]); // line circom 228
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 611]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 612]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 613]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 614]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 303]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 304]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 305]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 306]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 307]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 308]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 309]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 310]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Poseidon_1_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 623];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[26]].signalStart + 0],12);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 36];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 623]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 37];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 624]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 38];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 625]);
}
{
uint cmp_index_ref = 27;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 88];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 36],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
calculateFRIQueries0_7_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 39];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[27]].signalStart + 0],88);
}
for (uint i = 0; i < 28; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void CMul_9_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 9;
ctx->componentMemory[coffset].templateName = "CMul";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 6;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void CMul_9_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[7];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[1],&signalValues[mySignalStart + 3],&signalValues[mySignalStart + 4]); // line circom 14
Fr_add(&expaux[2],&signalValues[mySignalStart + 6],&signalValues[mySignalStart + 7]); // line circom 14
Fr_mul(&expaux[0],&expaux[1],&expaux[2]); // line circom 14
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[1],&signalValues[mySignalStart + 3],&signalValues[mySignalStart + 5]); // line circom 15
Fr_add(&expaux[2],&signalValues[mySignalStart + 6],&signalValues[mySignalStart + 8]); // line circom 15
Fr_mul(&expaux[0],&expaux[1],&expaux[2]); // line circom 15
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_add(&expaux[1],&signalValues[mySignalStart + 4],&signalValues[mySignalStart + 5]); // line circom 16
Fr_add(&expaux[2],&signalValues[mySignalStart + 7],&signalValues[mySignalStart + 8]); // line circom 16
Fr_mul(&expaux[0],&expaux[1],&expaux[2]); // line circom 16
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 3],&signalValues[mySignalStart + 6]); // line circom 17
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 4],&signalValues[mySignalStart + 7]); // line circom 18
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 5],&signalValues[mySignalStart + 8]); // line circom 19
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_sub(&expaux[0],&lvar[3],&lvar[4]); // line circom 20
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
Fr_add(&expaux[1],&lvar[2],&lvar[6]); // line circom 22
Fr_sub(&expaux[0],&expaux[1],&lvar[5]); // line circom 22
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 1];
// load src
Fr_add(&expaux[3],&lvar[0],&lvar[2]); // line circom 23
Fr_sub(&expaux[2],&expaux[3],&lvar[4]); // line circom 23
Fr_sub(&expaux[1],&expaux[2],&lvar[4]); // line circom 23
Fr_sub(&expaux[0],&expaux[1],&lvar[3]); // line circom 23
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 2];
// load src
Fr_sub(&expaux[0],&lvar[1],&lvar[6]); // line circom 24
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void CInv_10_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 10;
ctx->componentMemory[coffset].templateName = "CInv";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 3;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
}

void CInv_10_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[12];
FrElement lvar[16];
uint sub_component_aux;
uint index_multiple_eq;
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+9;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_37_1147";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 3],&signalValues[mySignalStart + 3]); // line circom 14
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 3],&signalValues[mySignalStart + 5]); // line circom 15
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 4],&signalValues[mySignalStart + 3]); // line circom 16
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 4],&signalValues[mySignalStart + 4]); // line circom 17
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 4],&signalValues[mySignalStart + 5]); // line circom 18
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 5],&signalValues[mySignalStart + 5]); // line circom 19
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_mul(&expaux[0],&lvar[0],&signalValues[mySignalStart + 3]); // line circom 21
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
Fr_mul(&expaux[0],&lvar[0],&signalValues[mySignalStart + 5]); // line circom 22
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
Fr_mul(&expaux[0],&lvar[2],&signalValues[mySignalStart + 5]); // line circom 23
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
Fr_mul(&expaux[0],&lvar[2],&signalValues[mySignalStart + 4]); // line circom 24
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_mul(&expaux[0],&lvar[1],&signalValues[mySignalStart + 5]); // line circom 25
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
Fr_mul(&expaux[0],&lvar[3],&signalValues[mySignalStart + 4]); // line circom 26
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
Fr_mul(&expaux[0],&lvar[4],&signalValues[mySignalStart + 5]); // line circom 27
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
Fr_mul(&expaux[0],&lvar[5],&signalValues[mySignalStart + 5]); // line circom 28
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_neg(&expaux[10],&lvar[6]); // line circom 30
Fr_sub(&expaux[9],&expaux[10],&lvar[7]); // line circom 30
Fr_sub(&expaux[8],&expaux[9],&lvar[7]); // line circom 30
Fr_add(&expaux[7],&expaux[8],&lvar[8]); // line circom 30
Fr_add(&expaux[6],&expaux[7],&lvar[8]); // line circom 30
Fr_add(&expaux[5],&expaux[6],&lvar[8]); // line circom 30
Fr_add(&expaux[4],&expaux[5],&lvar[9]); // line circom 30
Fr_sub(&expaux[3],&expaux[4],&lvar[10]); // line circom 30
Fr_sub(&expaux[2],&expaux[3],&lvar[11]); // line circom 30
Fr_add(&expaux[1],&expaux[2],&lvar[12]); // line circom 30
Fr_sub(&expaux[0],&expaux[1],&lvar[13]); // line circom 30
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[15];
// load src
Fr_div(&expaux[0],&circuitConstants[1],&lvar[14]); // line circom 31
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
Fr_neg(&expaux[6],&lvar[0]); // line circom 33
Fr_sub(&expaux[5],&expaux[6],&lvar[1]); // line circom 33
Fr_sub(&expaux[4],&expaux[5],&lvar[1]); // line circom 33
Fr_add(&expaux[3],&expaux[4],&lvar[4]); // line circom 33
Fr_add(&expaux[2],&expaux[3],&lvar[3]); // line circom 33
Fr_sub(&expaux[1],&expaux[2],&lvar[5]); // line circom 33
Fr_mul(&expaux[0],&expaux[1],&lvar[15]); // line circom 33
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 1];
// load src
Fr_sub(&expaux[1],&lvar[2],&lvar[5]); // line circom 34
Fr_mul(&expaux[0],&expaux[1],&lvar[15]); // line circom 34
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 2];
// load src
Fr_neg(&expaux[3],&lvar[3]); // line circom 35
Fr_add(&expaux[2],&expaux[3],&lvar[1]); // line circom 35
Fr_add(&expaux[1],&expaux[2],&lvar[5]); // line circom 35
Fr_mul(&expaux[0],&expaux[1],&lvar[15]); // line circom 35
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],3);
}
Fr_eq(&expaux[0],&circuitConstants[1],&signalValues[mySignalStart + 6]); // line circom 38
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 38. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_eq(&expaux[0],&circuitConstants[0],&signalValues[mySignalStart + 7]); // line circom 38
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 38. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_eq(&expaux[0],&circuitConstants[0],&signalValues[mySignalStart + 8]); // line circom 38
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 38. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void VerifyEvaluations0_11_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 11;
ctx->componentMemory[coffset].templateName = "VerifyEvaluations0";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 154;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[89]{0};
ctx->componentMemory[coffset].outputIsSet = new bool[0]();
ctx->componentMemory[coffset].mutexes = new std::mutex[0];
ctx->componentMemory[coffset].cvs = new std::condition_variable[0];
}

void VerifyEvaluations0_11_run_parallel(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[3];
uint sub_component_aux;
uint index_multiple_eq;
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+712;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CInv_298_14692";
CInv_10_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 18 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 12+ctx_index+1;
uint csoffset = mySignalStart+820;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_307_15115";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 2;
int aux_cmp_num = 13+ctx_index+1;
uint csoffset = mySignalStart+829;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_309_15231";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 3;
int aux_cmp_num = 14+ctx_index+1;
uint csoffset = mySignalStart+838;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_310_15285";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 4;
int aux_cmp_num = 15+ctx_index+1;
uint csoffset = mySignalStart+847;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_314_15608";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 5;
int aux_cmp_num = 16+ctx_index+1;
uint csoffset = mySignalStart+856;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_317_15805";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 6;
int aux_cmp_num = 17+ctx_index+1;
uint csoffset = mySignalStart+865;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_320_16007";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 7;
int aux_cmp_num = 18+ctx_index+1;
uint csoffset = mySignalStart+874;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_323_16213";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 8;
int aux_cmp_num = 19+ctx_index+1;
uint csoffset = mySignalStart+883;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_326_16411";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 9;
int aux_cmp_num = 20+ctx_index+1;
uint csoffset = mySignalStart+892;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_327_16462";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 10;
int aux_cmp_num = 21+ctx_index+1;
uint csoffset = mySignalStart+901;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_330_16736";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 11;
int aux_cmp_num = 22+ctx_index+1;
uint csoffset = mySignalStart+910;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_332_16894";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 12;
int aux_cmp_num = 23+ctx_index+1;
uint csoffset = mySignalStart+919;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_335_17168";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 13;
int aux_cmp_num = 24+ctx_index+1;
uint csoffset = mySignalStart+928;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_337_17327";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 14;
int aux_cmp_num = 25+ctx_index+1;
uint csoffset = mySignalStart+937;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_338_17376";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 15;
int aux_cmp_num = 26+ctx_index+1;
uint csoffset = mySignalStart+946;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_339_17429";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 16;
int aux_cmp_num = 27+ctx_index+1;
uint csoffset = mySignalStart+955;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_342_17655";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 17;
int aux_cmp_num = 28+ctx_index+1;
uint csoffset = mySignalStart+964;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_346_17817";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 18;
int aux_cmp_num = 29+ctx_index+1;
uint csoffset = mySignalStart+973;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_349_18122";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 19;
int aux_cmp_num = 30+ctx_index+1;
uint csoffset = mySignalStart+982;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_355_18560";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 20;
int aux_cmp_num = 31+ctx_index+1;
uint csoffset = mySignalStart+991;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_358_18865";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 21;
int aux_cmp_num = 32+ctx_index+1;
uint csoffset = mySignalStart+1000;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_361_19192";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 22;
int aux_cmp_num = 33+ctx_index+1;
uint csoffset = mySignalStart+1009;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_362_19245";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 23;
int aux_cmp_num = 34+ctx_index+1;
uint csoffset = mySignalStart+1018;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_365_19469";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 24;
int aux_cmp_num = 35+ctx_index+1;
uint csoffset = mySignalStart+1027;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_366_19520";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 25;
int aux_cmp_num = 36+ctx_index+1;
uint csoffset = mySignalStart+1036;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_367_19575";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 26;
int aux_cmp_num = 37+ctx_index+1;
uint csoffset = mySignalStart+1045;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_371_19802";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 27;
int aux_cmp_num = 38+ctx_index+1;
uint csoffset = mySignalStart+1054;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_376_20003";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 28;
int aux_cmp_num = 39+ctx_index+1;
uint csoffset = mySignalStart+1063;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_378_20172";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 29;
int aux_cmp_num = 40+ctx_index+1;
uint csoffset = mySignalStart+1072;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_381_20474";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 30;
int aux_cmp_num = 41+ctx_index+1;
uint csoffset = mySignalStart+1081;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_388_20844";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 31;
int aux_cmp_num = 42+ctx_index+1;
uint csoffset = mySignalStart+1090;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_390_21013";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 32;
int aux_cmp_num = 43+ctx_index+1;
uint csoffset = mySignalStart+1099;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_393_21315";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 33;
int aux_cmp_num = 44+ctx_index+1;
uint csoffset = mySignalStart+1108;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_397_21575";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 34;
int aux_cmp_num = 45+ctx_index+1;
uint csoffset = mySignalStart+1117;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_402_21953";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 35;
int aux_cmp_num = 46+ctx_index+1;
uint csoffset = mySignalStart+1126;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_405_22258";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 36;
int aux_cmp_num = 47+ctx_index+1;
uint csoffset = mySignalStart+1135;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_408_22381";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 37;
int aux_cmp_num = 48+ctx_index+1;
uint csoffset = mySignalStart+1144;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_412_22857";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 38;
int aux_cmp_num = 49+ctx_index+1;
uint csoffset = mySignalStart+1153;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_415_23152";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 39;
int aux_cmp_num = 50+ctx_index+1;
uint csoffset = mySignalStart+1162;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_416_23202";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 40;
int aux_cmp_num = 51+ctx_index+1;
uint csoffset = mySignalStart+1171;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_418_23355";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 41;
int aux_cmp_num = 52+ctx_index+1;
uint csoffset = mySignalStart+1180;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_420_23507";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 42;
int aux_cmp_num = 53+ctx_index+1;
uint csoffset = mySignalStart+1189;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_422_23659";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 43;
int aux_cmp_num = 54+ctx_index+1;
uint csoffset = mySignalStart+1198;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_424_23811";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 44;
int aux_cmp_num = 55+ctx_index+1;
uint csoffset = mySignalStart+1207;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_426_23963";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 45;
int aux_cmp_num = 56+ctx_index+1;
uint csoffset = mySignalStart+1216;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_428_24115";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 46;
int aux_cmp_num = 57+ctx_index+1;
uint csoffset = mySignalStart+1225;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_430_24267";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 47;
int aux_cmp_num = 58+ctx_index+1;
uint csoffset = mySignalStart+1234;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_432_24419";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 48;
int aux_cmp_num = 59+ctx_index+1;
uint csoffset = mySignalStart+1243;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_434_24571";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 49;
int aux_cmp_num = 60+ctx_index+1;
uint csoffset = mySignalStart+1252;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_436_24723";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 50;
int aux_cmp_num = 61+ctx_index+1;
uint csoffset = mySignalStart+1261;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_437_24776";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 51;
int aux_cmp_num = 62+ctx_index+1;
uint csoffset = mySignalStart+1270;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_439_24946";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 52;
int aux_cmp_num = 63+ctx_index+1;
uint csoffset = mySignalStart+1279;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_442_25206";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 53;
int aux_cmp_num = 64+ctx_index+1;
uint csoffset = mySignalStart+1288;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_446_25558";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 54;
int aux_cmp_num = 65+ctx_index+1;
uint csoffset = mySignalStart+1297;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_448_25755";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 55;
int aux_cmp_num = 66+ctx_index+1;
uint csoffset = mySignalStart+1306;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_451_26021";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 56;
int aux_cmp_num = 67+ctx_index+1;
uint csoffset = mySignalStart+1315;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_453_26181";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 57;
int aux_cmp_num = 68+ctx_index+1;
uint csoffset = mySignalStart+1324;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_455_26337";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 58;
int aux_cmp_num = 69+ctx_index+1;
uint csoffset = mySignalStart+1333;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_458_26598";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 59;
int aux_cmp_num = 70+ctx_index+1;
uint csoffset = mySignalStart+1342;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_459_26653";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 60;
int aux_cmp_num = 71+ctx_index+1;
uint csoffset = mySignalStart+1351;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_462_26966";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 61;
int aux_cmp_num = 72+ctx_index+1;
uint csoffset = mySignalStart+1360;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_465_27230";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 62;
int aux_cmp_num = 73+ctx_index+1;
uint csoffset = mySignalStart+1369;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_467_27451";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 63;
int aux_cmp_num = 74+ctx_index+1;
uint csoffset = mySignalStart+1378;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_470_27755";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 64;
int aux_cmp_num = 75+ctx_index+1;
uint csoffset = mySignalStart+1387;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_473_28019";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 65;
int aux_cmp_num = 2+ctx_index+1;
uint csoffset = mySignalStart+730;
uint aux_dimensions[1] = {10};
uint aux_positions [1]= {0};
for (uint i_aux = 0; i_aux < 1; i_aux++) {
uint i = aux_positions[i_aux];
std::string new_cmp_name = "CMul_290_14414"+ctx->generate_position_array(aux_dimensions, 1, i);
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 75;
int aux_cmp_num = 3+ctx_index+1;
uint csoffset = mySignalStart+739;
uint aux_dimensions[1] = {10};
uint aux_positions [9]= {1,2,3,4,5,6,7,8,9};
for (uint i_aux = 0; i_aux < 9; i_aux++) {
uint i = aux_positions[i_aux];
std::string new_cmp_name = "CMul_292_14489"+ctx->generate_position_array(aux_dimensions, 1, i);
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 85;
int aux_cmp_num = 76+ctx_index+1;
uint csoffset = mySignalStart+1396;
uint aux_dimensions[1] = {2};
uint aux_positions [1]= {1};
for (uint i_aux = 0; i_aux < 1; i_aux++) {
uint i = aux_positions[i_aux];
std::string new_cmp_name = "CMul_486_28600"+ctx->generate_position_array(aux_dimensions, 1, i);
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 87;
int aux_cmp_num = 77+ctx_index+1;
uint csoffset = mySignalStart+1405;
uint aux_dimensions[1] = {2};
uint aux_positions [1]= {1};
for (uint i_aux = 0; i_aux < 1; i_aux++) {
uint i = aux_positions[i_aux];
std::string new_cmp_name = "CMul_487_28655"+ctx->generate_position_array(aux_dimensions, 1, i);
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[10]); // line circom 288
while(Fr_isTrue(&expaux[0])){
Fr_eq(&expaux[0],&lvar[2],&circuitConstants[0]); // line circom 289
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[0])) + 65);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 18],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[0])) + 65);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 18],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 154];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((1 * Fr_toInt(&lvar[0])) + 65)]].signalStart + 0],3);
}
}else{
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[0])) + 75);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
Fr_sub(&expaux[0],&lvar[2],&circuitConstants[1]); // line circom 292
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((3 * Fr_toInt(&expaux[0])) + 154)],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[0])) + 75);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
Fr_sub(&expaux[0],&lvar[2],&circuitConstants[1]); // line circom 292
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((3 * Fr_toInt(&expaux[0])) + 154)],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((3 * Fr_toInt(&lvar[2])) + 154)];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((1 * Fr_toInt(&lvar[0])) + 75)]].signalStart + 0],3);
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_add(&expaux[0],&lvar[2],&circuitConstants[1]); // line circom 288
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 288
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[10]); // line circom 288
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 184];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 181],&circuitConstants[1]); // line circom 297
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 185];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 182]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 186];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 183]);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 184],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CInv_10_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 187];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 190];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 66],&signalValues[mySignalStart + 57]); // line circom 305
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 191];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 67],&signalValues[mySignalStart + 58]); // line circom 305
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 192];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 68],&signalValues[mySignalStart + 59]); // line circom 305
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 193];
// load src
Fr_sub(&expaux[0],&circuitConstants[1],&signalValues[mySignalStart + 27]); // line circom 306
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 194];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 28]); // line circom 306
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 195];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 29]); // line circom 306
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 190],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 193],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 196];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 199];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 196],&circuitConstants[1]); // line circom 308
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 200];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 197],&circuitConstants[1]); // line circom 308
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 201];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 198],&circuitConstants[1]); // line circom 308
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 57],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 57],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 202];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[2]].signalStart + 0],3);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 63],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 63],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 205];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[3]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 208];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 202],&signalValues[mySignalStart + 205]); // line circom 311
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 209];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 203],&signalValues[mySignalStart + 206]); // line circom 311
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 210];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 204],&signalValues[mySignalStart + 207]); // line circom 311
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 211];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 60],&signalValues[mySignalStart + 208]); // line circom 312
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 212];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 61],&signalValues[mySignalStart + 209]); // line circom 312
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 213];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 62],&signalValues[mySignalStart + 210]); // line circom 312
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 214];
// load src
Fr_sub(&expaux[0],&circuitConstants[1],&signalValues[mySignalStart + 27]); // line circom 313
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 215];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 28]); // line circom 313
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 216];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 29]); // line circom 313
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 211],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 214],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 217];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[4]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 220];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 217],&circuitConstants[1]); // line circom 315
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 221];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 218],&circuitConstants[1]); // line circom 315
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 222];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 219],&circuitConstants[1]); // line circom 315
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 223];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 63],&signalValues[mySignalStart + 150]); // line circom 316
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 224];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 64]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 225];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 65]);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 24],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 223],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 226];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[5]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 229];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 226],&circuitConstants[1]); // line circom 318
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 230];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 227],&circuitConstants[1]); // line circom 318
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 231];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 228],&circuitConstants[1]); // line circom 318
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 232];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 57],&signalValues[mySignalStart + 151]); // line circom 319
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 233];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 58]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 234];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 59]);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 24],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 232],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 235];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[6]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 238];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 235],&circuitConstants[1]); // line circom 321
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 239];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 236],&circuitConstants[1]); // line circom 321
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 240];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 237],&circuitConstants[1]); // line circom 321
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 241];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 57],&signalValues[mySignalStart + 152]); // line circom 322
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 242];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 58]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 243];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 59]);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 27],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 241],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 244];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[7]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 247];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 244],&circuitConstants[1]); // line circom 324
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 248];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 245],&circuitConstants[1]); // line circom 324
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 249];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 246],&circuitConstants[1]); // line circom 324
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 250];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 114],&circuitConstants[1]); // line circom 325
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 251];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 115]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 252];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 116]);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 21],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 250],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 253];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[8]].signalStart + 0],3);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 111],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 12],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 256];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[9]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 259];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 105],&signalValues[mySignalStart + 256]); // line circom 328
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 260];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 106],&signalValues[mySignalStart + 257]); // line circom 328
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 261];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 107],&signalValues[mySignalStart + 258]); // line circom 328
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 262];
// load src
Fr_add(&expaux[0],&circuitConstants[1],&signalValues[mySignalStart + 12]); // line circom 329
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 263];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 13]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 264];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 14]);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 9],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 262],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 265];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[10]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 268];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 259],&signalValues[mySignalStart + 265]); // line circom 331
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 269];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 260],&signalValues[mySignalStart + 266]); // line circom 331
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 270];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 261],&signalValues[mySignalStart + 267]); // line circom 331
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 108],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 12],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 271];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[11]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 274];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 111],&signalValues[mySignalStart + 271]); // line circom 333
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 275];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 112],&signalValues[mySignalStart + 272]); // line circom 333
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 276];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 113],&signalValues[mySignalStart + 273]); // line circom 333
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 277];
// load src
Fr_add(&expaux[0],&circuitConstants[1],&signalValues[mySignalStart + 12]); // line circom 334
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 278];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 13]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 279];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 14]);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 9],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 277],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 280];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[12]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 283];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 274],&signalValues[mySignalStart + 280]); // line circom 336
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 284];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 275],&signalValues[mySignalStart + 281]); // line circom 336
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 285];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 276],&signalValues[mySignalStart + 282]); // line circom 336
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 268],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 283],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 286];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[13]].signalStart + 0],3);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 117],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 286],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 289];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[14]].signalStart + 0],3);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 114],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 135],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 292];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[15]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 295];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 289],&signalValues[mySignalStart + 292]); // line circom 340
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 296];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 290],&signalValues[mySignalStart + 293]); // line circom 340
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 297];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 291],&signalValues[mySignalStart + 294]); // line circom 340
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 298];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 120],&circuitConstants[1]); // line circom 341
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 299];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 121]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 300];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 122]);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 21],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 298],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 301];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[16]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 304];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 81],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 307];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 81],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 310];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 87],3);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 81],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 313];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[17]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 316];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 313],&signalValues[mySignalStart + 81]); // line circom 347
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 317];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 314],&signalValues[mySignalStart + 82]); // line circom 347
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 318];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 315],&signalValues[mySignalStart + 83]); // line circom 347
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 319];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 316],&signalValues[mySignalStart + 3]); // line circom 348
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 320];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 317],&signalValues[mySignalStart + 4]); // line circom 348
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 321];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 318],&signalValues[mySignalStart + 5]); // line circom 348
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 319],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 87],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 322];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[18]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 325];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 322],&signalValues[mySignalStart + 3]); // line circom 350
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 326];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 323],&signalValues[mySignalStart + 4]); // line circom 350
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 327];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 324],&signalValues[mySignalStart + 5]); // line circom 350
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 328];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 325],&signalValues[mySignalStart + 6]); // line circom 351
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 329];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 326],&signalValues[mySignalStart + 7]); // line circom 351
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 330];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 327],&signalValues[mySignalStart + 8]); // line circom 351
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 331];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 78],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 334];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 78],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 337];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 84],3);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 78],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 340];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[19]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 343];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 340],&signalValues[mySignalStart + 78]); // line circom 356
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 344];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 341],&signalValues[mySignalStart + 79]); // line circom 356
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 345];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 342],&signalValues[mySignalStart + 80]); // line circom 356
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 346];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 343],&signalValues[mySignalStart + 3]); // line circom 357
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 347];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 344],&signalValues[mySignalStart + 4]); // line circom 357
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 348];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 345],&signalValues[mySignalStart + 5]); // line circom 357
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 346],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 84],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 349];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[20]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 352];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 349],&signalValues[mySignalStart + 3]); // line circom 359
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 353];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 350],&signalValues[mySignalStart + 4]); // line circom 359
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 354];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 351],&signalValues[mySignalStart + 5]); // line circom 359
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 355];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 352],&signalValues[mySignalStart + 6]); // line circom 360
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 356];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 353],&signalValues[mySignalStart + 7]); // line circom 360
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 357];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 354],&signalValues[mySignalStart + 8]); // line circom 360
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 123],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 328],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 358];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[21]].signalStart + 0],3);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 120],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 355],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 361];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[22]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 364];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 358],&signalValues[mySignalStart + 361]); // line circom 363
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 365];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 359],&signalValues[mySignalStart + 362]); // line circom 363
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 366];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 360],&signalValues[mySignalStart + 363]); // line circom 363
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 367];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 126],&circuitConstants[1]); // line circom 364
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 368];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 127]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 369];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 128]);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 21],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 367],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 370];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[23]].signalStart + 0],3);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 129],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 138],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 373];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[24]].signalStart + 0],3);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 126],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 141],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 376];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[25]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 379];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 373],&signalValues[mySignalStart + 376]); // line circom 368
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 380];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 374],&signalValues[mySignalStart + 377]); // line circom 368
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 381];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 375],&signalValues[mySignalStart + 378]); // line circom 368
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 382];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 93],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 385];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 96],3);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 93],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 96],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 388];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[26]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 391];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 45],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 394];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 51],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 397];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 99],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 400];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 39],3);
}
{
uint cmp_index_ref = 27;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 27;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 45],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 403];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[27]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 406];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 403],&signalValues[mySignalStart + 51]); // line circom 377
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 407];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 404],&signalValues[mySignalStart + 52]); // line circom 377
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 408];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 405],&signalValues[mySignalStart + 53]); // line circom 377
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 28;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 28;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 406],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 409];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[28]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 412];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 409],&signalValues[mySignalStart + 99]); // line circom 379
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 413];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 410],&signalValues[mySignalStart + 100]); // line circom 379
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 414];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 411],&signalValues[mySignalStart + 101]); // line circom 379
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 415];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 412],&signalValues[mySignalStart + 3]); // line circom 380
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 416];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 413],&signalValues[mySignalStart + 4]); // line circom 380
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 417];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 414],&signalValues[mySignalStart + 5]); // line circom 380
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 29;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 415],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 29;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 39],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 418];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[29]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 421];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 418],&signalValues[mySignalStart + 3]); // line circom 382
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 422];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 419],&signalValues[mySignalStart + 4]); // line circom 382
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 423];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 420],&signalValues[mySignalStart + 5]); // line circom 382
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 424];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 90],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 427];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 48],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 430];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 54],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 433];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 102],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 436];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 42],3);
}
{
uint cmp_index_ref = 30;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 30;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 48],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 439];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[30]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 442];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 439],&signalValues[mySignalStart + 54]); // line circom 389
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 443];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 440],&signalValues[mySignalStart + 55]); // line circom 389
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 444];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 441],&signalValues[mySignalStart + 56]); // line circom 389
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 31;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 31;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 442],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 445];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[31]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 448];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 445],&signalValues[mySignalStart + 102]); // line circom 391
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 449];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 446],&signalValues[mySignalStart + 103]); // line circom 391
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 450];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 447],&signalValues[mySignalStart + 104]); // line circom 391
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 451];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 448],&signalValues[mySignalStart + 3]); // line circom 392
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 452];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 449],&signalValues[mySignalStart + 4]); // line circom 392
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 453];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 450],&signalValues[mySignalStart + 5]); // line circom 392
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 32;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 451],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 32;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 42],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 454];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[32]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 457];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 454],&signalValues[mySignalStart + 3]); // line circom 394
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 458];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 455],&signalValues[mySignalStart + 4]); // line circom 394
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 459];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 456],&signalValues[mySignalStart + 5]); // line circom 394
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 460];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 69],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 463];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 30],3);
}
{
uint cmp_index_ref = 33;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 33;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 30],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 466];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[33]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 469];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 69],&signalValues[mySignalStart + 466]); // line circom 398
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 470];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 70],&signalValues[mySignalStart + 467]); // line circom 398
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 471];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 71],&signalValues[mySignalStart + 468]); // line circom 398
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 472];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 469],&signalValues[mySignalStart + 0]); // line circom 399
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 473];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 470],&signalValues[mySignalStart + 1]); // line circom 399
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 474];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 471],&signalValues[mySignalStart + 2]); // line circom 399
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 475];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 72],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 478];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 33],3);
}
{
uint cmp_index_ref = 34;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 34;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 33],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 481];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[34]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 484];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 72],&signalValues[mySignalStart + 481]); // line circom 403
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 485];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 73],&signalValues[mySignalStart + 482]); // line circom 403
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 486];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 74],&signalValues[mySignalStart + 483]); // line circom 403
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 487];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 484],&signalValues[mySignalStart + 0]); // line circom 404
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 488];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 485],&signalValues[mySignalStart + 1]); // line circom 404
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 489];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 486],&signalValues[mySignalStart + 2]); // line circom 404
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 35;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 472],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 35;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 487],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 490];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[35]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 493];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 75],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 496];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 36],3);
}
{
uint cmp_index_ref = 36;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 36;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 18],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 499];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[36]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 502];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 69],&signalValues[mySignalStart + 499]); // line circom 409
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 503];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 70],&signalValues[mySignalStart + 500]); // line circom 409
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 504];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 71],&signalValues[mySignalStart + 501]); // line circom 409
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 505];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 502],&signalValues[mySignalStart + 0]); // line circom 410
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 506];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 503],&signalValues[mySignalStart + 1]); // line circom 410
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 507];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 504],&signalValues[mySignalStart + 2]); // line circom 410
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 508];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 3],&circuitConstants[50]); // line circom 411
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 509];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 4],&circuitConstants[50]); // line circom 411
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 510];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 5],&circuitConstants[50]); // line circom 411
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 37;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 508],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 37;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 18],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 511];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[37]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 514];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 72],&signalValues[mySignalStart + 511]); // line circom 413
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 515];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 73],&signalValues[mySignalStart + 512]); // line circom 413
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 516];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 74],&signalValues[mySignalStart + 513]); // line circom 413
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 517];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 514],&signalValues[mySignalStart + 0]); // line circom 414
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 518];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 515],&signalValues[mySignalStart + 1]); // line circom 414
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 519];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 516],&signalValues[mySignalStart + 2]); // line circom 414
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 38;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 505],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 38;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 517],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 520];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[38]].signalStart + 0],3);
}
{
uint cmp_index_ref = 39;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 39;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 199],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 523];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[39]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 526];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 523],&signalValues[mySignalStart + 220]); // line circom 417
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 527];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 524],&signalValues[mySignalStart + 221]); // line circom 417
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 528];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 525],&signalValues[mySignalStart + 222]); // line circom 417
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 40;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 40;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 526],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 529];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[40]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 532];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 529],&signalValues[mySignalStart + 229]); // line circom 419
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 533];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 530],&signalValues[mySignalStart + 230]); // line circom 419
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 534];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 531],&signalValues[mySignalStart + 231]); // line circom 419
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 41;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 41;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 532],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 535];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[41]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 538];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 535],&signalValues[mySignalStart + 238]); // line circom 421
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 539];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 536],&signalValues[mySignalStart + 239]); // line circom 421
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 540];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 537],&signalValues[mySignalStart + 240]); // line circom 421
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 42;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 42;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 538],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 541];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[42]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 544];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 541],&signalValues[mySignalStart + 247]); // line circom 423
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 545];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 542],&signalValues[mySignalStart + 248]); // line circom 423
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 546];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 543],&signalValues[mySignalStart + 249]); // line circom 423
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 43;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 43;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 544],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 547];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[43]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 550];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 547],&signalValues[mySignalStart + 253]); // line circom 425
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 551];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 548],&signalValues[mySignalStart + 254]); // line circom 425
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 552];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 549],&signalValues[mySignalStart + 255]); // line circom 425
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 44;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 44;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 550],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 553];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[44]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 556];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 553],&signalValues[mySignalStart + 295]); // line circom 427
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 557];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 554],&signalValues[mySignalStart + 296]); // line circom 427
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 558];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 555],&signalValues[mySignalStart + 297]); // line circom 427
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 45;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 45;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 556],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 559];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[45]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 562];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 559],&signalValues[mySignalStart + 301]); // line circom 429
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 563];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 560],&signalValues[mySignalStart + 302]); // line circom 429
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 564];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 561],&signalValues[mySignalStart + 303]); // line circom 429
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 46;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 46;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 562],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 565];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 568];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 565],&signalValues[mySignalStart + 364]); // line circom 431
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 569];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 566],&signalValues[mySignalStart + 365]); // line circom 431
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 570];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 567],&signalValues[mySignalStart + 366]); // line circom 431
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 47;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 47;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 568],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 571];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[47]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 574];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 571],&signalValues[mySignalStart + 370]); // line circom 433
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 575];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 572],&signalValues[mySignalStart + 371]); // line circom 433
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 576];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 573],&signalValues[mySignalStart + 372]); // line circom 433
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 48;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 48;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 574],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 577];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[48]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 580];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 577],&signalValues[mySignalStart + 379]); // line circom 435
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 581];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 578],&signalValues[mySignalStart + 380]); // line circom 435
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 582];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 579],&signalValues[mySignalStart + 381]); // line circom 435
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 49;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 49;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 580],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 583];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[49]].signalStart + 0],3);
}
{
uint cmp_index_ref = 50;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 93],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 50;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 586];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[50]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 589];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 586],&signalValues[mySignalStart + 96]); // line circom 438
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 590];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 587],&signalValues[mySignalStart + 97]); // line circom 438
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 591];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 588],&signalValues[mySignalStart + 98]); // line circom 438
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 51;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 589],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 51;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 592];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[51]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 595];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 592],&signalValues[mySignalStart + 388]); // line circom 440
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 596];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 593],&signalValues[mySignalStart + 389]); // line circom 440
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 597];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 594],&signalValues[mySignalStart + 390]); // line circom 440
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 598];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 595],&signalValues[mySignalStart + 421]); // line circom 441
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 599];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 596],&signalValues[mySignalStart + 422]); // line circom 441
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 600];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 597],&signalValues[mySignalStart + 423]); // line circom 441
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 52;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 598],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 52;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 90],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 601];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[52]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 604];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 601],&signalValues[mySignalStart + 421]); // line circom 443
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 605];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 602],&signalValues[mySignalStart + 422]); // line circom 443
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 606];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 603],&signalValues[mySignalStart + 423]); // line circom 443
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 607];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 132],&signalValues[mySignalStart + 604]); // line circom 444
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 608];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 133],&signalValues[mySignalStart + 605]); // line circom 444
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 609];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 134],&signalValues[mySignalStart + 606]); // line circom 444
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 610];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 583],&signalValues[mySignalStart + 607]); // line circom 445
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 611];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 584],&signalValues[mySignalStart + 608]); // line circom 445
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 612];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 585],&signalValues[mySignalStart + 609]); // line circom 445
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 53;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 53;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 610],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 613];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[53]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 616];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 132],&signalValues[mySignalStart + 9]); // line circom 447
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 617];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 133],&signalValues[mySignalStart + 10]); // line circom 447
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 618];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 134],&signalValues[mySignalStart + 11]); // line circom 447
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 54;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 457],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 54;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 12],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 619];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[54]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 622];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 421],&signalValues[mySignalStart + 619]); // line circom 449
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 623];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 422],&signalValues[mySignalStart + 620]); // line circom 449
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 624];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 423],&signalValues[mySignalStart + 621]); // line circom 449
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 625];
// load src
Fr_add(&expaux[0],&circuitConstants[1],&signalValues[mySignalStart + 12]); // line circom 450
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 626];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 13]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 627];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 14]);
}
{
uint cmp_index_ref = 55;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 9],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 55;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 625],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 628];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[55]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 631];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 622],&signalValues[mySignalStart + 628]); // line circom 452
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 632];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 623],&signalValues[mySignalStart + 629]); // line circom 452
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 633];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 624],&signalValues[mySignalStart + 630]); // line circom 452
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 56;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 616],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 56;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 631],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 634];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[56]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 637];
// load src
Fr_add(&expaux[0],&circuitConstants[1],&signalValues[mySignalStart + 12]); // line circom 454
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 638];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 13]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 639];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 14]);
}
{
uint cmp_index_ref = 57;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 634],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 57;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 637],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 640];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[57]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 643];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 135],&signalValues[mySignalStart + 640]); // line circom 456
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 644];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 136],&signalValues[mySignalStart + 641]); // line circom 456
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 645];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 137],&signalValues[mySignalStart + 642]); // line circom 456
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 646];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 613],&signalValues[mySignalStart + 643]); // line circom 457
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 647];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 614],&signalValues[mySignalStart + 644]); // line circom 457
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 648];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 615],&signalValues[mySignalStart + 645]); // line circom 457
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 58;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 58;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 646],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 649];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[58]].signalStart + 0],3);
}
{
uint cmp_index_ref = 59;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 59;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 36],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 652];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[59]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 655];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 75],&signalValues[mySignalStart + 652]); // line circom 460
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 656];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 76],&signalValues[mySignalStart + 653]); // line circom 460
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 657];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 77],&signalValues[mySignalStart + 654]); // line circom 460
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 658];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 655],&signalValues[mySignalStart + 0]); // line circom 461
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 659];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 656],&signalValues[mySignalStart + 1]); // line circom 461
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 660];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 657],&signalValues[mySignalStart + 2]); // line circom 461
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 60;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 490],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 60;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 658],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 661];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[60]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 664];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 138],&signalValues[mySignalStart + 661]); // line circom 463
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 665];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 139],&signalValues[mySignalStart + 662]); // line circom 463
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 666];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 140],&signalValues[mySignalStart + 663]); // line circom 463
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 667];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 649],&signalValues[mySignalStart + 664]); // line circom 464
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 668];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 650],&signalValues[mySignalStart + 665]); // line circom 464
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 669];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 651],&signalValues[mySignalStart + 666]); // line circom 464
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 61;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 61;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 667],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 670];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[61]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 673];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 3],&circuitConstants[51]); // line circom 466
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 674];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 4],&circuitConstants[51]); // line circom 466
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 675];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 5],&circuitConstants[51]); // line circom 466
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 62;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 673],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 62;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 18],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 676];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[62]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 679];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 75],&signalValues[mySignalStart + 676]); // line circom 468
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 680];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 76],&signalValues[mySignalStart + 677]); // line circom 468
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 681];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 77],&signalValues[mySignalStart + 678]); // line circom 468
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 682];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 679],&signalValues[mySignalStart + 0]); // line circom 469
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 683];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 680],&signalValues[mySignalStart + 1]); // line circom 469
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 684];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 681],&signalValues[mySignalStart + 2]); // line circom 469
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 63;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 520],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 63;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 682],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 685];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[63]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 688];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 141],&signalValues[mySignalStart + 685]); // line circom 471
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 689];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 142],&signalValues[mySignalStart + 686]); // line circom 471
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 690];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 143],&signalValues[mySignalStart + 687]); // line circom 471
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 691];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 670],&signalValues[mySignalStart + 688]); // line circom 472
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 692];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 671],&signalValues[mySignalStart + 689]); // line circom 472
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 693];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 672],&signalValues[mySignalStart + 690]); // line circom 472
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 64;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 691],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 64;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 187],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 694];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[64]].signalStart + 0],3);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[2]); // line circom 481
while(Fr_isTrue(&expaux[0])){
Fr_eq(&expaux[0],&lvar[2],&circuitConstants[0]); // line circom 482
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + 697];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 698];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 699];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 706];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 144],3);
}
}else{
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 85);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 697],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 85);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 181],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 700];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((1 * Fr_toInt(&lvar[1])) + 85)]].signalStart + 0],3);
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 87);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 700],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 87);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 147],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 703];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((1 * Fr_toInt(&lvar[1])) + 87)]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 709];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 706],&signalValues[mySignalStart + 703]); // line circom 488
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 710];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 707],&signalValues[mySignalStart + 704]); // line circom 489
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 711];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 708],&signalValues[mySignalStart + 705]); // line circom 490
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_add(&expaux[0],&lvar[2],&circuitConstants[1]); // line circom 481
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 481
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[2]); // line circom 481
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + 694],&signalValues[mySignalStart + 709]); // line circom 495
Fr_mul(&expaux[1],&signalValues[mySignalStart + 153],&expaux[3]); // line circom 495
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 495
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 495. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 695],&signalValues[mySignalStart + 710]); // line circom 496
Fr_mul(&expaux[1],&signalValues[mySignalStart + 153],&expaux[3]); // line circom 496
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 496
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 496. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 696],&signalValues[mySignalStart + 711]); // line circom 497
Fr_mul(&expaux[1],&signalValues[mySignalStart + 153],&expaux[3]); // line circom 497
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 497
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 497. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 0; i++) {
ctx->componentMemory[ctx_index].mutexes[i].lock();
ctx->componentMemory[ctx_index].outputIsSet[i]=true;
ctx->componentMemory[ctx_index].mutexes[i].unlock();
ctx->componentMemory[ctx_index].cvs[i].notify_all();
}
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
for (uint i = 0; i < 89; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void Poseidon_12_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 12;
ctx->componentMemory[coffset].templateName = "Poseidon";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 12;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
}

void Poseidon_12_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[2];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+16;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "p";
Poseidon12_0_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 132 ;
aux_cmp_num += 1;
}
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[8]); // line circom 194
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[1])) + 120)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[1])) + 4)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon12_0_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 194
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[8]); // line circom 194
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[4]); // line circom 197
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * (8 + Fr_toInt(&lvar[1]))) + 120)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[1])) + 12)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon12_0_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 197
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[4]); // line circom 197
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[4]); // line circom 202
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[1])) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + ((1 * Fr_toInt(&lvar[1])) + 108)]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 202
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[4]); // line circom 202
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[12]); // line circom 208
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 208
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[12]); // line circom 208
}
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void LinearHash_13_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 13;
ctx->componentMemory[coffset].templateName = "LinearHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 15;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[2]{0};
}

void LinearHash_13_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[7];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+19;
uint aux_dimensions[1] = {2};
for (uint i = 0; i < 2; i++) {
std::string new_cmp_name = "hash"+ctx->generate_position_array(aux_dimensions, 1, i);
Poseidon_12_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 148 ;
aux_cmp_num += 2;
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[2]); // line circom 40
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[8]); // line circom 42
while(Fr_isTrue(&expaux[0])){
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[29]); // line circom 43
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[5])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((1 * Fr_toInt(&lvar[3])) + 0) + 4)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_add(&expaux[0],&lvar[3],&circuitConstants[1]); // line circom 48
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}else{
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 42
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[8]); // line circom 42
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 54
while(Fr_isTrue(&expaux[0])){
Fr_gt(&expaux[0],&lvar[5],&circuitConstants[0]); // line circom 55
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 12)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 0)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}else{
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 12)];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 54
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 54
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 40
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[2]); // line circom 40
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 63
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[5])) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + ((1 * Fr_toInt(&lvar[5])) + 0)]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 63
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 63
}
for (uint i = 0; i < 2; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void CustPoseidon12_14_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 14;
ctx->componentMemory[coffset].templateName = "CustPoseidon12";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 9;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void CustPoseidon12_14_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[7];
FrElement lvar[41];
uint sub_component_aux;
uint index_multiple_eq;
Fr_sub(&expaux[3],&signalValues[mySignalStart + 128],&circuitConstants[1]); // line circom 94
Fr_mul(&expaux[1],&signalValues[mySignalStart + 128],&expaux[3]); // line circom 94
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 94
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 94. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_sub(&expaux[3],&signalValues[mySignalStart + 120],&signalValues[mySignalStart + 124]); // line circom 99
Fr_mul(&expaux[1],&signalValues[mySignalStart + 128],&expaux[3]); // line circom 99
Fr_add(&expaux[0],&expaux[1],&signalValues[mySignalStart + 124]); // line circom 99
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_sub(&expaux[3],&signalValues[mySignalStart + 121],&signalValues[mySignalStart + 125]); // line circom 100
Fr_mul(&expaux[1],&signalValues[mySignalStart + 128],&expaux[3]); // line circom 100
Fr_add(&expaux[0],&expaux[1],&signalValues[mySignalStart + 125]); // line circom 100
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_sub(&expaux[3],&signalValues[mySignalStart + 122],&signalValues[mySignalStart + 126]); // line circom 101
Fr_mul(&expaux[1],&signalValues[mySignalStart + 128],&expaux[3]); // line circom 101
Fr_add(&expaux[0],&expaux[1],&signalValues[mySignalStart + 126]); // line circom 101
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_sub(&expaux[3],&signalValues[mySignalStart + 123],&signalValues[mySignalStart + 127]); // line circom 102
Fr_mul(&expaux[1],&signalValues[mySignalStart + 128],&expaux[3]); // line circom 102
Fr_add(&expaux[0],&expaux[1],&signalValues[mySignalStart + 127]); // line circom 102
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
Fr_sub(&expaux[3],&signalValues[mySignalStart + 124],&signalValues[mySignalStart + 120]); // line circom 103
Fr_mul(&expaux[1],&signalValues[mySignalStart + 128],&expaux[3]); // line circom 103
Fr_add(&expaux[0],&expaux[1],&signalValues[mySignalStart + 120]); // line circom 103
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_sub(&expaux[3],&signalValues[mySignalStart + 125],&signalValues[mySignalStart + 121]); // line circom 104
Fr_mul(&expaux[1],&signalValues[mySignalStart + 128],&expaux[3]); // line circom 104
Fr_add(&expaux[0],&expaux[1],&signalValues[mySignalStart + 121]); // line circom 104
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_sub(&expaux[3],&signalValues[mySignalStart + 126],&signalValues[mySignalStart + 122]); // line circom 105
Fr_mul(&expaux[1],&signalValues[mySignalStart + 128],&expaux[3]); // line circom 105
Fr_add(&expaux[0],&expaux[1],&signalValues[mySignalStart + 122]); // line circom 105
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
Fr_sub(&expaux[3],&signalValues[mySignalStart + 127],&signalValues[mySignalStart + 123]); // line circom 106
Fr_mul(&expaux[1],&signalValues[mySignalStart + 128],&expaux[3]); // line circom 106
Fr_add(&expaux[0],&expaux[1],&signalValues[mySignalStart + 123]); // line circom 106
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[0],12);
}
{
PFrElement aux_dest = &lvar[24];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[24],&circuitConstants[12]); // line circom 114
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[119];
// copying argument 0
Fr_copy(&lvarcall[0],&lvar[24]);
// end copying argument 0
CNST_0(ctx,lvarcall,myId,&lvar[25],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[24])) + 12)];
// load src
Fr_add(&expaux[0],&lvar[((1 * Fr_toInt(&lvar[24])) + 12)],&lvar[25]); // line circom 115
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[24];
// load src
Fr_add(&expaux[0],&lvar[24],&circuitConstants[1]); // line circom 114
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[24],&circuitConstants[12]); // line circom 114
}
{
PFrElement aux_dest = &lvar[24];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[25];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[26];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[27];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[28];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[29];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[30];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[31];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[32];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[33];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[34];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[35];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[36];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[36],&circuitConstants[4]); // line circom 119
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[37];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[37],&circuitConstants[12]); // line circom 120
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[37])) + 12)];
// load src
Fr_pow(&expaux[0],&lvar[((1 * Fr_toInt(&lvar[37])) + 12)],&circuitConstants[7]); // line circom 121
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{

// start of call bucket
FrElement lvarcall[119];
// copying argument 0
Fr_add(&expaux[3],&lvar[36],&circuitConstants[1]); // line circom 122
Fr_mul(&expaux[2],&expaux[3],&circuitConstants[12]); // line circom 122
Fr_add(&expaux[1],&expaux[2],&lvar[37]); // line circom 122
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
CNST_0(ctx,lvarcall,myId,&lvar[38],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[37])) + 12)];
// load src
Fr_add(&expaux[0],&lvar[((1 * Fr_toInt(&lvar[37])) + 12)],&lvar[38]); // line circom 122
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[37];
// load src
Fr_add(&expaux[0],&lvar[37],&circuitConstants[1]); // line circom 120
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[37],&circuitConstants[12]); // line circom 120
}
{
PFrElement aux_dest = &lvar[37];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[37],&circuitConstants[12]); // line circom 125
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[38];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[39];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[39],&circuitConstants[12]); // line circom 127
while(Fr_isTrue(&expaux[0])){
Fr_lt(&expaux[0],&lvar[36],&circuitConstants[3]); // line circom 128
if(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[290];
// copying argument 0
Fr_copy(&lvarcall[0],&lvar[39]);
// end copying argument 0
// copying argument 1
Fr_copy(&lvarcall[1],&lvar[37]);
// end copying argument 1
M_1(ctx,lvarcall,myId,&lvar[40],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[38];
// load src
Fr_mul(&expaux[2],&lvar[40],&lvar[((1 * Fr_toInt(&lvar[39])) + 12)]); // line circom 129
Fr_add(&expaux[0],&lvar[38],&expaux[2]); // line circom 129
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}else{
{

// start of call bucket
FrElement lvarcall[290];
// copying argument 0
Fr_copy(&lvarcall[0],&lvar[39]);
// end copying argument 0
// copying argument 1
Fr_copy(&lvarcall[1],&lvar[37]);
// end copying argument 1
P_2(ctx,lvarcall,myId,&lvar[40],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[38];
// load src
Fr_mul(&expaux[2],&lvar[40],&lvar[((1 * Fr_toInt(&lvar[39])) + 12)]); // line circom 131
Fr_add(&expaux[0],&lvar[38],&expaux[2]); // line circom 131
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
{
PFrElement aux_dest = &lvar[39];
// load src
Fr_add(&expaux[0],&lvar[39],&circuitConstants[1]); // line circom 127
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[39],&circuitConstants[12]); // line circom 127
}
{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[37])) + 24)];
// load src
// end load src
Fr_copy(aux_dest,&lvar[38]);
}
{
PFrElement aux_dest = &lvar[37];
// load src
Fr_add(&expaux[0],&lvar[37],&circuitConstants[1]); // line circom 125
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[37],&circuitConstants[12]); // line circom 125
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[24],12);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((12 * Fr_toInt(&lvar[36])) + 0)];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[12],12);
}
{
PFrElement aux_dest = &lvar[36];
// load src
Fr_add(&expaux[0],&lvar[36],&circuitConstants[1]); // line circom 119
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[36],&circuitConstants[4]); // line circom 119
}
{
PFrElement aux_dest = &lvar[12];
// load src
Fr_pow(&expaux[0],&lvar[12],&circuitConstants[7]); // line circom 140
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
Fr_add(&expaux[0],&lvar[12],&circuitConstants[13]); // line circom 141
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[36];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[36],&circuitConstants[14]); // line circom 143
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[37];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[38];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[38],&circuitConstants[12]); // line circom 145
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[507];
// copying argument 0
Fr_mul(&expaux[2],&circuitConstants[15],&lvar[36]); // line circom 146
Fr_add(&expaux[1],&expaux[2],&lvar[38]); // line circom 146
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
S_3(ctx,lvarcall,myId,&lvar[39],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[37];
// load src
Fr_mul(&expaux[2],&lvar[39],&lvar[((1 * Fr_toInt(&lvar[38])) + 12)]); // line circom 146
Fr_add(&expaux[0],&lvar[37],&expaux[2]); // line circom 146
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[38];
// load src
Fr_add(&expaux[0],&lvar[38],&circuitConstants[1]); // line circom 145
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[38],&circuitConstants[12]); // line circom 145
}
{
PFrElement aux_dest = &lvar[38];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
Fr_lt(&expaux[0],&lvar[38],&circuitConstants[12]); // line circom 149
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[507];
// copying argument 0
Fr_mul(&expaux[3],&circuitConstants[15],&lvar[36]); // line circom 150
Fr_add(&expaux[2],&expaux[3],&circuitConstants[11]); // line circom 150
Fr_add(&expaux[1],&expaux[2],&lvar[38]); // line circom 150
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
S_3(ctx,lvarcall,myId,&lvar[39],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[38])) + 12)];
// load src
Fr_mul(&expaux[2],&lvar[12],&lvar[39]); // line circom 150
Fr_add(&expaux[0],&lvar[((1 * Fr_toInt(&lvar[38])) + 12)],&expaux[2]); // line circom 150
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[38];
// load src
Fr_add(&expaux[0],&lvar[38],&circuitConstants[1]); // line circom 149
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[38],&circuitConstants[12]); // line circom 149
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&lvar[37]);
}
Fr_eq(&expaux[0],&lvar[36],&circuitConstants[10]); // line circom 154
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + 48];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[12],12);
}
}
Fr_lt(&expaux[0],&lvar[36],&circuitConstants[16]); // line circom 155
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[12];
// load src
Fr_pow(&expaux[0],&lvar[12],&circuitConstants[7]); // line circom 156
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{

// start of call bucket
FrElement lvarcall[119];
// copying argument 0
Fr_add(&expaux[2],&circuitConstants[17],&lvar[36]); // line circom 157
Fr_add(&expaux[1],&expaux[2],&circuitConstants[1]); // line circom 157
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
CNST_0(ctx,lvarcall,myId,&lvar[38],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[12];
// load src
Fr_add(&expaux[0],&lvar[12],&lvar[38]); // line circom 157
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
{
PFrElement aux_dest = &lvar[36];
// load src
Fr_add(&expaux[0],&lvar[36],&circuitConstants[1]); // line circom 143
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[36],&circuitConstants[14]); // line circom 143
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 60];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[12],12);
}
{
PFrElement aux_dest = &lvar[36];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[36],&circuitConstants[4]); // line circom 162
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[37];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[37],&circuitConstants[12]); // line circom 163
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[37])) + 12)];
// load src
Fr_pow(&expaux[0],&lvar[((1 * Fr_toInt(&lvar[37])) + 12)],&circuitConstants[7]); // line circom 164
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{

// start of call bucket
FrElement lvarcall[119];
// copying argument 0
Fr_mul(&expaux[4],&circuitConstants[12],&lvar[36]); // line circom 165
Fr_add(&expaux[2],&circuitConstants[18],&expaux[4]); // line circom 165
Fr_add(&expaux[1],&expaux[2],&lvar[37]); // line circom 165
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
CNST_0(ctx,lvarcall,myId,&lvar[38],1);
// end call bucket
}

Fr_lt(&expaux[0],&lvar[36],&circuitConstants[3]); // line circom 165
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[37])) + 12)];
// load src
Fr_add(&expaux[0],&lvar[((1 * Fr_toInt(&lvar[37])) + 12)],&lvar[38]); // line circom 165
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
{
PFrElement aux_dest = &lvar[37];
// load src
Fr_add(&expaux[0],&lvar[37],&circuitConstants[1]); // line circom 163
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[37],&circuitConstants[12]); // line circom 163
}
{
PFrElement aux_dest = &lvar[37];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[37],&circuitConstants[12]); // line circom 168
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[38];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[39];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[39],&circuitConstants[12]); // line circom 170
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[290];
// copying argument 0
Fr_copy(&lvarcall[0],&lvar[39]);
// end copying argument 0
// copying argument 1
Fr_copy(&lvarcall[1],&lvar[37]);
// end copying argument 1
M_1(ctx,lvarcall,myId,&lvar[40],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[38];
// load src
Fr_mul(&expaux[2],&lvar[40],&lvar[((1 * Fr_toInt(&lvar[39])) + 12)]); // line circom 171
Fr_add(&expaux[0],&lvar[38],&expaux[2]); // line circom 171
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[39];
// load src
Fr_add(&expaux[0],&lvar[39],&circuitConstants[1]); // line circom 170
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[39],&circuitConstants[12]); // line circom 170
}
{
PFrElement aux_dest = &lvar[((1 * Fr_toInt(&lvar[37])) + 24)];
// load src
// end load src
Fr_copy(aux_dest,&lvar[38]);
}
{
PFrElement aux_dest = &lvar[37];
// load src
Fr_add(&expaux[0],&lvar[37],&circuitConstants[1]); // line circom 168
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[37],&circuitConstants[12]); // line circom 168
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[24],12);
}
Fr_lt(&expaux[0],&lvar[36],&circuitConstants[3]); // line circom 176
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((12 * (Fr_toInt(&lvar[36]) + 6)) + 0)];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[12],12);
}
}else{
{
PFrElement aux_dest = &signalValues[mySignalStart + 108];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[12],12);
}
}
{
PFrElement aux_dest = &lvar[36];
// load src
Fr_add(&expaux[0],&lvar[36],&circuitConstants[1]); // line circom 162
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[36],&circuitConstants[4]); // line circom 162
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void CustPoseidon_15_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 15;
ctx->componentMemory[coffset].templateName = "CustPoseidon";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 9;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
}

void CustPoseidon_15_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[2];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+13;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "p";
CustPoseidon12_14_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 129 ;
aux_cmp_num += 1;
}
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[8]); // line circom 223
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[1])) + 120)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[1])) + 4)]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 223
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[8]); // line circom 223
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 128];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 12]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CustPoseidon12_14_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[4]); // line circom 230
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[1])) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + ((1 * Fr_toInt(&lvar[1])) + 108)]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 230
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[4]); // line circom 230
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[12]); // line circom 236
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 236
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[12]); // line circom 236
}
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void Merkle_16_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 16;
ctx->componentMemory[coffset].templateName = "Merkle";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 59;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[11]{0};
}

void Merkle_16_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[5];
FrElement lvar[3];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+63;
uint aux_dimensions[1] = {11};
for (uint i = 0; i < 11; i++) {
std::string new_cmp_name = "hash"+ctx->generate_position_array(aux_dimensions, 1, i);
CustPoseidon_15_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 142 ;
aux_cmp_num += 2;
}
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[11]); // line circom 19
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[4]); // line circom 26
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[2])) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((4 * Fr_toInt(&lvar[1])) + (1 * Fr_toInt(&lvar[2]))) + 8)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
CustPoseidon_15_run(mySubcomponents[cmp_index_ref],ctx);

}
}
Fr_gt(&expaux[0],&lvar[1],&circuitConstants[0]); // line circom 30
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * (Fr_toInt(&lvar[2]) + 4)) + 4)];
// load src
Fr_sub(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 31
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((1 * Fr_toInt(&expaux[0])) + 0)]].signalStart + ((1 * Fr_toInt(&lvar[2])) + 0)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
CustPoseidon_15_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}else{
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * (Fr_toInt(&lvar[2]) + 4)) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[2])) + 4)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
CustPoseidon_15_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_add(&expaux[0],&lvar[2],&circuitConstants[1]); // line circom 26
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[4]); // line circom 26
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[1])) + 52)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
CustPoseidon_15_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 19
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[11]); // line circom 19
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[10]].signalStart + 0],4);
}
for (uint i = 0; i < 11; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void MerkleHash_17_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 17;
ctx->componentMemory[coffset].templateName = "MerkleHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 70;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[2]{0};
}

void MerkleHash_17_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[2];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[52]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+78;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "LinearHash_24_1138";
LinearHash_13_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 315 ;
aux_cmp_num += 5;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 5+ctx_index+1;
uint csoffset = mySignalStart+393;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Merkle_27_1231";
Merkle_16_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1625 ;
aux_cmp_num += 23;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 16. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 4],15);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 15;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
LinearHash_13_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 74];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],4);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 52];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 63],11);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 8];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 19],44);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 74],4);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Merkle_16_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + 0],4);
}
for (uint i = 0; i < 2; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void VerifyMerkleHash_18_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 18;
ctx->componentMemory[coffset].templateName = "VerifyMerkleHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 75;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
ctx->componentMemory[coffset].outputIsSet = new bool[0]();
ctx->componentMemory[coffset].mutexes = new std::mutex[0];
ctx->componentMemory[coffset].cvs = new std::condition_variable[0];
}

void VerifyMerkleHash_18_run_parallel(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[29]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[52]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+79;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "MerkleHash_40_1918";
MerkleHash_17_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 2018 ;
aux_cmp_num += 29;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 33. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 63];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 59],11);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 19];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],44);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],15);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 15;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
MerkleHash_17_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 75];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],4);
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + 75],&signalValues[mySignalStart + 70]); // line circom 43
Fr_mul(&expaux[1],&signalValues[mySignalStart + 74],&expaux[3]); // line circom 43
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 43
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 43. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 76],&signalValues[mySignalStart + 71]); // line circom 44
Fr_mul(&expaux[1],&signalValues[mySignalStart + 74],&expaux[3]); // line circom 44
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 44
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 44. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 77],&signalValues[mySignalStart + 72]); // line circom 45
Fr_mul(&expaux[1],&signalValues[mySignalStart + 74],&expaux[3]); // line circom 45
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 45
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 45. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 78],&signalValues[mySignalStart + 73]); // line circom 46
Fr_mul(&expaux[1],&signalValues[mySignalStart + 74],&expaux[3]); // line circom 46
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 46
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 46. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 0; i++) {
ctx->componentMemory[ctx_index].mutexes[i].lock();
ctx->componentMemory[ctx_index].outputIsSet[i]=true;
ctx->componentMemory[ctx_index].mutexes[i].unlock();
ctx->componentMemory[ctx_index].cvs[i].notify_all();
}
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void LinearHash_19_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 19;
ctx->componentMemory[coffset].templateName = "LinearHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 12;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[2]{0};
}

void LinearHash_19_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[7];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[12]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+16;
uint aux_dimensions[1] = {2};
for (uint i = 0; i < 2; i++) {
std::string new_cmp_name = "hash"+ctx->generate_position_array(aux_dimensions, 1, i);
Poseidon_12_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 148 ;
aux_cmp_num += 2;
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[2]); // line circom 40
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[8]); // line circom 42
while(Fr_isTrue(&expaux[0])){
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[12]); // line circom 43
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[5])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((1 * Fr_toInt(&lvar[3])) + 0) + 4)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_add(&expaux[0],&lvar[3],&circuitConstants[1]); // line circom 48
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}else{
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 42
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[8]); // line circom 42
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 54
while(Fr_isTrue(&expaux[0])){
Fr_gt(&expaux[0],&lvar[5],&circuitConstants[0]); // line circom 55
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 12)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 0)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}else{
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 12)];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 54
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 54
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 40
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[2]); // line circom 40
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 63
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[5])) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + ((1 * Fr_toInt(&lvar[5])) + 0)]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 63
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 63
}
for (uint i = 0; i < 2; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void MerkleHash_20_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 20;
ctx->componentMemory[coffset].templateName = "MerkleHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 67;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[2]{0};
}

void MerkleHash_20_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[2];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[12]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[52]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+75;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "LinearHash_24_1138";
LinearHash_19_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 312 ;
aux_cmp_num += 5;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 5+ctx_index+1;
uint csoffset = mySignalStart+387;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Merkle_27_1231";
Merkle_16_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1625 ;
aux_cmp_num += 23;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 16. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 4],12);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 12;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
LinearHash_19_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 71];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],4);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 52];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 60],11);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 8];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 16],44);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 71],4);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Merkle_16_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + 0],4);
}
for (uint i = 0; i < 2; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void VerifyMerkleHash_21_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 21;
ctx->componentMemory[coffset].templateName = "VerifyMerkleHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 72;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
ctx->componentMemory[coffset].outputIsSet = new bool[0]();
ctx->componentMemory[coffset].mutexes = new std::mutex[0];
ctx->componentMemory[coffset].cvs = new std::condition_variable[0];
}

void VerifyMerkleHash_21_run_parallel(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[12]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[52]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+76;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "MerkleHash_40_1918";
MerkleHash_20_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 2012 ;
aux_cmp_num += 29;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 33. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 60];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 56],11);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 12],44);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],12);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 12;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
MerkleHash_20_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 72];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],4);
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + 72],&signalValues[mySignalStart + 67]); // line circom 43
Fr_mul(&expaux[1],&signalValues[mySignalStart + 71],&expaux[3]); // line circom 43
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 43
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 43. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 73],&signalValues[mySignalStart + 68]); // line circom 44
Fr_mul(&expaux[1],&signalValues[mySignalStart + 71],&expaux[3]); // line circom 44
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 44
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 44. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 74],&signalValues[mySignalStart + 69]); // line circom 45
Fr_mul(&expaux[1],&signalValues[mySignalStart + 71],&expaux[3]); // line circom 45
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 45
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 45. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 75],&signalValues[mySignalStart + 70]); // line circom 46
Fr_mul(&expaux[1],&signalValues[mySignalStart + 71],&expaux[3]); // line circom 46
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 46
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 46. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 0; i++) {
ctx->componentMemory[ctx_index].mutexes[i].lock();
ctx->componentMemory[ctx_index].outputIsSet[i]=true;
ctx->componentMemory[ctx_index].mutexes[i].unlock();
ctx->componentMemory[ctx_index].cvs[i].notify_all();
}
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void LinearHash_22_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 22;
ctx->componentMemory[coffset].templateName = "LinearHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 6;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
}

void LinearHash_22_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[7];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[6]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+10;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "hash";
Poseidon_12_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 148 ;
aux_cmp_num += 2;
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 40
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[8]); // line circom 42
while(Fr_isTrue(&expaux[0])){
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[6]); // line circom 43
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((1 * Fr_toInt(&lvar[3])) + 0) + 4)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_add(&expaux[0],&lvar[3],&circuitConstants[1]); // line circom 48
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}else{
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 42
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[8]); // line circom 42
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 54
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 12)];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 54
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 54
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 40
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 63
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[5])) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + ((1 * Fr_toInt(&lvar[5])) + 0)]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 63
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 63
}
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void MerkleHash_23_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 23;
ctx->componentMemory[coffset].templateName = "MerkleHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 61;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[2]{0};
}

void MerkleHash_23_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[2];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[6]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[52]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+69;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "LinearHash_24_1138";
LinearHash_22_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 158 ;
aux_cmp_num += 3;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 3+ctx_index+1;
uint csoffset = mySignalStart+227;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Merkle_27_1231";
Merkle_16_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1625 ;
aux_cmp_num += 23;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 16. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 4],6);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 6;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
LinearHash_22_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 65];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],4);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 52];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 54],11);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 8];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 10],44);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 65],4);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Merkle_16_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + 0],4);
}
for (uint i = 0; i < 2; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void VerifyMerkleHash_24_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 24;
ctx->componentMemory[coffset].templateName = "VerifyMerkleHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 66;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
ctx->componentMemory[coffset].outputIsSet = new bool[0]();
ctx->componentMemory[coffset].mutexes = new std::mutex[0];
ctx->componentMemory[coffset].cvs = new std::condition_variable[0];
}

void VerifyMerkleHash_24_run_parallel(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[6]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[52]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+70;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "MerkleHash_40_1918";
MerkleHash_23_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1852 ;
aux_cmp_num += 27;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 33. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 54];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 50],11);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 10];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 6],44);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],6);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 6;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
MerkleHash_23_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 66];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],4);
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + 66],&signalValues[mySignalStart + 61]); // line circom 43
Fr_mul(&expaux[1],&signalValues[mySignalStart + 65],&expaux[3]); // line circom 43
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 43
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 43. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 67],&signalValues[mySignalStart + 62]); // line circom 44
Fr_mul(&expaux[1],&signalValues[mySignalStart + 65],&expaux[3]); // line circom 44
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 44
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 44. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 68],&signalValues[mySignalStart + 63]); // line circom 45
Fr_mul(&expaux[1],&signalValues[mySignalStart + 65],&expaux[3]); // line circom 45
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 45
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 45. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 69],&signalValues[mySignalStart + 64]); // line circom 46
Fr_mul(&expaux[1],&signalValues[mySignalStart + 65],&expaux[3]); // line circom 46
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 46
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 46. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 0; i++) {
ctx->componentMemory[ctx_index].mutexes[i].lock();
ctx->componentMemory[ctx_index].outputIsSet[i]=true;
ctx->componentMemory[ctx_index].mutexes[i].unlock();
ctx->componentMemory[ctx_index].cvs[i].notify_all();
}
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void LinearHash_25_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 25;
ctx->componentMemory[coffset].templateName = "LinearHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 9;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[2]{0};
}

void LinearHash_25_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[7];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[9]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+13;
uint aux_dimensions[1] = {2};
for (uint i = 0; i < 2; i++) {
std::string new_cmp_name = "hash"+ctx->generate_position_array(aux_dimensions, 1, i);
Poseidon_12_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 148 ;
aux_cmp_num += 2;
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[2]); // line circom 40
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[8]); // line circom 42
while(Fr_isTrue(&expaux[0])){
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[9]); // line circom 43
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[5])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((1 * Fr_toInt(&lvar[3])) + 0) + 4)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_add(&expaux[0],&lvar[3],&circuitConstants[1]); // line circom 48
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}else{
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 42
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[8]); // line circom 42
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 54
while(Fr_isTrue(&expaux[0])){
Fr_gt(&expaux[0],&lvar[5],&circuitConstants[0]); // line circom 55
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 12)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 0)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}else{
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 12)];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 54
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 54
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 40
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[2]); // line circom 40
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 63
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[5])) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + ((1 * Fr_toInt(&lvar[5])) + 0)]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 63
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 63
}
for (uint i = 0; i < 2; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void MerkleHash_26_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 26;
ctx->componentMemory[coffset].templateName = "MerkleHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 64;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[2]{0};
}

void MerkleHash_26_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[2];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[9]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[52]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+72;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "LinearHash_24_1138";
LinearHash_25_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 309 ;
aux_cmp_num += 5;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 5+ctx_index+1;
uint csoffset = mySignalStart+381;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Merkle_27_1231";
Merkle_16_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1625 ;
aux_cmp_num += 23;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 16. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 4],9);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 9;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
LinearHash_25_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 68];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],4);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 52];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 57],11);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 8];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 13],44);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 68],4);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Merkle_16_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + 0],4);
}
for (uint i = 0; i < 2; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void VerifyMerkleHash_27_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 27;
ctx->componentMemory[coffset].templateName = "VerifyMerkleHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 69;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
ctx->componentMemory[coffset].outputIsSet = new bool[0]();
ctx->componentMemory[coffset].mutexes = new std::mutex[0];
ctx->componentMemory[coffset].cvs = new std::condition_variable[0];
}

void VerifyMerkleHash_27_run_parallel(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[9]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[52]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+73;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "MerkleHash_40_1918";
MerkleHash_26_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 2006 ;
aux_cmp_num += 29;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 33. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 57];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 53],11);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 13];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 9],44);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],9);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 9;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
MerkleHash_26_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 69];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],4);
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + 69],&signalValues[mySignalStart + 64]); // line circom 43
Fr_mul(&expaux[1],&signalValues[mySignalStart + 68],&expaux[3]); // line circom 43
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 43
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 43. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 70],&signalValues[mySignalStart + 65]); // line circom 44
Fr_mul(&expaux[1],&signalValues[mySignalStart + 68],&expaux[3]); // line circom 44
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 44
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 44. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 71],&signalValues[mySignalStart + 66]); // line circom 45
Fr_mul(&expaux[1],&signalValues[mySignalStart + 68],&expaux[3]); // line circom 45
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 45
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 45. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 72],&signalValues[mySignalStart + 67]); // line circom 46
Fr_mul(&expaux[1],&signalValues[mySignalStart + 68],&expaux[3]); // line circom 46
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 46
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 46. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 0; i++) {
ctx->componentMemory[ctx_index].mutexes[i].lock();
ctx->componentMemory[ctx_index].outputIsSet[i]=true;
ctx->componentMemory[ctx_index].mutexes[i].unlock();
ctx->componentMemory[ctx_index].cvs[i].notify_all();
}
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void LinearHash_28_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 28;
ctx->componentMemory[coffset].templateName = "LinearHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 48;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[6]{0};
}

void LinearHash_28_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[5];
FrElement lvar[7];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+52;
uint aux_dimensions[1] = {6};
for (uint i = 0; i < 6; i++) {
std::string new_cmp_name = "hash"+ctx->generate_position_array(aux_dimensions, 1, i);
Poseidon_12_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 148 ;
aux_cmp_num += 2;
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[6]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[6]); // line circom 40
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[8]); // line circom 42
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[5])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[3])) + (1 * Fr_toInt(&lvar[4]))) + 4)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[4];
// load src
Fr_add(&expaux[0],&lvar[4],&circuitConstants[1]); // line circom 45
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_eq(&expaux[0],&lvar[4],&circuitConstants[3]); // line circom 46
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_add(&expaux[0],&lvar[3],&circuitConstants[1]); // line circom 48
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 42
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[8]); // line circom 42
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 54
while(Fr_isTrue(&expaux[0])){
Fr_gt(&expaux[0],&lvar[5],&circuitConstants[0]); // line circom 55
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[5])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 12)];
// load src
Fr_sub(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 56
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((1 * Fr_toInt(&expaux[0])) + 0)]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 0)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}else{
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[6])) + 12)];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Poseidon_12_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 54
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 54
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 40
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[6]); // line circom 40
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 63
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[5])) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[5]].signalStart + ((1 * Fr_toInt(&lvar[5])) + 0)]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 63
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 63
}
for (uint i = 0; i < 6; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void Merkle_29_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 29;
ctx->componentMemory[coffset].templateName = "Merkle";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 39;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[7]{0};
}

void Merkle_29_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[5];
FrElement lvar[3];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[7]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+43;
uint aux_dimensions[1] = {7};
for (uint i = 0; i < 7; i++) {
std::string new_cmp_name = "hash"+ctx->generate_position_array(aux_dimensions, 1, i);
CustPoseidon_15_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 142 ;
aux_cmp_num += 2;
}
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[7]); // line circom 19
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[4]); // line circom 26
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[2])) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((4 * Fr_toInt(&lvar[1])) + (1 * Fr_toInt(&lvar[2]))) + 8)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
CustPoseidon_15_run(mySubcomponents[cmp_index_ref],ctx);

}
}
Fr_gt(&expaux[0],&lvar[1],&circuitConstants[0]); // line circom 30
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * (Fr_toInt(&lvar[2]) + 4)) + 4)];
// load src
Fr_sub(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 31
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((1 * Fr_toInt(&expaux[0])) + 0)]].signalStart + ((1 * Fr_toInt(&lvar[2])) + 0)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
CustPoseidon_15_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}else{
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * (Fr_toInt(&lvar[2]) + 4)) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[2])) + 4)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
CustPoseidon_15_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_add(&expaux[0],&lvar[2],&circuitConstants[1]); // line circom 26
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[4]); // line circom 26
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[1])) + 36)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
CustPoseidon_15_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 19
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[7]); // line circom 19
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[6]].signalStart + 0],4);
}
for (uint i = 0; i < 7; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void MerkleHash_30_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 30;
ctx->componentMemory[coffset].templateName = "MerkleHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 83;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[2]{0};
}

void MerkleHash_30_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[2];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[53]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+91;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "LinearHash_24_1138";
LinearHash_28_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 940 ;
aux_cmp_num += 13;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 13+ctx_index+1;
uint csoffset = mySignalStart+1031;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Merkle_27_1231";
Merkle_29_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1037 ;
aux_cmp_num += 15;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[7]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 16. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 4],48);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
LinearHash_28_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 87];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],4);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 36];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 80],7);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 7;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 8];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 52],28);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 28;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 87],4);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Merkle_29_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + 0],4);
}
for (uint i = 0; i < 2; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void VerifyMerkleHash_31_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 31;
ctx->componentMemory[coffset].templateName = "VerifyMerkleHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 88;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
ctx->componentMemory[coffset].outputIsSet = new bool[0]();
ctx->componentMemory[coffset].mutexes = new std::mutex[0];
ctx->componentMemory[coffset].cvs = new std::condition_variable[0];
}

void VerifyMerkleHash_31_run_parallel(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[53]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+92;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "MerkleHash_40_1918";
MerkleHash_30_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 2068 ;
aux_cmp_num += 29;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[7]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 33. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 80];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 76],7);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 7;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 52];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 48],28);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 28;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],48);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
MerkleHash_30_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 88];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],4);
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + 88],&signalValues[mySignalStart + 83]); // line circom 43
Fr_mul(&expaux[1],&signalValues[mySignalStart + 87],&expaux[3]); // line circom 43
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 43
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 43. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 89],&signalValues[mySignalStart + 84]); // line circom 44
Fr_mul(&expaux[1],&signalValues[mySignalStart + 87],&expaux[3]); // line circom 44
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 44
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 44. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 90],&signalValues[mySignalStart + 85]); // line circom 45
Fr_mul(&expaux[1],&signalValues[mySignalStart + 87],&expaux[3]); // line circom 45
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 45
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 45. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 91],&signalValues[mySignalStart + 86]); // line circom 46
Fr_mul(&expaux[1],&signalValues[mySignalStart + 87],&expaux[3]); // line circom 46
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 46
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 46. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 0; i++) {
ctx->componentMemory[ctx_index].mutexes[i].lock();
ctx->componentMemory[ctx_index].outputIsSet[i]=true;
ctx->componentMemory[ctx_index].mutexes[i].unlock();
ctx->componentMemory[ctx_index].cvs[i].notify_all();
}
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void Merkle_32_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 32;
ctx->componentMemory[coffset].templateName = "Merkle";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 19;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[3]{0};
}

void Merkle_32_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[5];
FrElement lvar[3];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+23;
uint aux_dimensions[1] = {3};
for (uint i = 0; i < 3; i++) {
std::string new_cmp_name = "hash"+ctx->generate_position_array(aux_dimensions, 1, i);
CustPoseidon_15_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 142 ;
aux_cmp_num += 2;
}
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[3]); // line circom 19
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[4]); // line circom 26
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * Fr_toInt(&lvar[2])) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((4 * Fr_toInt(&lvar[1])) + (1 * Fr_toInt(&lvar[2]))) + 8)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
CustPoseidon_15_run(mySubcomponents[cmp_index_ref],ctx);

}
}
Fr_gt(&expaux[0],&lvar[1],&circuitConstants[0]); // line circom 30
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * (Fr_toInt(&lvar[2]) + 4)) + 4)];
// load src
Fr_sub(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 31
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((1 * Fr_toInt(&expaux[0])) + 0)]].signalStart + ((1 * Fr_toInt(&lvar[2])) + 0)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
CustPoseidon_15_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}else{
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((1 * (Fr_toInt(&lvar[2]) + 4)) + 4)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[2])) + 4)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
CustPoseidon_15_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_add(&expaux[0],&lvar[2],&circuitConstants[1]); // line circom 26
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[2],&circuitConstants[4]); // line circom 26
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[1])) + 20)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
CustPoseidon_15_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 19
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[3]); // line circom 19
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[2]].signalStart + 0],4);
}
for (uint i = 0; i < 3; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void MerkleHash_33_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 33;
ctx->componentMemory[coffset].templateName = "MerkleHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 63;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[2]{0};
}

void MerkleHash_33_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[2];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[8]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+71;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "LinearHash_24_1138";
LinearHash_28_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 940 ;
aux_cmp_num += 13;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 13+ctx_index+1;
uint csoffset = mySignalStart+1011;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Merkle_27_1231";
Merkle_32_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 449 ;
aux_cmp_num += 7;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 16. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 4],48);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
LinearHash_28_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 67];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],4);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 20];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 64],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 8];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 52],12);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 12;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 67],4);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Merkle_32_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + 0],4);
}
for (uint i = 0; i < 2; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void VerifyMerkleHash_34_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 34;
ctx->componentMemory[coffset].templateName = "VerifyMerkleHash";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 68;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
ctx->componentMemory[coffset].outputIsSet = new bool[0]();
ctx->componentMemory[coffset].mutexes = new std::mutex[0];
ctx->componentMemory[coffset].cvs = new std::condition_variable[0];
}

void VerifyMerkleHash_34_run_parallel(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[8]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+72;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "MerkleHash_40_1918";
MerkleHash_33_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1460 ;
aux_cmp_num += 21;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 33. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 64];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 60],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 52];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 48],12);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 12;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],48);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
MerkleHash_33_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 68];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],4);
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + 68],&signalValues[mySignalStart + 63]); // line circom 43
Fr_mul(&expaux[1],&signalValues[mySignalStart + 67],&expaux[3]); // line circom 43
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 43
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 43. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 69],&signalValues[mySignalStart + 64]); // line circom 44
Fr_mul(&expaux[1],&signalValues[mySignalStart + 67],&expaux[3]); // line circom 44
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 44
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 44. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 70],&signalValues[mySignalStart + 65]); // line circom 45
Fr_mul(&expaux[1],&signalValues[mySignalStart + 67],&expaux[3]); // line circom 45
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 45
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 45. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 71],&signalValues[mySignalStart + 66]); // line circom 46
Fr_mul(&expaux[1],&signalValues[mySignalStart + 67],&expaux[3]); // line circom 46
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 46
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 46. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 0; i++) {
ctx->componentMemory[ctx_index].mutexes[i].lock();
ctx->componentMemory[ctx_index].outputIsSet[i]=true;
ctx->componentMemory[ctx_index].mutexes[i].unlock();
ctx->componentMemory[ctx_index].cvs[i].notify_all();
}
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void MapValues0_35_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 35;
ctx->componentMemory[coffset].templateName = "MapValues0";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 48;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void MapValues0_35_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[1];
FrElement lvar[0];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 48]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 1];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 49]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 2];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 50]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 51]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 4];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 52]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 5];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 53]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 6];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 54]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 7];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 55]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 8];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 56]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 9];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 57]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 10];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 58]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 11];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 59]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 12];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 60]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 13];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 61]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 14];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 62]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 63]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 64]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 65]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 18];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 66]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 19];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 67]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 20];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 68]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 21];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 69]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 22];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 70]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 23];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 71]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 24];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 72]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 25];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 73]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 26];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 74]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 27];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 75]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 28];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 76]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 29];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 77]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 30];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 78]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 31];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 79]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 32];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 80]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 33];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 81]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 34];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 82]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 35];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 83]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 36];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 84]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 37];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 85]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 38];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 86]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 39];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 87]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 40];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 88]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 41];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 89]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 42];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 90]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 43];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 91]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 44];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 92]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 45];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 93]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 46];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 94]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 47];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 95]);
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void CalculateFRIPolValue0_36_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 36;
ctx->componentMemory[coffset].templateName = "CalculateFRIPolValue0";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 206;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[47]{0};
ctx->componentMemory[coffset].outputIsSet = new bool[3]();
ctx->componentMemory[coffset].mutexes = new std::mutex[3];
ctx->componentMemory[coffset].cvs = new std::condition_variable[3];
}

void CalculateFRIPolValue0_36_run_parallel(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[8];
FrElement lvar[2];
uint sub_component_aux;
uint index_multiple_eq;
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+619;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CInv_536_30120";
CInv_10_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 18 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 2+ctx_index+1;
uint csoffset = mySignalStart+637;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CInv_538_30325";
CInv_10_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 18 ;
aux_cmp_num += 2;
}
}
{
uint aux_create = 2;
int aux_cmp_num = 4+ctx_index+1;
uint csoffset = mySignalStart+655;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_542_30644";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 3;
int aux_cmp_num = 5+ctx_index+1;
uint csoffset = mySignalStart+664;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_545_30869";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 4;
int aux_cmp_num = 6+ctx_index+1;
uint csoffset = mySignalStart+673;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_548_31094";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 5;
int aux_cmp_num = 7+ctx_index+1;
uint csoffset = mySignalStart+682;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_551_31320";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 6;
int aux_cmp_num = 8+ctx_index+1;
uint csoffset = mySignalStart+691;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_554_31554";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 7;
int aux_cmp_num = 9+ctx_index+1;
uint csoffset = mySignalStart+700;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_557_31789";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 8;
int aux_cmp_num = 10+ctx_index+1;
uint csoffset = mySignalStart+709;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_560_32024";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 9;
int aux_cmp_num = 11+ctx_index+1;
uint csoffset = mySignalStart+718;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_563_32259";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 10;
int aux_cmp_num = 12+ctx_index+1;
uint csoffset = mySignalStart+727;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_566_32497";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 11;
int aux_cmp_num = 13+ctx_index+1;
uint csoffset = mySignalStart+736;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_569_32743";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 12;
int aux_cmp_num = 14+ctx_index+1;
uint csoffset = mySignalStart+745;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_572_32989";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 13;
int aux_cmp_num = 15+ctx_index+1;
uint csoffset = mySignalStart+754;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_575_33235";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 14;
int aux_cmp_num = 16+ctx_index+1;
uint csoffset = mySignalStart+763;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_578_33481";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 15;
int aux_cmp_num = 17+ctx_index+1;
uint csoffset = mySignalStart+772;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_581_33727";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 16;
int aux_cmp_num = 18+ctx_index+1;
uint csoffset = mySignalStart+781;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_584_33973";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 17;
int aux_cmp_num = 19+ctx_index+1;
uint csoffset = mySignalStart+790;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_587_34219";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 18;
int aux_cmp_num = 20+ctx_index+1;
uint csoffset = mySignalStart+799;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_590_34465";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 19;
int aux_cmp_num = 21+ctx_index+1;
uint csoffset = mySignalStart+808;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_593_34712";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 20;
int aux_cmp_num = 22+ctx_index+1;
uint csoffset = mySignalStart+817;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_596_34959";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 21;
int aux_cmp_num = 23+ctx_index+1;
uint csoffset = mySignalStart+826;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_599_35206";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 22;
int aux_cmp_num = 24+ctx_index+1;
uint csoffset = mySignalStart+835;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_602_35453";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 23;
int aux_cmp_num = 25+ctx_index+1;
uint csoffset = mySignalStart+844;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_605_35746";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 24;
int aux_cmp_num = 26+ctx_index+1;
uint csoffset = mySignalStart+853;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_608_36039";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 25;
int aux_cmp_num = 27+ctx_index+1;
uint csoffset = mySignalStart+862;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_611_36332";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 26;
int aux_cmp_num = 28+ctx_index+1;
uint csoffset = mySignalStart+871;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_614_36625";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 27;
int aux_cmp_num = 29+ctx_index+1;
uint csoffset = mySignalStart+880;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_617_36918";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 28;
int aux_cmp_num = 30+ctx_index+1;
uint csoffset = mySignalStart+889;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_620_37211";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 29;
int aux_cmp_num = 31+ctx_index+1;
uint csoffset = mySignalStart+898;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_623_37504";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 30;
int aux_cmp_num = 32+ctx_index+1;
uint csoffset = mySignalStart+907;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_626_37797";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 31;
int aux_cmp_num = 33+ctx_index+1;
uint csoffset = mySignalStart+916;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_629_38090";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 32;
int aux_cmp_num = 34+ctx_index+1;
uint csoffset = mySignalStart+925;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_632_38383";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 33;
int aux_cmp_num = 35+ctx_index+1;
uint csoffset = mySignalStart+934;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_635_38676";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 34;
int aux_cmp_num = 36+ctx_index+1;
uint csoffset = mySignalStart+943;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_636_38732";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 35;
int aux_cmp_num = 37+ctx_index+1;
uint csoffset = mySignalStart+952;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_638_38871";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 36;
int aux_cmp_num = 38+ctx_index+1;
uint csoffset = mySignalStart+961;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_641_39107";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 37;
int aux_cmp_num = 39+ctx_index+1;
uint csoffset = mySignalStart+970;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_644_39354";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 38;
int aux_cmp_num = 40+ctx_index+1;
uint csoffset = mySignalStart+979;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_647_39610";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 39;
int aux_cmp_num = 41+ctx_index+1;
uint csoffset = mySignalStart+988;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_650_39866";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 40;
int aux_cmp_num = 42+ctx_index+1;
uint csoffset = mySignalStart+997;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_653_40123";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 41;
int aux_cmp_num = 43+ctx_index+1;
uint csoffset = mySignalStart+1006;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_656_40380";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 42;
int aux_cmp_num = 44+ctx_index+1;
uint csoffset = mySignalStart+1015;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_659_40683";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 43;
int aux_cmp_num = 45+ctx_index+1;
uint csoffset = mySignalStart+1024;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_662_40986";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 44;
int aux_cmp_num = 46+ctx_index+1;
uint csoffset = mySignalStart+1033;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_665_41289";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 45;
int aux_cmp_num = 47+ctx_index+1;
uint csoffset = mySignalStart+1042;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "CMul_668_41592";
CMul_9_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 9 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 46;
int aux_cmp_num = 48+ctx_index+1;
uint csoffset = mySignalStart+1051;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "mapValues";
MapValues0_35_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 96 ;
aux_cmp_num += 1;
}
}
{
uint cmp_index_ref = 46;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 48];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 152],15);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 15;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 46;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 63];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 167],12);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 12;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 46;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 75];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 179],15);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 15;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 46;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 90];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 194],6);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 6;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
MapValues0_35_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 209];
// load src
Fr_mul(&expaux[1],&signalValues[mySignalStart + 3],&circuitConstants[54]); // line circom 529
Fr_add(&expaux[0],&expaux[1],&circuitConstants[7]); // line circom 529
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[11]); // line circom 530
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[34];
// copying argument 0
Fr_sub(&expaux[1],&circuitConstants[11],&lvar[0]); // line circom 531
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
roots_4(ctx,lvarcall,myId,&lvar[1],1);
// end call bucket
}

{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[0])) + 209)];
// load src
Fr_sub(&expaux[1],&lvar[0],&circuitConstants[1]); // line circom 531
Fr_sub(&expaux[5],&lvar[1],&circuitConstants[1]); // line circom 531
Fr_mul(&expaux[3],&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[0])) + 3)],&expaux[5]); // line circom 531
Fr_add(&expaux[2],&expaux[3],&circuitConstants[1]); // line circom 531
Fr_mul(&expaux[0],&signalValues[mySignalStart + ((1 * Fr_toInt(&expaux[1])) + 209)],&expaux[2]); // line circom 531
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 530
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[11]); // line circom 530
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
Fr_mul(&expaux[2],&circuitConstants[1],&signalValues[mySignalStart + 14]); // line circom 536
Fr_sub(&expaux[0],&signalValues[mySignalStart + 219],&expaux[2]); // line circom 536
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
Fr_mul(&expaux[0],&circuitConstants[21],&signalValues[mySignalStart + 15]); // line circom 536
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 5];
// load src
Fr_mul(&expaux[0],&circuitConstants[21],&signalValues[mySignalStart + 16]); // line circom 536
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CInv_10_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 226];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 220];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 219],&signalValues[mySignalStart + 226]); // line circom 537
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 221];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 219],&signalValues[mySignalStart + 227]); // line circom 537
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 222];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 219],&signalValues[mySignalStart + 228]); // line circom 537
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
Fr_mul(&expaux[2],&circuitConstants[55],&signalValues[mySignalStart + 14]); // line circom 538
Fr_sub(&expaux[0],&signalValues[mySignalStart + 219],&expaux[2]); // line circom 538
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 4];
// load src
Fr_mul(&expaux[0],&circuitConstants[56],&signalValues[mySignalStart + 15]); // line circom 538
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 5];
// load src
Fr_mul(&expaux[0],&circuitConstants[56],&signalValues[mySignalStart + 16]); // line circom 538
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CInv_10_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 229];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 223];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 219],&signalValues[mySignalStart + 229]); // line circom 539
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 224];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 219],&signalValues[mySignalStart + 230]); // line circom 539
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 225];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 219],&signalValues[mySignalStart + 231]); // line circom 539
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 232];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 200],&signalValues[mySignalStart + 23]); // line circom 541
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 233];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 24]); // line circom 541
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 234];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 25]); // line circom 541
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 232],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 235];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[2]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 238];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 201],&signalValues[mySignalStart + 26]); // line circom 543
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 239];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 27]); // line circom 543
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 240];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 28]); // line circom 543
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 241];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 235],&signalValues[mySignalStart + 238]); // line circom 544
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 242];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 236],&signalValues[mySignalStart + 239]); // line circom 544
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 243];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 237],&signalValues[mySignalStart + 240]); // line circom 544
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 241],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 244];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[3]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 247];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 202],&signalValues[mySignalStart + 29]); // line circom 546
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 248];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 30]); // line circom 546
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 249];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 31]); // line circom 546
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 250];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 244],&signalValues[mySignalStart + 247]); // line circom 547
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 251];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 245],&signalValues[mySignalStart + 248]); // line circom 547
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 252];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 246],&signalValues[mySignalStart + 249]); // line circom 547
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 250],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 253];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[4]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 256];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 203],&signalValues[mySignalStart + 32]); // line circom 549
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 257];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 33]); // line circom 549
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 258];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 34]); // line circom 549
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 259];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 253],&signalValues[mySignalStart + 256]); // line circom 550
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 260];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 254],&signalValues[mySignalStart + 257]); // line circom 550
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 261];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 255],&signalValues[mySignalStart + 258]); // line circom 550
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 259],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 262];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[5]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 265];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 204],&signalValues[mySignalStart + 35]); // line circom 552
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 266];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 36]); // line circom 552
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 267];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 37]); // line circom 552
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 268];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 262],&signalValues[mySignalStart + 265]); // line circom 553
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 269];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 263],&signalValues[mySignalStart + 266]); // line circom 553
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 270];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 264],&signalValues[mySignalStart + 267]); // line circom 553
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 268],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 6;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 271];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[6]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 274];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 205],&signalValues[mySignalStart + 38]); // line circom 555
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 275];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 39]); // line circom 555
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 276];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 40]); // line circom 555
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 277];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 271],&signalValues[mySignalStart + 274]); // line circom 556
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 278];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 272],&signalValues[mySignalStart + 275]); // line circom 556
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 279];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 273],&signalValues[mySignalStart + 276]); // line circom 556
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 277],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 7;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 280];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[7]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 283];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 206],&signalValues[mySignalStart + 41]); // line circom 558
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 284];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 42]); // line circom 558
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 285];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 43]); // line circom 558
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 286];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 280],&signalValues[mySignalStart + 283]); // line circom 559
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 287];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 281],&signalValues[mySignalStart + 284]); // line circom 559
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 288];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 282],&signalValues[mySignalStart + 285]); // line circom 559
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 286],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 8;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 289];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[8]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 292];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 207],&signalValues[mySignalStart + 47]); // line circom 561
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 293];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 48]); // line circom 561
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 294];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 49]); // line circom 561
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 295];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 289],&signalValues[mySignalStart + 292]); // line circom 562
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 296];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 290],&signalValues[mySignalStart + 293]); // line circom 562
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 297];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 291],&signalValues[mySignalStart + 294]); // line circom 562
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 295],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 298];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[9]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 301];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 208],&signalValues[mySignalStart + 53]); // line circom 564
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 302];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 54]); // line circom 564
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 303];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 55]); // line circom 564
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 304];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 298],&signalValues[mySignalStart + 301]); // line circom 565
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 305];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 299],&signalValues[mySignalStart + 302]); // line circom 565
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 306];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 300],&signalValues[mySignalStart + 303]); // line circom 565
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 304],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 10;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 307];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[10]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 310];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 0],&signalValues[mySignalStart + 59]); // line circom 567
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 311];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 60]); // line circom 567
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 312];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 61]); // line circom 567
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 313];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 307],&signalValues[mySignalStart + 310]); // line circom 568
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 314];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 308],&signalValues[mySignalStart + 311]); // line circom 568
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 315];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 309],&signalValues[mySignalStart + 312]); // line circom 568
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 313],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 11;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 316];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[11]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 319];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 1],&signalValues[mySignalStart + 65]); // line circom 570
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 320];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 66]); // line circom 570
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 321];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 67]); // line circom 570
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 322];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 316],&signalValues[mySignalStart + 319]); // line circom 571
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 323];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 317],&signalValues[mySignalStart + 320]); // line circom 571
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 324];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 318],&signalValues[mySignalStart + 321]); // line circom 571
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 322],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 12;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 325];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[12]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 328];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 2],&signalValues[mySignalStart + 71]); // line circom 573
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 329];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 72]); // line circom 573
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 330];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 73]); // line circom 573
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 331];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 325],&signalValues[mySignalStart + 328]); // line circom 574
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 332];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 326],&signalValues[mySignalStart + 329]); // line circom 574
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 333];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 327],&signalValues[mySignalStart + 330]); // line circom 574
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 331],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 13;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 334];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[13]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 337];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 3],&signalValues[mySignalStart + 74]); // line circom 576
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 338];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 75]); // line circom 576
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 339];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 76]); // line circom 576
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 340];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 334],&signalValues[mySignalStart + 337]); // line circom 577
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 341];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 335],&signalValues[mySignalStart + 338]); // line circom 577
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 342];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 336],&signalValues[mySignalStart + 339]); // line circom 577
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 340],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 14;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 343];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[14]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 346];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 4],&signalValues[mySignalStart + 77]); // line circom 579
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 347];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 78]); // line circom 579
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 348];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 79]); // line circom 579
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 349];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 343],&signalValues[mySignalStart + 346]); // line circom 580
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 350];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 344],&signalValues[mySignalStart + 347]); // line circom 580
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 351];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 345],&signalValues[mySignalStart + 348]); // line circom 580
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 349],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 15;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 352];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[15]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 355];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 7],&signalValues[mySignalStart + 80]); // line circom 582
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 356];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 81]); // line circom 582
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 357];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 82]); // line circom 582
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 358];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 352],&signalValues[mySignalStart + 355]); // line circom 583
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 359];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 353],&signalValues[mySignalStart + 356]); // line circom 583
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 360];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 354],&signalValues[mySignalStart + 357]); // line circom 583
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 358],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 16;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 361];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[16]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 364];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 8],&signalValues[mySignalStart + 83]); // line circom 585
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 365];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 84]); // line circom 585
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 366];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 85]); // line circom 585
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 367];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 361],&signalValues[mySignalStart + 364]); // line circom 586
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 368];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 362],&signalValues[mySignalStart + 365]); // line circom 586
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 369];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 363],&signalValues[mySignalStart + 366]); // line circom 586
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 367],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 17;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 370];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[17]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 373];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 9],&signalValues[mySignalStart + 86]); // line circom 588
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 374];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 87]); // line circom 588
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 375];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 88]); // line circom 588
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 376];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 370],&signalValues[mySignalStart + 373]); // line circom 589
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 377];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 371],&signalValues[mySignalStart + 374]); // line circom 589
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 378];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 372],&signalValues[mySignalStart + 375]); // line circom 589
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 376],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 18;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 379];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[18]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 382];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 10],&signalValues[mySignalStart + 89]); // line circom 591
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 383];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 90]); // line circom 591
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 384];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 91]); // line circom 591
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 385];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 379],&signalValues[mySignalStart + 382]); // line circom 592
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 386];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 380],&signalValues[mySignalStart + 383]); // line circom 592
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 387];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 381],&signalValues[mySignalStart + 384]); // line circom 592
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 385],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 19;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 388];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[19]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 391];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 11],&signalValues[mySignalStart + 92]); // line circom 594
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 392];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 93]); // line circom 594
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 393];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 94]); // line circom 594
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 394];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 388],&signalValues[mySignalStart + 391]); // line circom 595
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 395];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 389],&signalValues[mySignalStart + 392]); // line circom 595
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 396];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 390],&signalValues[mySignalStart + 393]); // line circom 595
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 394],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 20;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 397];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[20]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 400];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 12],&signalValues[mySignalStart + 95]); // line circom 597
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 401];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 96]); // line circom 597
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 402];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 97]); // line circom 597
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 403];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 397],&signalValues[mySignalStart + 400]); // line circom 598
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 404];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 398],&signalValues[mySignalStart + 401]); // line circom 598
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 405];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 399],&signalValues[mySignalStart + 402]); // line circom 598
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 403],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 21;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 406];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[21]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 409];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 14],&signalValues[mySignalStart + 101]); // line circom 600
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 410];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 102]); // line circom 600
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 411];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 103]); // line circom 600
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 412];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 406],&signalValues[mySignalStart + 409]); // line circom 601
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 413];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 407],&signalValues[mySignalStart + 410]); // line circom 601
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 414];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 408],&signalValues[mySignalStart + 411]); // line circom 601
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 412],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 22;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 415];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[22]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 418];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 15],&signalValues[mySignalStart + 107]); // line circom 603
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 419];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 16],&signalValues[mySignalStart + 108]); // line circom 603
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 420];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 17],&signalValues[mySignalStart + 109]); // line circom 603
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 421];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 415],&signalValues[mySignalStart + 418]); // line circom 604
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 422];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 416],&signalValues[mySignalStart + 419]); // line circom 604
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 423];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 417],&signalValues[mySignalStart + 420]); // line circom 604
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 421],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 23;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 424];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[23]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 427];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 18],&signalValues[mySignalStart + 113]); // line circom 606
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 428];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 19],&signalValues[mySignalStart + 114]); // line circom 606
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 429];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 20],&signalValues[mySignalStart + 115]); // line circom 606
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 430];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 424],&signalValues[mySignalStart + 427]); // line circom 607
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 431];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 425],&signalValues[mySignalStart + 428]); // line circom 607
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 432];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 426],&signalValues[mySignalStart + 429]); // line circom 607
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 430],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 24;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 433];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[24]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 436];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 27],&signalValues[mySignalStart + 116]); // line circom 609
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 437];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 28],&signalValues[mySignalStart + 117]); // line circom 609
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 438];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 29],&signalValues[mySignalStart + 118]); // line circom 609
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 439];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 433],&signalValues[mySignalStart + 436]); // line circom 610
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 440];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 434],&signalValues[mySignalStart + 437]); // line circom 610
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 441];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 435],&signalValues[mySignalStart + 438]); // line circom 610
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 439],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 25;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 442];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[25]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 445];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 21],&signalValues[mySignalStart + 122]); // line circom 612
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 446];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 22],&signalValues[mySignalStart + 123]); // line circom 612
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 447];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 23],&signalValues[mySignalStart + 124]); // line circom 612
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 448];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 442],&signalValues[mySignalStart + 445]); // line circom 613
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 449];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 443],&signalValues[mySignalStart + 446]); // line circom 613
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 450];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 444],&signalValues[mySignalStart + 447]); // line circom 613
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 448],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 26;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 451];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[26]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 454];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 24],&signalValues[mySignalStart + 128]); // line circom 615
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 455];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 25],&signalValues[mySignalStart + 129]); // line circom 615
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 456];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 26],&signalValues[mySignalStart + 130]); // line circom 615
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 457];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 451],&signalValues[mySignalStart + 454]); // line circom 616
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 458];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 452],&signalValues[mySignalStart + 455]); // line circom 616
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 459];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 453],&signalValues[mySignalStart + 456]); // line circom 616
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 27;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 457],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 27;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 460];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[27]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 463];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 30],&signalValues[mySignalStart + 134]); // line circom 618
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 464];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 31],&signalValues[mySignalStart + 135]); // line circom 618
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 465];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 32],&signalValues[mySignalStart + 136]); // line circom 618
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 466];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 460],&signalValues[mySignalStart + 463]); // line circom 619
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 467];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 461],&signalValues[mySignalStart + 464]); // line circom 619
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 468];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 462],&signalValues[mySignalStart + 465]); // line circom 619
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 28;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 466],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 28;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 469];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[28]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 472];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 33],&signalValues[mySignalStart + 137]); // line circom 621
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 473];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 34],&signalValues[mySignalStart + 138]); // line circom 621
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 474];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 35],&signalValues[mySignalStart + 139]); // line circom 621
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 475];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 469],&signalValues[mySignalStart + 472]); // line circom 622
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 476];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 470],&signalValues[mySignalStart + 473]); // line circom 622
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 477];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 471],&signalValues[mySignalStart + 474]); // line circom 622
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 29;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 475],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 29;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 478];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[29]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 481];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 36],&signalValues[mySignalStart + 140]); // line circom 624
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 482];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 37],&signalValues[mySignalStart + 141]); // line circom 624
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 483];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 38],&signalValues[mySignalStart + 142]); // line circom 624
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 484];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 478],&signalValues[mySignalStart + 481]); // line circom 625
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 485];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 479],&signalValues[mySignalStart + 482]); // line circom 625
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 486];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 480],&signalValues[mySignalStart + 483]); // line circom 625
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 30;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 484],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 30;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 487];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[30]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 490];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 39],&signalValues[mySignalStart + 143]); // line circom 627
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 491];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 40],&signalValues[mySignalStart + 144]); // line circom 627
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 492];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 41],&signalValues[mySignalStart + 145]); // line circom 627
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 493];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 487],&signalValues[mySignalStart + 490]); // line circom 628
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 494];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 488],&signalValues[mySignalStart + 491]); // line circom 628
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 495];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 489],&signalValues[mySignalStart + 492]); // line circom 628
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 31;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 493],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 31;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 496];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[31]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 499];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 42],&signalValues[mySignalStart + 146]); // line circom 630
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 500];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 43],&signalValues[mySignalStart + 147]); // line circom 630
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 501];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 44],&signalValues[mySignalStart + 148]); // line circom 630
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 502];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 496],&signalValues[mySignalStart + 499]); // line circom 631
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 503];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 497],&signalValues[mySignalStart + 500]); // line circom 631
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 504];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 498],&signalValues[mySignalStart + 501]); // line circom 631
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 32;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 502],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 32;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 505];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[32]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 508];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 45],&signalValues[mySignalStart + 149]); // line circom 633
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 509];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 46],&signalValues[mySignalStart + 150]); // line circom 633
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 510];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 47],&signalValues[mySignalStart + 151]); // line circom 633
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 511];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 505],&signalValues[mySignalStart + 508]); // line circom 634
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 512];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 506],&signalValues[mySignalStart + 509]); // line circom 634
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 513];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 507],&signalValues[mySignalStart + 510]); // line circom 634
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 33;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 511],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 33;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 220],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 514];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[33]].signalStart + 0],3);
}
{
uint cmp_index_ref = 34;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 17],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 34;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 514],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 517];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[34]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 520];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 206],&signalValues[mySignalStart + 44]); // line circom 637
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 521];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 45]); // line circom 637
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 522];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 46]); // line circom 637
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 35;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 520],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 35;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 523];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[35]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 526];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 207],&signalValues[mySignalStart + 50]); // line circom 639
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 527];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 51]); // line circom 639
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 528];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 52]); // line circom 639
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 529];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 523],&signalValues[mySignalStart + 526]); // line circom 640
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 530];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 524],&signalValues[mySignalStart + 527]); // line circom 640
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 531];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 525],&signalValues[mySignalStart + 528]); // line circom 640
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 36;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 529],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 36;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 532];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[36]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 535];
// load src
Fr_sub(&expaux[0],&signalValues[mySignalStart + 208],&signalValues[mySignalStart + 56]); // line circom 642
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 536];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 57]); // line circom 642
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 537];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 58]); // line circom 642
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 538];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 532],&signalValues[mySignalStart + 535]); // line circom 643
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 539];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 533],&signalValues[mySignalStart + 536]); // line circom 643
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 540];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 534],&signalValues[mySignalStart + 537]); // line circom 643
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 37;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 538],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 37;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 541];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[37]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 544];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 0],&signalValues[mySignalStart + 62]); // line circom 645
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 545];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 63]); // line circom 645
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 546];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 64]); // line circom 645
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 547];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 541],&signalValues[mySignalStart + 544]); // line circom 646
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 548];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 542],&signalValues[mySignalStart + 545]); // line circom 646
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 549];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 543],&signalValues[mySignalStart + 546]); // line circom 646
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 38;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 547],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 38;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 550];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[38]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 553];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 1],&signalValues[mySignalStart + 68]); // line circom 648
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 554];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 69]); // line circom 648
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 555];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 70]); // line circom 648
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 556];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 550],&signalValues[mySignalStart + 553]); // line circom 649
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 557];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 551],&signalValues[mySignalStart + 554]); // line circom 649
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 558];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 552],&signalValues[mySignalStart + 555]); // line circom 649
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 39;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 556],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 39;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 559];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[39]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 562];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 13],&signalValues[mySignalStart + 98]); // line circom 651
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 563];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 99]); // line circom 651
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 564];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 100]); // line circom 651
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 565];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 559],&signalValues[mySignalStart + 562]); // line circom 652
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 566];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 560],&signalValues[mySignalStart + 563]); // line circom 652
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 567];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 561],&signalValues[mySignalStart + 564]); // line circom 652
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 40;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 565],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 40;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 568];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[40]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 571];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 14],&signalValues[mySignalStart + 104]); // line circom 654
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 572];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 105]); // line circom 654
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 573];
// load src
Fr_neg(&expaux[0],&signalValues[mySignalStart + 106]); // line circom 654
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 574];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 568],&signalValues[mySignalStart + 571]); // line circom 655
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 575];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 569],&signalValues[mySignalStart + 572]); // line circom 655
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 576];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 570],&signalValues[mySignalStart + 573]); // line circom 655
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 41;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 574],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 41;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 577];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[41]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 580];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 15],&signalValues[mySignalStart + 110]); // line circom 657
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 581];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 16],&signalValues[mySignalStart + 111]); // line circom 657
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 582];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 17],&signalValues[mySignalStart + 112]); // line circom 657
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 583];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 577],&signalValues[mySignalStart + 580]); // line circom 658
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 584];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 578],&signalValues[mySignalStart + 581]); // line circom 658
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 585];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 579],&signalValues[mySignalStart + 582]); // line circom 658
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 42;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 583],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 42;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 586];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[42]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 589];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 27],&signalValues[mySignalStart + 119]); // line circom 660
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 590];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 28],&signalValues[mySignalStart + 120]); // line circom 660
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 591];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 29],&signalValues[mySignalStart + 121]); // line circom 660
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 592];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 586],&signalValues[mySignalStart + 589]); // line circom 661
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 593];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 587],&signalValues[mySignalStart + 590]); // line circom 661
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 594];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 588],&signalValues[mySignalStart + 591]); // line circom 661
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 43;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 592],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 43;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 595];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[43]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 598];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 21],&signalValues[mySignalStart + 125]); // line circom 663
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 599];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 22],&signalValues[mySignalStart + 126]); // line circom 663
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 600];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 23],&signalValues[mySignalStart + 127]); // line circom 663
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 601];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 595],&signalValues[mySignalStart + 598]); // line circom 664
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 602];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 596],&signalValues[mySignalStart + 599]); // line circom 664
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 603];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 597],&signalValues[mySignalStart + 600]); // line circom 664
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 44;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 601],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 44;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 20],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 604];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[44]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 607];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 24],&signalValues[mySignalStart + 131]); // line circom 666
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 608];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 25],&signalValues[mySignalStart + 132]); // line circom 666
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 609];
// load src
Fr_sub(&expaux[0],&ctx->signalValues[ctx->componentMemory[mySubcomponents[46]].signalStart + 26],&signalValues[mySignalStart + 133]); // line circom 666
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 610];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 604],&signalValues[mySignalStart + 607]); // line circom 667
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 611];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 605],&signalValues[mySignalStart + 608]); // line circom 667
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 612];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 606],&signalValues[mySignalStart + 609]); // line circom 667
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 45;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 610],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 45;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 223],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
CMul_9_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 613];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[45]].signalStart + 0],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 616];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 517],&signalValues[mySignalStart + 613]); // line circom 669
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 617];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 518],&signalValues[mySignalStart + 614]); // line circom 669
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 618];
// load src
Fr_add(&expaux[0],&signalValues[mySignalStart + 519],&signalValues[mySignalStart + 615]); // line circom 669
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint aux_dest_index = 0;
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 616]);
ctx->componentMemory[ctx_index].mutexes[aux_dest_index].lock();
ctx->componentMemory[ctx_index].outputIsSet[aux_dest_index]=true;
ctx->componentMemory[ctx_index].mutexes[aux_dest_index].unlock();
ctx->componentMemory[ctx_index].cvs[aux_dest_index].notify_all();
}
}
{
uint aux_dest_index = 1;
{
PFrElement aux_dest = &signalValues[mySignalStart + 1];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 617]);
ctx->componentMemory[ctx_index].mutexes[aux_dest_index].lock();
ctx->componentMemory[ctx_index].outputIsSet[aux_dest_index]=true;
ctx->componentMemory[ctx_index].mutexes[aux_dest_index].unlock();
ctx->componentMemory[ctx_index].cvs[aux_dest_index].notify_all();
}
}
{
uint aux_dest_index = 2;
{
PFrElement aux_dest = &signalValues[mySignalStart + 2];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 618]);
ctx->componentMemory[ctx_index].mutexes[aux_dest_index].lock();
ctx->componentMemory[ctx_index].outputIsSet[aux_dest_index]=true;
ctx->componentMemory[ctx_index].mutexes[aux_dest_index].unlock();
ctx->componentMemory[ctx_index].cvs[aux_dest_index].notify_all();
}
}
for (uint i = 0; i < 3; i++) {
ctx->componentMemory[ctx_index].mutexes[i].lock();
ctx->componentMemory[ctx_index].outputIsSet[i]=true;
ctx->componentMemory[ctx_index].mutexes[i].unlock();
ctx->componentMemory[ctx_index].cvs[i].notify_all();
}
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
for (uint i = 0; i < 47; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void TreeSelector4_37_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 37;
ctx->componentMemory[coffset].templateName = "TreeSelector4";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 14;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void TreeSelector4_37_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[3];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + 15],&circuitConstants[1]); // line circom 14
Fr_mul(&expaux[1],&signalValues[mySignalStart + 15],&expaux[3]); // line circom 14
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 14
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 14. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 16],&circuitConstants[1]); // line circom 15
Fr_mul(&expaux[1],&signalValues[mySignalStart + 16],&expaux[3]); // line circom 15
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 15
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 15. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_eq(&expaux[1],&signalValues[mySignalStart + 15],&circuitConstants[0]); // line circom 17
Fr_eq(&expaux[2],&signalValues[mySignalStart + 16],&circuitConstants[0]); // line circom 17
Fr_land(&expaux[0],&expaux[1],&expaux[2]); // line circom 17
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3],3);
}
}else{
Fr_eq(&expaux[1],&signalValues[mySignalStart + 15],&circuitConstants[1]); // line circom 19
Fr_eq(&expaux[2],&signalValues[mySignalStart + 16],&circuitConstants[0]); // line circom 19
Fr_land(&expaux[0],&expaux[1],&expaux[2]); // line circom 19
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 6],3);
}
}else{
Fr_eq(&expaux[1],&signalValues[mySignalStart + 15],&circuitConstants[0]); // line circom 21
Fr_eq(&expaux[2],&signalValues[mySignalStart + 16],&circuitConstants[1]); // line circom 21
Fr_land(&expaux[0],&expaux[1],&expaux[2]); // line circom 21
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 9],3);
}
}else{
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 12],3);
}
}
}
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[0],3);
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void TreeSelector_38_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 38;
ctx->componentMemory[coffset].templateName = "TreeSelector";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 52;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[5]{0};
}

void TreeSelector_38_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[12];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+55;
uint aux_dimensions[1] = {5};
for (uint i = 0; i < 5; i++) {
std::string new_cmp_name = "im"+ctx->generate_position_array(aux_dimensions, 1, i);
TreeSelector4_37_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 17 ;
aux_cmp_num += 1;
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[2]); // line circom 45
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[4];
// load src
Fr_idiv(&expaux[0],&lvar[4],&circuitConstants[4]); // line circom 46
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_add(&expaux[0],&lvar[3],&lvar[4]); // line circom 47
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 45
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[2]); // line circom 45
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[8],&circuitConstants[2]); // line circom 56
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[9];
// load src
Fr_idiv(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 57
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[10],&lvar[9]); // line circom 58
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[4]); // line circom 60
while(Fr_isTrue(&expaux[0])){
Fr_eq(&expaux[0],&lvar[8],&circuitConstants[0]); // line circom 61
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * (0 + Fr_toInt(&lvar[10]))) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((3 * Fr_toInt(&lvar[11])) + 3)];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((3 * ((4 * Fr_toInt(&lvar[10])) + Fr_toInt(&lvar[11]))) + 3)],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
TreeSelector4_37_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}else{
{
uint cmp_index_ref = 4;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((3 * Fr_toInt(&lvar[11])) + 3)];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((1 * (0 + Fr_toInt(&lvar[11]))) + 0)]].signalStart + 0],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
TreeSelector4_37_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[11];
// load src
Fr_add(&expaux[0],&lvar[11],&circuitConstants[1]); // line circom 60
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[4]); // line circom 60
}
{
uint cmp_index_ref = ((1 * (Fr_toInt(&lvar[6]) + Fr_toInt(&lvar[10]))) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * (2 * Fr_toInt(&lvar[8]))) + 51)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
TreeSelector4_37_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
uint cmp_index_ref = ((1 * (Fr_toInt(&lvar[6]) + Fr_toInt(&lvar[10]))) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * ((2 * Fr_toInt(&lvar[8])) + 1)) + 51)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
TreeSelector4_37_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_add(&expaux[0],&lvar[10],&circuitConstants[1]); // line circom 58
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[10],&lvar[9]); // line circom 58
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&lvar[6]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&lvar[9]); // line circom 71
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_idiv(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 72
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
Fr_add(&expaux[0],&lvar[8],&circuitConstants[1]); // line circom 56
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[8],&circuitConstants[2]); // line circom 56
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[4]].signalStart + 0],3);
}
for (uint i = 0; i < 5; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void VerifyQuery0_39_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 39;
ctx->componentMemory[coffset].templateName = "VerifyQuery0";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 63;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
ctx->componentMemory[coffset].outputIsSet = new bool[0]();
ctx->componentMemory[coffset].mutexes = new std::mutex[0];
ctx->componentMemory[coffset].cvs = new std::condition_variable[0];
}

void VerifyQuery0_39_run_parallel(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[7]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+70;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "TreeSelector_696_42522";
TreeSelector_38_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 140 ;
aux_cmp_num += 6;
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[4]); // line circom 688
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[3])) + 63)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * (Fr_toInt(&lvar[3]) + 7)) + 0)]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_add(&expaux[0],&lvar[3],&circuitConstants[1]); // line circom 688
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[4]); // line circom 688
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[7]); // line circom 692
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_add(&expaux[0],&lvar[3],&circuitConstants[1]); // line circom 692
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[7]); // line circom 692
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 51];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 63],4);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 14],48);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
TreeSelector_38_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 67];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],3);
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + 67],&signalValues[mySignalStart + 11]); // line circom 698
Fr_mul(&expaux[1],&signalValues[mySignalStart + 62],&expaux[3]); // line circom 698
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 698
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 698. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 68],&signalValues[mySignalStart + 12]); // line circom 699
Fr_mul(&expaux[1],&signalValues[mySignalStart + 62],&expaux[3]); // line circom 699
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 699
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 699. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 69],&signalValues[mySignalStart + 13]); // line circom 700
Fr_mul(&expaux[1],&signalValues[mySignalStart + 62],&expaux[3]); // line circom 700
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 700
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 700. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 0; i++) {
ctx->componentMemory[ctx_index].mutexes[i].lock();
ctx->componentMemory[ctx_index].outputIsSet[i]=true;
ctx->componentMemory[ctx_index].mutexes[i].unlock();
ctx->componentMemory[ctx_index].cvs[i].notify_all();
}
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void BitReverse_40_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 40;
ctx->componentMemory[coffset].templateName = "BitReverse";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 48;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void BitReverse_40_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[7];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[8]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[30]); // line circom 105
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[20];
// copying argument 0
Fr_copy(&lvarcall[0],&lvar[5]);
// end copying argument 0
// copying argument 1
Fr_copy(&lvarcall[1],&circuitConstants[4]);
// end copying argument 1
rev_5(ctx,lvarcall,myId,&lvar[4],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[3]); // line circom 107
while(Fr_isTrue(&expaux[0])){
Fr_gt(&expaux[0],&lvar[5],&lvar[4]); // line circom 108
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[5])) + (1 * Fr_toInt(&lvar[6]))) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[4])) + (1 * Fr_toInt(&lvar[6]))) + 48)]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[4])) + (1 * Fr_toInt(&lvar[6]))) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[5])) + (1 * Fr_toInt(&lvar[6]))) + 48)]);
}
}else{
Fr_eq(&expaux[0],&lvar[5],&lvar[4]); // line circom 111
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[5])) + (1 * Fr_toInt(&lvar[6]))) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[5])) + (1 * Fr_toInt(&lvar[6]))) + 48)]);
}
}
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 107
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[3]); // line circom 107
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 105
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[30]); // line circom 105
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void FFT4_41_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 41;
ctx->componentMemory[coffset].templateName = "FFT4";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 12;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void FFT4_41_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[10];
FrElement lvar[15];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[58]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[58]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[58]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[58]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[58]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[59]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[59]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[58],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_mul(&expaux[6],&circuitConstants[58],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 150
Fr_mul(&expaux[5],&circuitConstants[58],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 150
Fr_mul(&expaux[4],&circuitConstants[58],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 150
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 150
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 150
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[58],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_mul(&expaux[6],&circuitConstants[58],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 151
Fr_mul(&expaux[5],&circuitConstants[59],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 151
Fr_mul(&expaux[4],&circuitConstants[59],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 151
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 151
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 151
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[58],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_mul(&expaux[6],&circuitConstants[58],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 152
Fr_mul(&expaux[5],&circuitConstants[58],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 152
Fr_mul(&expaux[4],&circuitConstants[58],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 152
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 152
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 152
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[58],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_mul(&expaux[6],&circuitConstants[58],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 153
Fr_mul(&expaux[5],&circuitConstants[59],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 153
Fr_mul(&expaux[4],&circuitConstants[59],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 153
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 153
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 153
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_add(&expaux[0],&lvar[14],&circuitConstants[1]); // line circom 149
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void FFT4_42_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 42;
ctx->componentMemory[coffset].templateName = "FFT4";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 12;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void FFT4_42_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[10];
FrElement lvar[15];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_mul(&expaux[6],&circuitConstants[1],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 150
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 150
Fr_mul(&expaux[4],&circuitConstants[1],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 150
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 150
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 150
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_mul(&expaux[6],&circuitConstants[1],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 151
Fr_mul(&expaux[5],&circuitConstants[57],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 151
Fr_mul(&expaux[4],&circuitConstants[57],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 151
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 151
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 151
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_mul(&expaux[6],&circuitConstants[1],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 152
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 152
Fr_mul(&expaux[4],&circuitConstants[1],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 152
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 152
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 152
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_mul(&expaux[6],&circuitConstants[1],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 153
Fr_mul(&expaux[5],&circuitConstants[57],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 153
Fr_mul(&expaux[4],&circuitConstants[57],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 153
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 153
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 153
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_add(&expaux[0],&lvar[14],&circuitConstants[1]); // line circom 149
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void FFT4_43_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 43;
ctx->componentMemory[coffset].templateName = "FFT4";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 12;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void FFT4_43_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[10];
FrElement lvar[15];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[60]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[61]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[61]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[60]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[62]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[63]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[64]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_mul(&expaux[6],&circuitConstants[61],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 150
Fr_mul(&expaux[5],&circuitConstants[60],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 150
Fr_mul(&expaux[4],&circuitConstants[62],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 150
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 150
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 150
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_mul(&expaux[6],&circuitConstants[61],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 151
Fr_mul(&expaux[5],&circuitConstants[63],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 151
Fr_mul(&expaux[4],&circuitConstants[64],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 151
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 151
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 151
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_mul(&expaux[6],&circuitConstants[61],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 152
Fr_mul(&expaux[5],&circuitConstants[60],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 152
Fr_mul(&expaux[4],&circuitConstants[62],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 152
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 152
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 152
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_mul(&expaux[6],&circuitConstants[61],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 153
Fr_mul(&expaux[5],&circuitConstants[63],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 153
Fr_mul(&expaux[4],&circuitConstants[64],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 153
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 153
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 153
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_add(&expaux[0],&lvar[14],&circuitConstants[1]); // line circom 149
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void FFT4_44_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 44;
ctx->componentMemory[coffset].templateName = "FFT4";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 12;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void FFT4_44_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[10];
FrElement lvar[15];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[61]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[61]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[65]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[65]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[66]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_mul(&expaux[6],&circuitConstants[57],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 150
Fr_mul(&expaux[5],&circuitConstants[61],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 150
Fr_mul(&expaux[4],&circuitConstants[65],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 150
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 150
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 150
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_mul(&expaux[6],&circuitConstants[57],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 151
Fr_mul(&expaux[5],&circuitConstants[65],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 151
Fr_mul(&expaux[4],&circuitConstants[66],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 151
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 151
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 151
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_mul(&expaux[6],&circuitConstants[57],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 152
Fr_mul(&expaux[5],&circuitConstants[61],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 152
Fr_mul(&expaux[4],&circuitConstants[65],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 152
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 152
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 152
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_mul(&expaux[6],&circuitConstants[57],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 153
Fr_mul(&expaux[5],&circuitConstants[65],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 153
Fr_mul(&expaux[4],&circuitConstants[66],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 153
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 153
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 153
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_add(&expaux[0],&lvar[14],&circuitConstants[1]); // line circom 149
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void FFT4_45_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 45;
ctx->componentMemory[coffset].templateName = "FFT4";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 12;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void FFT4_45_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[10];
FrElement lvar[15];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[62]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[65]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[65]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[62]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[67]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[64]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[68]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_mul(&expaux[6],&circuitConstants[65],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 150
Fr_mul(&expaux[5],&circuitConstants[62],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 150
Fr_mul(&expaux[4],&circuitConstants[67],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 150
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 150
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 150
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_mul(&expaux[6],&circuitConstants[65],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 151
Fr_mul(&expaux[5],&circuitConstants[64],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 151
Fr_mul(&expaux[4],&circuitConstants[68],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 151
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 151
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 151
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_mul(&expaux[6],&circuitConstants[65],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 152
Fr_mul(&expaux[5],&circuitConstants[62],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 152
Fr_mul(&expaux[4],&circuitConstants[67],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 152
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 152
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 152
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_mul(&expaux[6],&circuitConstants[65],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 153
Fr_mul(&expaux[5],&circuitConstants[64],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 153
Fr_mul(&expaux[4],&circuitConstants[68],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 153
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 153
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 153
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_add(&expaux[0],&lvar[14],&circuitConstants[1]); // line circom 149
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void Permute_46_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 46;
ctx->componentMemory[coffset].templateName = "Permute";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 48;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void Permute_46_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[7];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 167
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 168
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((3 * ((Fr_toInt(&lvar[5]) * 4) + Fr_toInt(&lvar[6]))) + 0)];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((3 * ((Fr_toInt(&lvar[6]) * 4) + Fr_toInt(&lvar[5]))) + 48)],3);
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 168
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 168
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 167
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[4]); // line circom 167
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void FFTBig_47_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 47;
ctx->componentMemory[coffset].templateName = "FFTBig";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 48;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[10]{0};
}

void FFTBig_47_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[5];
FrElement lvar[17];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+96;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "bitReverse";
BitReverse_40_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 96 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 1+ctx_index+1;
uint csoffset = mySignalStart+192;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "fft4[0][0]";
FFT4_41_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 0 ;
aux_cmp_num += 0;
}
}
{
uint aux_create = 2;
int aux_cmp_num = 2+ctx_index+1;
uint csoffset = mySignalStart+216;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "fft4[0][1]";
FFT4_41_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 0 ;
aux_cmp_num += 0;
}
}
{
uint aux_create = 3;
int aux_cmp_num = 3+ctx_index+1;
uint csoffset = mySignalStart+240;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "fft4[0][2]";
FFT4_41_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 0 ;
aux_cmp_num += 0;
}
}
{
uint aux_create = 4;
int aux_cmp_num = 4+ctx_index+1;
uint csoffset = mySignalStart+264;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "fft4[0][3]";
FFT4_41_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 0 ;
aux_cmp_num += 0;
}
}
{
uint aux_create = 5;
int aux_cmp_num = 5+ctx_index+1;
uint csoffset = mySignalStart+288;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "fft4[1][0]";
FFT4_42_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 0 ;
aux_cmp_num += 0;
}
}
{
uint aux_create = 6;
int aux_cmp_num = 6+ctx_index+1;
uint csoffset = mySignalStart+312;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "fft4[1][1]";
FFT4_43_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 0 ;
aux_cmp_num += 0;
}
}
{
uint aux_create = 7;
int aux_cmp_num = 7+ctx_index+1;
uint csoffset = mySignalStart+336;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "fft4[1][2]";
FFT4_44_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 0 ;
aux_cmp_num += 0;
}
}
{
uint aux_create = 8;
int aux_cmp_num = 8+ctx_index+1;
uint csoffset = mySignalStart+360;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "fft4[1][3]";
FFT4_45_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 0 ;
aux_cmp_num += 0;
}
}
{
uint aux_create = 9;
int aux_cmp_num = 9+ctx_index+1;
uint csoffset = mySignalStart+384;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "permute";
Permute_46_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 96 ;
aux_cmp_num += 1;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 181. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 186. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 187. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[30]); // line circom 195
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[8],&circuitConstants[3]); // line circom 196
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + (((3 * Fr_toInt(&lvar[7])) + (1 * Fr_toInt(&lvar[8]))) + 48)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[7])) + (1 * Fr_toInt(&lvar[8]))) + 48)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
BitReverse_40_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[8];
// load src
Fr_add(&expaux[0],&lvar[8],&circuitConstants[1]); // line circom 196
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[8],&circuitConstants[3]); // line circom 196
}
{
PFrElement aux_dest = &lvar[7];
// load src
Fr_add(&expaux[0],&lvar[7],&circuitConstants[1]); // line circom 195
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[30]); // line circom 195
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[58]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[9],&circuitConstants[2]); // line circom 212
while(Fr_isTrue(&expaux[0])){
Fr_gt(&expaux[0],&lvar[9],&circuitConstants[0]); // line circom 213
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[4]); // line circom 214
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_eq(&expaux[0],&lvar[9],&circuitConstants[0]); // line circom 216
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
}else{
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_mul(&expaux[1],&lvar[10],&circuitConstants[4]); // line circom 221
Fr_idiv(&expaux[0],&expaux[1],&circuitConstants[4]); // line circom 221
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[15];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[16];
// load src
Fr_add(&expaux[0],&circuitConstants[0],&lvar[14]); // line circom 223
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
Fr_pow(&expaux[0],&circuitConstants[60],&lvar[16]); // line circom 224
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_add(&expaux[0],&lvar[10],&circuitConstants[1]); // line circom 214
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[4]); // line circom 214
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[4]); // line circom 228
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[4]); // line circom 229
while(Fr_isTrue(&expaux[0])){
Fr_gt(&expaux[0],&lvar[9],&circuitConstants[0]); // line circom 230
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[12];
// load src
Fr_mul(&expaux[2],&lvar[11],&circuitConstants[4]); // line circom 231
Fr_add(&expaux[1],&expaux[2],&lvar[10]); // line circom 231
Fr_idiv(&expaux[0],&expaux[1],&circuitConstants[4]); // line circom 231
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
Fr_mul(&expaux[2],&lvar[11],&circuitConstants[4]); // line circom 232
Fr_add(&expaux[1],&expaux[2],&lvar[10]); // line circom 232
Fr_mod(&expaux[0],&expaux[1],&circuitConstants[4]); // line circom 232
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 233
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((4 + (1 * Fr_toInt(&lvar[12]))) + 1);
{
uint map_index_aux[2];
map_index_aux[0]=Fr_toInt(&lvar[13]);
map_index_aux[1]=Fr_toInt(&lvar[14]);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ctx->templateInsId2IOSignalInfo[ctx->componentMemory[mySubcomponents[cmp_index_ref]].templateId].defs[1].offset+(map_index_aux[0])*ctx->templateInsId2IOSignalInfo[ctx->componentMemory[mySubcomponents[cmp_index_ref]].templateId].defs[1].lengths[0]+map_index_aux[1]];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((0 + (1 * Fr_toInt(&lvar[10]))) + 1)]].signalStart + ctx->templateInsId2IOSignalInfo[ctx->componentMemory[mySubcomponents[((0 + (1 * Fr_toInt(&lvar[10]))) + 1)]].templateId].defs[0].offset+(Fr_toInt(&lvar[11]))*ctx->templateInsId2IOSignalInfo[ctx->componentMemory[mySubcomponents[((0 + (1 * Fr_toInt(&lvar[10]))) + 1)]].templateId].defs[0].lengths[0]+Fr_toInt(&lvar[14])]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
(*_functionTable[ctx->componentMemory[mySubcomponents[cmp_index_ref]].templateId])(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_add(&expaux[0],&lvar[14],&circuitConstants[1]); // line circom 233
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 233
}
}else{
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[12],&circuitConstants[3]); // line circom 237
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((0 + (1 * Fr_toInt(&lvar[10]))) + 1);
{
uint map_index_aux[2];
map_index_aux[0]=Fr_toInt(&lvar[11]);
map_index_aux[1]=Fr_toInt(&lvar[12]);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ctx->templateInsId2IOSignalInfo[ctx->componentMemory[mySubcomponents[cmp_index_ref]].templateId].defs[1].offset+(map_index_aux[0])*ctx->templateInsId2IOSignalInfo[ctx->componentMemory[mySubcomponents[cmp_index_ref]].templateId].defs[1].lengths[0]+map_index_aux[1]];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + (((3 * ((Fr_toInt(&lvar[10]) * 4) + Fr_toInt(&lvar[11]))) + (1 * Fr_toInt(&lvar[12]))) + 0)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
(*_functionTable[ctx->componentMemory[mySubcomponents[cmp_index_ref]].templateId])(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[12];
// load src
Fr_add(&expaux[0],&lvar[12],&circuitConstants[1]); // line circom 237
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[12],&circuitConstants[3]); // line circom 237
}
}
{
PFrElement aux_dest = &lvar[11];
// load src
Fr_add(&expaux[0],&lvar[11],&circuitConstants[1]); // line circom 229
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[4]); // line circom 229
}
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_add(&expaux[0],&lvar[10],&circuitConstants[1]); // line circom 228
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[4]); // line circom 228
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
Fr_add(&expaux[0],&lvar[9],&circuitConstants[1]); // line circom 212
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[9],&circuitConstants[2]); // line circom 212
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[9],&circuitConstants[4]); // line circom 274
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[4]); // line circom 275
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[3]); // line circom 276
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[12];
// load src
Fr_mul(&expaux[1],&lvar[9],&circuitConstants[4]); // line circom 277
Fr_add(&expaux[0],&expaux[1],&lvar[10]); // line circom 277
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 9;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + (((3 * Fr_toInt(&lvar[12])) + (1 * Fr_toInt(&lvar[11]))) + 48)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((4 + (1 * Fr_toInt(&lvar[9]))) + 1)]].signalStart + ctx->templateInsId2IOSignalInfo[ctx->componentMemory[mySubcomponents[((4 + (1 * Fr_toInt(&lvar[9]))) + 1)]].templateId].defs[0].offset+(Fr_toInt(&lvar[10]))*ctx->templateInsId2IOSignalInfo[ctx->componentMemory[mySubcomponents[((4 + (1 * Fr_toInt(&lvar[9]))) + 1)]].templateId].defs[0].lengths[0]+Fr_toInt(&lvar[11])]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Permute_46_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[11];
// load src
Fr_add(&expaux[0],&lvar[11],&circuitConstants[1]); // line circom 276
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[3]); // line circom 276
}
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_add(&expaux[0],&lvar[10],&circuitConstants[1]); // line circom 275
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[4]); // line circom 275
}
{
PFrElement aux_dest = &lvar[9];
// load src
Fr_add(&expaux[0],&lvar[9],&circuitConstants[1]); // line circom 274
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[9],&circuitConstants[4]); // line circom 274
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[9],&circuitConstants[30]); // line circom 287
while(Fr_isTrue(&expaux[0])){
if(Fr_isTrue(&circuitConstants[1])){
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_sub(&expaux[1],&circuitConstants[30],&lvar[9]); // line circom 288
Fr_mod(&expaux[0],&expaux[1],&circuitConstants[30]); // line circom 288
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}else{
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&lvar[9]);
}
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[3]); // line circom 289
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[10])) + (1 * Fr_toInt(&lvar[11]))) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[9]].signalStart + (((3 * Fr_toInt(&lvar[9])) + (1 * Fr_toInt(&lvar[11]))) + 0)]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
Fr_add(&expaux[0],&lvar[11],&circuitConstants[1]); // line circom 289
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[3]); // line circom 289
}
{
PFrElement aux_dest = &lvar[9];
// load src
Fr_add(&expaux[0],&lvar[9],&circuitConstants[1]); // line circom 287
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[9],&circuitConstants[30]); // line circom 287
}
for (uint i = 0; i < 10; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void FFT_48_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 48;
ctx->componentMemory[coffset].templateName = "FFT";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 48;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
}

void FFT_48_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[2];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+96;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "fftBig";
FFTBig_47_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 480 ;
aux_cmp_num += 11;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 302. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 307. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 308. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 48];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 48],48);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
FFTBig_47_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],48);
}
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void EvPol4_49_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 49;
ctx->componentMemory[coffset].templateName = "EvPol4";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 18;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void EvPol4_49_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[4];
FrElement lvar[3];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],3);
}
{

// start of call bucket
FrElement lvarcall[19];
// copying argument 0
Fr_copyn(&lvarcall[0],&lvar[0],3);
// end copying argument 0
// copying argument 1
Fr_copyn(&lvarcall[3],&signalValues[mySignalStart + 18],3);
// end copying argument 1
// copying argument 2
Fr_copyn(&lvarcall[6],&signalValues[mySignalStart + 12],3);
// end copying argument 2
CMulAddF_6(ctx,lvarcall,myId,&lvar[0],3);
// end call bucket
}

{

// start of call bucket
FrElement lvarcall[19];
// copying argument 0
Fr_copyn(&lvarcall[0],&lvar[0],3);
// end copying argument 0
// copying argument 1
Fr_copyn(&lvarcall[3],&signalValues[mySignalStart + 18],3);
// end copying argument 1
// copying argument 2
Fr_copyn(&lvarcall[6],&signalValues[mySignalStart + 9],3);
// end copying argument 2
CMulAddF_6(ctx,lvarcall,myId,&lvar[0],3);
// end call bucket
}

{

// start of call bucket
FrElement lvarcall[19];
// copying argument 0
Fr_copyn(&lvarcall[0],&lvar[0],3);
// end copying argument 0
// copying argument 1
Fr_copyn(&lvarcall[3],&signalValues[mySignalStart + 18],3);
// end copying argument 1
// copying argument 2
Fr_copyn(&lvarcall[6],&signalValues[mySignalStart + 6],3);
// end copying argument 2
CMulAddF_6(ctx,lvarcall,myId,&lvar[0],3);
// end call bucket
}

{

// start of call bucket
FrElement lvarcall[19];
// copying argument 0
Fr_copyn(&lvarcall[0],&lvar[0],3);
// end copying argument 0
// copying argument 1
Fr_copyn(&lvarcall[3],&signalValues[mySignalStart + 18],3);
// end copying argument 1
// copying argument 2
Fr_copyn(&lvarcall[6],&signalValues[mySignalStart + 3],3);
// end copying argument 2
CMulAddF_6(ctx,lvarcall,myId,&lvar[0],3);
// end call bucket
}

{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[0],3);
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void EvalPol_50_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 50;
ctx->componentMemory[coffset].templateName = "EvalPol";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 51;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[4]{0};
}

void EvalPol_50_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[30]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+54;
uint aux_dimensions[1] = {4};
for (uint i = 0; i < 4; i++) {
std::string new_cmp_name = "evs4"+ctx->generate_position_array(aux_dimensions, 1, i);
EvPol4_49_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 21 ;
aux_cmp_num += 1;
}
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
Fr_geq(&expaux[0],&lvar[2],&circuitConstants[0]); // line circom 61
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[4]); // line circom 63
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[2])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((3 * Fr_toInt(&lvar[3])) + 3)];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((3 * ((Fr_toInt(&lvar[2]) * 4) + Fr_toInt(&lvar[3]))) + 3)],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
EvPol4_49_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_add(&expaux[0],&lvar[3],&circuitConstants[1]); // line circom 63
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[3],&circuitConstants[4]); // line circom 63
}
Fr_eq(&expaux[0],&lvar[2],&circuitConstants[3]); // line circom 73
if(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
EvPol4_49_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
EvPol4_49_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
uint cmp_index_ref = 3;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
EvPol4_49_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}else{
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[2])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((1 * (Fr_toInt(&lvar[2]) + 1)) + 0)]].signalStart + 0],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
EvPol4_49_run(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[2])) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 51],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
EvPol4_49_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_sub(&expaux[0],&lvar[2],&circuitConstants[1]); // line circom 61
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_geq(&expaux[0],&lvar[2],&circuitConstants[0]); // line circom 61
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],3);
}
for (uint i = 0; i < 4; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void VerifyFRI0_51_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 51;
ctx->componentMemory[coffset].templateName = "VerifyFRI0";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 107;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[3]{0};
ctx->componentMemory[coffset].outputIsSet = new bool[0]();
ctx->componentMemory[coffset].mutexes = new std::mutex[0];
ctx->componentMemory[coffset].cvs = new std::condition_variable[0];
}

void VerifyFRI0_51_run_parallel(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[8];
FrElement lvar[9];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[7]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[69]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
{
uint aux_create = 0;
int aux_cmp_num = 5+ctx_index+1;
uint csoffset = mySignalStart+313;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "FFT_260_13222";
FFT_48_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 576 ;
aux_cmp_num += 12;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+175;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "EvalPol_262_13431";
EvalPol_50_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 138 ;
aux_cmp_num += 5;
}
}
{
uint aux_create = 2;
int aux_cmp_num = 17+ctx_index+1;
uint csoffset = mySignalStart+889;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "TreeSelector_266_13640";
TreeSelector_38_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 140 ;
aux_cmp_num += 6;
}
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 107];
// load src
Fr_mul(&expaux[3],&signalValues[mySignalStart + 0],&circuitConstants[70]); // line circom 254
Fr_add(&expaux[2],&expaux[3],&circuitConstants[1]); // line circom 254
Fr_mul(&expaux[0],&circuitConstants[69],&expaux[2]); // line circom 254
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[7]); // line circom 255
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[34];
// copying argument 0
Fr_sub(&expaux[1],&circuitConstants[11],&lvar[7]); // line circom 256
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
invroots_7(ctx,lvarcall,myId,&lvar[8],1);
// end call bucket
}

{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[7])) + 107)];
// load src
Fr_sub(&expaux[1],&lvar[7],&circuitConstants[1]); // line circom 256
Fr_sub(&expaux[5],&lvar[8],&circuitConstants[1]); // line circom 256
Fr_mul(&expaux[3],&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[7])) + 0)],&expaux[5]); // line circom 256
Fr_add(&expaux[2],&expaux[3],&circuitConstants[1]); // line circom 256
Fr_mul(&expaux[0],&signalValues[mySignalStart + ((1 * Fr_toInt(&expaux[1])) + 107)],&expaux[2]); // line circom 256
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
Fr_add(&expaux[0],&lvar[7],&circuitConstants[1]); // line circom 255
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[7]); // line circom 255
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 48];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 10],48);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
FFT_48_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 114];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],48);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 162];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 7],&signalValues[mySignalStart + 113]); // line circom 261
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 163];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 8],&signalValues[mySignalStart + 113]); // line circom 261
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 164];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 9],&signalValues[mySignalStart + 113]); // line circom 261
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 114],48);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 51];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 162],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
EvalPol_50_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 165];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + 0],3);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[4]); // line circom 265
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[7])) + 168)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * (Fr_toInt(&lvar[7]) + 3)) + 0)]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
Fr_add(&expaux[0],&lvar[7],&circuitConstants[1]); // line circom 265
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[4]); // line circom 265
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 51];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 168],4);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 58],48);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
TreeSelector_38_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 172];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[2]].signalStart + 0],3);
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + 172],&signalValues[mySignalStart + 165]); // line circom 268
Fr_mul(&expaux[1],&signalValues[mySignalStart + 106],&expaux[3]); // line circom 268
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 268
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 268. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 173],&signalValues[mySignalStart + 166]); // line circom 269
Fr_mul(&expaux[1],&signalValues[mySignalStart + 106],&expaux[3]); // line circom 269
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 269
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 269. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 174],&signalValues[mySignalStart + 167]); // line circom 270
Fr_mul(&expaux[1],&signalValues[mySignalStart + 106],&expaux[3]); // line circom 270
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 270
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 270. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 0; i++) {
ctx->componentMemory[ctx_index].mutexes[i].lock();
ctx->componentMemory[ctx_index].outputIsSet[i]=true;
ctx->componentMemory[ctx_index].mutexes[i].unlock();
ctx->componentMemory[ctx_index].cvs[i].notify_all();
}
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
for (uint i = 0; i < 3; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void TreeSelector_52_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 52;
ctx->componentMemory[coffset].templateName = "TreeSelector";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 27;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[2]{0};
}

void TreeSelector_52_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[8];
FrElement lvar[12];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+30;
uint aux_dimensions[1] = {2};
for (uint i = 0; i < 2; i++) {
std::string new_cmp_name = "im"+ctx->generate_position_array(aux_dimensions, 1, i);
TreeSelector4_37_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 17 ;
aux_cmp_num += 1;
}
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[8]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[8]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 45
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 45
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[8]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[8],&circuitConstants[1]); // line circom 56
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[2]); // line circom 58
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[4]); // line circom 60
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * (0 + Fr_toInt(&lvar[10]))) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ((3 * Fr_toInt(&lvar[11])) + 3)];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((3 * ((4 * Fr_toInt(&lvar[10])) + Fr_toInt(&lvar[11]))) + 3)],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
TreeSelector4_37_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[11];
// load src
Fr_add(&expaux[0],&lvar[11],&circuitConstants[1]); // line circom 60
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[4]); // line circom 60
}
{
uint cmp_index_ref = ((1 * (0 + Fr_toInt(&lvar[10]))) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 27]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
TreeSelector4_37_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
uint cmp_index_ref = ((1 * (0 + Fr_toInt(&lvar[10]))) + 0);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 16];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 28]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
TreeSelector4_37_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_add(&expaux[0],&lvar[10],&circuitConstants[1]); // line circom 58
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[2]); // line circom 58
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
Fr_lt(&expaux[0],&lvar[8],&circuitConstants[1]); // line circom 56
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[8],&circuitConstants[3]); // line circom 82
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[8])) + 0)];
// load src
Fr_sub(&expaux[3],&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + ((1 * Fr_toInt(&lvar[8])) + 0)],&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + ((1 * Fr_toInt(&lvar[8])) + 0)]); // line circom 86
Fr_mul(&expaux[1],&signalValues[mySignalStart + 29],&expaux[3]); // line circom 86
Fr_add(&expaux[0],&expaux[1],&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + ((1 * Fr_toInt(&lvar[8])) + 0)]); // line circom 86
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
Fr_add(&expaux[0],&lvar[8],&circuitConstants[1]); // line circom 82
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[8],&circuitConstants[3]); // line circom 82
}
for (uint i = 0; i < 2; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void VerifyFRI0_53_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 53;
ctx->componentMemory[coffset].templateName = "VerifyFRI0";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 79;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[3]{0};
ctx->componentMemory[coffset].outputIsSet = new bool[0]();
ctx->componentMemory[coffset].mutexes = new std::mutex[0];
ctx->componentMemory[coffset].cvs = new std::condition_variable[0];
}

void VerifyFRI0_53_run_parallel(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[8];
FrElement lvar[9];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[71]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[11]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[7]);
}
{
uint aux_create = 0;
int aux_cmp_num = 5+ctx_index+1;
uint csoffset = mySignalStart+280;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "FFT_260_13222";
FFT_48_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 576 ;
aux_cmp_num += 12;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+142;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "EvalPol_262_13431";
EvalPol_50_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 138 ;
aux_cmp_num += 5;
}
}
{
uint aux_create = 2;
int aux_cmp_num = 17+ctx_index+1;
uint csoffset = mySignalStart+856;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "TreeSelector_266_13640";
TreeSelector_52_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 64 ;
aux_cmp_num += 3;
}
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 79];
// load src
Fr_mul(&expaux[3],&signalValues[mySignalStart + 0],&circuitConstants[72]); // line circom 254
Fr_add(&expaux[2],&expaux[3],&circuitConstants[1]); // line circom 254
Fr_mul(&expaux[0],&circuitConstants[71],&expaux[2]); // line circom 254
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[3]); // line circom 255
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[34];
// copying argument 0
Fr_sub(&expaux[1],&circuitConstants[7],&lvar[7]); // line circom 256
Fr_copy(&lvarcall[0],&expaux[1]);
// end copying argument 0
invroots_7(ctx,lvarcall,myId,&lvar[8],1);
// end call bucket
}

{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[7])) + 79)];
// load src
Fr_sub(&expaux[1],&lvar[7],&circuitConstants[1]); // line circom 256
Fr_sub(&expaux[5],&lvar[8],&circuitConstants[1]); // line circom 256
Fr_mul(&expaux[3],&signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[7])) + 0)],&expaux[5]); // line circom 256
Fr_add(&expaux[2],&expaux[3],&circuitConstants[1]); // line circom 256
Fr_mul(&expaux[0],&signalValues[mySignalStart + ((1 * Fr_toInt(&expaux[1])) + 79)],&expaux[2]); // line circom 256
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
Fr_add(&expaux[0],&lvar[7],&circuitConstants[1]); // line circom 255
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[3]); // line circom 255
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 48];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 6],48);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
FFT_48_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 82];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],48);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 130];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 3],&signalValues[mySignalStart + 81]); // line circom 261
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 131];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 4],&signalValues[mySignalStart + 81]); // line circom 261
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 132];
// load src
Fr_mul(&expaux[0],&signalValues[mySignalStart + 5],&signalValues[mySignalStart + 81]); // line circom 261
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 82],48);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 51];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 130],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
EvalPol_50_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 133];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[1]].signalStart + 0],3);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[3]); // line circom 265
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((1 * Fr_toInt(&lvar[7])) + 136)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + ((1 * (Fr_toInt(&lvar[7]) + 0)) + 0)]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
Fr_add(&expaux[0],&lvar[7],&circuitConstants[1]); // line circom 265
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[3]); // line circom 265
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 27];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 136],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 54],24);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 24;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
TreeSelector_52_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 139];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[2]].signalStart + 0],3);
}
Fr_sub(&expaux[3],&signalValues[mySignalStart + 139],&signalValues[mySignalStart + 133]); // line circom 268
Fr_mul(&expaux[1],&signalValues[mySignalStart + 78],&expaux[3]); // line circom 268
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 268
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 268. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 140],&signalValues[mySignalStart + 134]); // line circom 269
Fr_mul(&expaux[1],&signalValues[mySignalStart + 78],&expaux[3]); // line circom 269
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 269
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 269. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
Fr_sub(&expaux[3],&signalValues[mySignalStart + 141],&signalValues[mySignalStart + 135]); // line circom 270
Fr_mul(&expaux[1],&signalValues[mySignalStart + 78],&expaux[3]); // line circom 270
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 270
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 270. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
for (uint i = 0; i < 0; i++) {
ctx->componentMemory[ctx_index].mutexes[i].lock();
ctx->componentMemory[ctx_index].outputIsSet[i]=true;
ctx->componentMemory[ctx_index].mutexes[i].unlock();
ctx->componentMemory[ctx_index].cvs[i].notify_all();
}
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
for (uint i = 0; i < 3; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void BitReverse_54_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 54;
ctx->componentMemory[coffset].templateName = "BitReverse";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 24;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void BitReverse_54_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[7];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[8]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[8]); // line circom 105
while(Fr_isTrue(&expaux[0])){
{

// start of call bucket
FrElement lvarcall[20];
// copying argument 0
Fr_copy(&lvarcall[0],&lvar[5]);
// end copying argument 0
// copying argument 1
Fr_copy(&lvarcall[1],&circuitConstants[3]);
// end copying argument 1
rev_5(ctx,lvarcall,myId,&lvar[4],1);
// end call bucket
}

{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[3]); // line circom 107
while(Fr_isTrue(&expaux[0])){
Fr_gt(&expaux[0],&lvar[5],&lvar[4]); // line circom 108
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[5])) + (1 * Fr_toInt(&lvar[6]))) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[4])) + (1 * Fr_toInt(&lvar[6]))) + 24)]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[4])) + (1 * Fr_toInt(&lvar[6]))) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[5])) + (1 * Fr_toInt(&lvar[6]))) + 24)]);
}
}else{
Fr_eq(&expaux[0],&lvar[5],&lvar[4]); // line circom 111
if(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[5])) + (1 * Fr_toInt(&lvar[6]))) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[5])) + (1 * Fr_toInt(&lvar[6]))) + 24)]);
}
}
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 107
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[3]); // line circom 107
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 105
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[8]); // line circom 105
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void FFT4_55_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 55;
ctx->componentMemory[coffset].templateName = "FFT4";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 12;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void FFT4_55_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[10];
FrElement lvar[15];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[73]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[73]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[73]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[73]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[73]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[74]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[74]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[73],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_mul(&expaux[6],&circuitConstants[73],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 150
Fr_mul(&expaux[5],&circuitConstants[73],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 150
Fr_mul(&expaux[4],&circuitConstants[73],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 150
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 150
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 150
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[73],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_mul(&expaux[6],&circuitConstants[73],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 151
Fr_mul(&expaux[5],&circuitConstants[74],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 151
Fr_mul(&expaux[4],&circuitConstants[74],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 151
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 151
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 151
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[73],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_mul(&expaux[6],&circuitConstants[73],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 152
Fr_mul(&expaux[5],&circuitConstants[73],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 152
Fr_mul(&expaux[4],&circuitConstants[73],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 152
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 152
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 152
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[73],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_mul(&expaux[6],&circuitConstants[73],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 153
Fr_mul(&expaux[5],&circuitConstants[74],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 153
Fr_mul(&expaux[4],&circuitConstants[74],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 153
Fr_mul(&expaux[3],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 153
Fr_mul(&expaux[2],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 153
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_add(&expaux[0],&lvar[14],&circuitConstants[1]); // line circom 149
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void FFT4_56_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 56;
ctx->componentMemory[coffset].templateName = "FFT4";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 12;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void FFT4_56_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[10];
FrElement lvar[15];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[61]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[61]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_mul(&expaux[6],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 150
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 150
Fr_mul(&expaux[4],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 150
Fr_mul(&expaux[3],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 150
Fr_mul(&expaux[2],&circuitConstants[1],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 150
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_mul(&expaux[6],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 151
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 151
Fr_mul(&expaux[4],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 151
Fr_mul(&expaux[3],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 151
Fr_mul(&expaux[2],&circuitConstants[1],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 151
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_mul(&expaux[6],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 152
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 152
Fr_mul(&expaux[4],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 152
Fr_mul(&expaux[3],&circuitConstants[1],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 152
Fr_mul(&expaux[2],&circuitConstants[61],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 152
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_mul(&expaux[6],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 153
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 153
Fr_mul(&expaux[4],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 153
Fr_mul(&expaux[3],&circuitConstants[1],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 153
Fr_mul(&expaux[2],&circuitConstants[61],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 153
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_add(&expaux[0],&lvar[14],&circuitConstants[1]); // line circom 149
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void FFT4_57_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 57;
ctx->componentMemory[coffset].templateName = "FFT4";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 12;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void FFT4_57_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[10];
FrElement lvar[15];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[61]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[21]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[57]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[65]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_mul(&expaux[6],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 150
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 150
Fr_mul(&expaux[4],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 150
Fr_mul(&expaux[3],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 150
Fr_mul(&expaux[2],&circuitConstants[57],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 150
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 150
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_mul(&expaux[6],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 151
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[3],&expaux[4],&expaux[5]); // line circom 151
Fr_mul(&expaux[4],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 151
Fr_mul(&expaux[3],&circuitConstants[1],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 151
Fr_mul(&expaux[2],&circuitConstants[57],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 151
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 151
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_mul(&expaux[6],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[4],&expaux[5],&expaux[6]); // line circom 152
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 152
Fr_mul(&expaux[4],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_sub(&expaux[2],&expaux[3],&expaux[4]); // line circom 152
Fr_mul(&expaux[3],&circuitConstants[1],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 152
Fr_mul(&expaux[2],&circuitConstants[65],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 152
Fr_add(&expaux[0],&expaux[1],&expaux[2]); // line circom 152
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 0)];
// load src
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((0 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_mul(&expaux[6],&circuitConstants[0],&signalValues[mySignalStart + ((3 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[4],&expaux[5],&expaux[6]); // line circom 153
Fr_mul(&expaux[5],&circuitConstants[0],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[3],&expaux[4],&expaux[5]); // line circom 153
Fr_mul(&expaux[4],&circuitConstants[0],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[2],&expaux[3],&expaux[4]); // line circom 153
Fr_mul(&expaux[3],&circuitConstants[1],&signalValues[mySignalStart + ((6 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_add(&expaux[1],&expaux[2],&expaux[3]); // line circom 153
Fr_mul(&expaux[2],&circuitConstants[65],&signalValues[mySignalStart + ((9 + (1 * Fr_toInt(&lvar[14]))) + 12)]); // line circom 153
Fr_sub(&expaux[0],&expaux[1],&expaux[2]); // line circom 153
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_add(&expaux[0],&lvar[14],&circuitConstants[1]); // line circom 149
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 149
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void Permute_58_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 58;
ctx->componentMemory[coffset].templateName = "Permute";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 24;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[0];
}

void Permute_58_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[3];
FrElement lvar[7];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[8]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[2]); // line circom 167
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 168
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + ((3 * ((Fr_toInt(&lvar[5]) * 4) + Fr_toInt(&lvar[6]))) + 0)];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((3 * ((Fr_toInt(&lvar[6]) * 2) + Fr_toInt(&lvar[5]))) + 24)],3);
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 168
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[6],&circuitConstants[4]); // line circom 168
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 167
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[5],&circuitConstants[2]); // line circom 167
}
for (uint i = 0; i < 0; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void FFTBig_59_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 59;
ctx->componentMemory[coffset].templateName = "FFTBig";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 24;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[6]{0};
}

void FFTBig_59_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[5];
FrElement lvar[15];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+48;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "bitReverse";
BitReverse_54_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 48 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 1+ctx_index+1;
uint csoffset = mySignalStart+96;
uint aux_dimensions[2] = {1,2};
for (uint i = 0; i < 2; i++) {
std::string new_cmp_name = "fft4"+ctx->generate_position_array(aux_dimensions, 2, i);
FFT4_55_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 24 ;
aux_cmp_num += 1;
}
}
{
uint aux_create = 3;
int aux_cmp_num = 3+ctx_index+1;
uint csoffset = mySignalStart+144;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "fft4_2[0][0]";
FFT4_56_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 0 ;
aux_cmp_num += 0;
}
}
{
uint aux_create = 4;
int aux_cmp_num = 4+ctx_index+1;
uint csoffset = mySignalStart+168;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "fft4_2[0][1]";
FFT4_57_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 0 ;
aux_cmp_num += 0;
}
}
{
uint aux_create = 5;
int aux_cmp_num = 5+ctx_index+1;
uint csoffset = mySignalStart+192;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "permute";
Permute_58_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 48 ;
aux_cmp_num += 1;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[8]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 181. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 186. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 187. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[8]); // line circom 195
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[8],&circuitConstants[3]); // line circom 196
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + (((3 * Fr_toInt(&lvar[7])) + (1 * Fr_toInt(&lvar[8]))) + 24)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[7])) + (1 * Fr_toInt(&lvar[8]))) + 24)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
BitReverse_54_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[8];
// load src
Fr_add(&expaux[0],&lvar[8],&circuitConstants[1]); // line circom 196
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[8],&circuitConstants[3]); // line circom 196
}
{
PFrElement aux_dest = &lvar[7];
// load src
Fr_add(&expaux[0],&lvar[7],&circuitConstants[1]); // line circom 195
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[7],&circuitConstants[8]); // line circom 195
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[73]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[9],&circuitConstants[1]); // line circom 212
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[2]); // line circom 214
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_add(&expaux[0],&lvar[10],&circuitConstants[1]); // line circom 214
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[2]); // line circom 214
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[2]); // line circom 228
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[4]); // line circom 229
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[12];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[12],&circuitConstants[3]); // line circom 237
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((0 + (1 * Fr_toInt(&lvar[10]))) + 1);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + (((3 * Fr_toInt(&lvar[11])) + (1 * Fr_toInt(&lvar[12]))) + 12)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + (((3 * ((Fr_toInt(&lvar[10]) * 4) + Fr_toInt(&lvar[11]))) + (1 * Fr_toInt(&lvar[12]))) + 0)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
FFT4_55_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[12];
// load src
Fr_add(&expaux[0],&lvar[12],&circuitConstants[1]); // line circom 237
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[12],&circuitConstants[3]); // line circom 237
}
{
PFrElement aux_dest = &lvar[11];
// load src
Fr_add(&expaux[0],&lvar[11],&circuitConstants[1]); // line circom 229
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[4]); // line circom 229
}
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_add(&expaux[0],&lvar[10],&circuitConstants[1]); // line circom 228
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[2]); // line circom 228
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
Fr_lt(&expaux[0],&lvar[9],&circuitConstants[1]); // line circom 212
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[2]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[2]); // line circom 251
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[9];
// load src
Fr_mul(&expaux[0],&lvar[9],&circuitConstants[57]); // line circom 253
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_add(&expaux[0],&lvar[10],&circuitConstants[1]); // line circom 251
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[2]); // line circom 251
}
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[2]); // line circom 255
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[4]); // line circom 256
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[12];
// load src
Fr_mul(&expaux[2],&lvar[11],&circuitConstants[2]); // line circom 258
Fr_add(&expaux[1],&expaux[2],&lvar[10]); // line circom 258
Fr_idiv(&expaux[0],&expaux[1],&circuitConstants[4]); // line circom 258
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[13];
// load src
Fr_mul(&expaux[2],&lvar[11],&circuitConstants[2]); // line circom 259
Fr_add(&expaux[1],&expaux[2],&lvar[10]); // line circom 259
Fr_mod(&expaux[0],&expaux[1],&circuitConstants[4]); // line circom 259
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[14];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 260
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((0 + (1 * Fr_toInt(&lvar[12]))) + 3);
{
uint map_index_aux[2];
map_index_aux[0]=Fr_toInt(&lvar[13]);
map_index_aux[1]=Fr_toInt(&lvar[14]);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + ctx->templateInsId2IOSignalInfo[ctx->componentMemory[mySubcomponents[cmp_index_ref]].templateId].defs[1].offset+(map_index_aux[0])*ctx->templateInsId2IOSignalInfo[ctx->componentMemory[mySubcomponents[cmp_index_ref]].templateId].defs[1].lengths[0]+map_index_aux[1]];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((0 + (1 * Fr_toInt(&lvar[10]))) + 1)]].signalStart + (((3 * Fr_toInt(&lvar[11])) + (1 * Fr_toInt(&lvar[14]))) + 0)]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
(*_functionTable[ctx->componentMemory[mySubcomponents[cmp_index_ref]].templateId])(mySubcomponents[cmp_index_ref],ctx);

}
}
}
{
PFrElement aux_dest = &lvar[14];
// load src
Fr_add(&expaux[0],&lvar[14],&circuitConstants[1]); // line circom 260
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[14],&circuitConstants[3]); // line circom 260
}
{
PFrElement aux_dest = &lvar[11];
// load src
Fr_add(&expaux[0],&lvar[11],&circuitConstants[1]); // line circom 256
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[4]); // line circom 256
}
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_add(&expaux[0],&lvar[10],&circuitConstants[1]); // line circom 255
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[2]); // line circom 255
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[9],&circuitConstants[2]); // line circom 274
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[4]); // line circom 275
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[3]); // line circom 276
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[12];
// load src
Fr_mul(&expaux[1],&lvar[9],&circuitConstants[4]); // line circom 277
Fr_add(&expaux[0],&expaux[1],&lvar[10]); // line circom 277
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
uint cmp_index_ref = 5;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + (((3 * Fr_toInt(&lvar[12])) + (1 * Fr_toInt(&lvar[11]))) + 24)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((0 + (1 * Fr_toInt(&lvar[9]))) + 3)]].signalStart + ctx->templateInsId2IOSignalInfo[ctx->componentMemory[mySubcomponents[((0 + (1 * Fr_toInt(&lvar[9]))) + 3)]].templateId].defs[0].offset+(Fr_toInt(&lvar[10]))*ctx->templateInsId2IOSignalInfo[ctx->componentMemory[mySubcomponents[((0 + (1 * Fr_toInt(&lvar[9]))) + 3)]].templateId].defs[0].lengths[0]+Fr_toInt(&lvar[11])]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
Permute_58_run(mySubcomponents[cmp_index_ref],ctx);

}
}
{
PFrElement aux_dest = &lvar[11];
// load src
Fr_add(&expaux[0],&lvar[11],&circuitConstants[1]); // line circom 276
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[3]); // line circom 276
}
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_add(&expaux[0],&lvar[10],&circuitConstants[1]); // line circom 275
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[10],&circuitConstants[4]); // line circom 275
}
{
PFrElement aux_dest = &lvar[9];
// load src
Fr_add(&expaux[0],&lvar[9],&circuitConstants[1]); // line circom 274
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[9],&circuitConstants[2]); // line circom 274
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[9],&circuitConstants[8]); // line circom 287
while(Fr_isTrue(&expaux[0])){
if(Fr_isTrue(&circuitConstants[1])){
{
PFrElement aux_dest = &lvar[10];
// load src
Fr_sub(&expaux[1],&circuitConstants[8],&lvar[9]); // line circom 288
Fr_mod(&expaux[0],&expaux[1],&circuitConstants[8]); // line circom 288
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
}else{
{
PFrElement aux_dest = &lvar[10];
// load src
// end load src
Fr_copy(aux_dest,&lvar[9]);
}
}
{
PFrElement aux_dest = &lvar[11];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[3]); // line circom 289
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[10])) + (1 * Fr_toInt(&lvar[11]))) + 0)];
// load src
// end load src
Fr_copy(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[5]].signalStart + (((3 * Fr_toInt(&lvar[9])) + (1 * Fr_toInt(&lvar[11]))) + 0)]);
}
{
PFrElement aux_dest = &lvar[11];
// load src
Fr_add(&expaux[0],&lvar[11],&circuitConstants[1]); // line circom 289
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[11],&circuitConstants[3]); // line circom 289
}
{
PFrElement aux_dest = &lvar[9];
// load src
Fr_add(&expaux[0],&lvar[9],&circuitConstants[1]); // line circom 287
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[9],&circuitConstants[8]); // line circom 287
}
for (uint i = 0; i < 6; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void FFT_60_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 60;
ctx->componentMemory[coffset].templateName = "FFT";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 24;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
}

void FFT_60_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[2];
FrElement lvar[4];
uint sub_component_aux;
uint index_multiple_eq;
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[3]);
}
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+48;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "fftBig";
FFTBig_59_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 240 ;
aux_cmp_num += 7;
}
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[8]);
}
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 302. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 307. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
if (!Fr_isTrue(&circuitConstants[1])) std::cout << "Failed assert in template/function " << myTemplateName << " line 308. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&circuitConstants[1]));
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 24];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 24],24);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 24;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
FFTBig_59_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],24);
}
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void VerifyFinalPol0_61_create_parallel(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 61;
ctx->componentMemory[coffset].templateName = "VerifyFinalPol0";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 25;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[1]{0};
ctx->componentMemory[coffset].outputIsSet = new bool[0]();
ctx->componentMemory[coffset].mutexes = new std::mutex[0];
ctx->componentMemory[coffset].cvs = new std::condition_variable[0];
}

void VerifyFinalPol0_61_run_parallel(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[6];
FrElement lvar[2];
uint sub_component_aux;
uint index_multiple_eq;
{
uint aux_create = 0;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+49;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "FFT_780_45302";
FFT_60_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 288 ;
aux_cmp_num += 8;
}
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 24];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],24);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 24;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
FFT_60_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 25];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],24);
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[4]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[8]); // line circom 783
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[3]); // line circom 784
while(Fr_isTrue(&expaux[0])){
Fr_mul(&expaux[1],&signalValues[mySignalStart + 24],&signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[0])) + (1 * Fr_toInt(&lvar[1]))) + 25)]); // line circom 785
Fr_eq(&expaux[0],&expaux[1],&circuitConstants[0]); // line circom 785
if (!Fr_isTrue(&expaux[0])) std::cout << "Failed assert in template/function " << myTemplateName << " line 785. " <<  "Followed trace of components: " << ctx->getTrace(myId) << std::endl;
assert(Fr_isTrue(&expaux[0]));
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 784
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1],&circuitConstants[3]); // line circom 784
}
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 783
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[8]); // line circom 783
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[4]); // line circom 790
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 790
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[0],&circuitConstants[4]); // line circom 790
}
for (uint i = 0; i < 0; i++) {
ctx->componentMemory[ctx_index].mutexes[i].lock();
ctx->componentMemory[ctx_index].outputIsSet[i]=true;
ctx->componentMemory[ctx_index].mutexes[i].unlock();
ctx->componentMemory[ctx_index].cvs[i].notify_all();
}
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
for (uint i = 0; i < 1; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void StarkVerifier0_62_create(uint soffset,uint coffset,Circom_CalcWit* ctx,std::string componentName,uint componentFather){
ctx->componentMemory[coffset].templateId = 62;
ctx->componentMemory[coffset].templateName = "StarkVerifier0";
ctx->componentMemory[coffset].signalStart = soffset;
ctx->componentMemory[coffset].inputCounter = 3484;
ctx->componentMemory[coffset].componentName = componentName;
ctx->componentMemory[coffset].idFather = componentFather;
ctx->componentMemory[coffset].subcomponents = new uint[91]{0};
ctx->componentMemory[coffset].sbct = new std::thread[91];
ctx->componentMemory[coffset].subcomponentsParallel = new bool[91];
}

void StarkVerifier0_62_run(uint ctx_index,Circom_CalcWit* ctx){
FrElement* signalValues = ctx->signalValues;
u64 mySignalStart = ctx->componentMemory[ctx_index].signalStart;
std::string myTemplateName = ctx->componentMemory[ctx_index].templateName;
std::string myComponentName = ctx->componentMemory[ctx_index].componentName;
u64 myFather = ctx->componentMemory[ctx_index].idFather;
u64 myId = ctx_index;
u32* mySubcomponents = ctx->componentMemory[ctx_index].subcomponents;
bool* mySubcomponentsParallel = ctx->componentMemory[ctx_index].subcomponentsParallel;
FrElement* circuitConstants = ctx->circuitConstants;
std::string* listOfTemplateMessages = ctx->listOfTemplateMessages;
FrElement expaux[4];
FrElement lvar[1430];
uint sub_component_aux;
uint index_multiple_eq;
{
uint aux_create = 0;
int aux_cmp_num = 400+ctx_index+1;
uint csoffset = mySignalStart+12976;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "Transcript0_871_48586";
Transcript0_8_create(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 6144 ;
aux_cmp_num += 68;
}
}
{
uint aux_create = 1;
int aux_cmp_num = 468+ctx_index+1;
uint csoffset = mySignalStart+19120;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "VerifyEvaluations0_880_48774";
VerifyEvaluations0_11_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1414 ;
aux_cmp_num += 79;
}
}
{
uint aux_create = 2;
int aux_cmp_num = 907+ctx_index+1;
uint csoffset = mySignalStart+36126;
for (uint i = 0; i < 1; i++) {
std::string new_cmp_name = "VerifyFinalPol0_1012_53532";
VerifyFinalPol0_61_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 337 ;
aux_cmp_num += 9;
}
}
{
uint aux_create = 3;
int aux_cmp_num = 0+ctx_index+1;
uint csoffset = mySignalStart+3800;
uint aux_dimensions[1] = {8};
for (uint i = 0; i < 8; i++) {
std::string new_cmp_name = "CalculateFRIPolValue0_981_52091"+ctx->generate_position_array(aux_dimensions, 1, i);
CalculateFRIPolValue0_36_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1147 ;
aux_cmp_num += 50;
}
}
{
uint aux_create = 11;
int aux_cmp_num = 547+ctx_index+1;
uint csoffset = mySignalStart+20534;
uint aux_dimensions[1] = {8};
for (uint i = 0; i < 8; i++) {
std::string new_cmp_name = "VerifyFRI0_1005_53163"+ctx->generate_position_array(aux_dimensions, 1, i);
VerifyFRI0_51_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1029 ;
aux_cmp_num += 24;
}
}
{
uint aux_create = 19;
int aux_cmp_num = 739+ctx_index+1;
uint csoffset = mySignalStart+28766;
uint aux_dimensions[1] = {8};
for (uint i = 0; i < 8; i++) {
std::string new_cmp_name = "VerifyFRI0_1009_53400"+ctx->generate_position_array(aux_dimensions, 1, i);
VerifyFRI0_53_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 920 ;
aux_cmp_num += 21;
}
}
{
uint aux_create = 27;
int aux_cmp_num = 916+ctx_index+1;
uint csoffset = mySignalStart+36463;
uint aux_dimensions[1] = {8};
for (uint i = 0; i < 8; i++) {
std::string new_cmp_name = "VerifyMerkleHash_943_50592"+ctx->generate_position_array(aux_dimensions, 1, i);
VerifyMerkleHash_18_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 2097 ;
aux_cmp_num += 30;
}
}
{
uint aux_create = 35;
int aux_cmp_num = 1156+ctx_index+1;
uint csoffset = mySignalStart+53239;
uint aux_dimensions[1] = {8};
for (uint i = 0; i < 8; i++) {
std::string new_cmp_name = "VerifyMerkleHash_947_50732"+ctx->generate_position_array(aux_dimensions, 1, i);
VerifyMerkleHash_21_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 2088 ;
aux_cmp_num += 30;
}
}
{
uint aux_create = 43;
int aux_cmp_num = 1396+ctx_index+1;
uint csoffset = mySignalStart+69943;
uint aux_dimensions[1] = {8};
for (uint i = 0; i < 8; i++) {
std::string new_cmp_name = "VerifyMerkleHash_951_50872"+ctx->generate_position_array(aux_dimensions, 1, i);
VerifyMerkleHash_18_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 2097 ;
aux_cmp_num += 30;
}
}
{
uint aux_create = 51;
int aux_cmp_num = 1636+ctx_index+1;
uint csoffset = mySignalStart+86719;
uint aux_dimensions[1] = {8};
for (uint i = 0; i < 8; i++) {
std::string new_cmp_name = "VerifyMerkleHash_955_51011"+ctx->generate_position_array(aux_dimensions, 1, i);
VerifyMerkleHash_24_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1922 ;
aux_cmp_num += 28;
}
}
{
uint aux_create = 59;
int aux_cmp_num = 1860+ctx_index+1;
uint csoffset = mySignalStart+102095;
uint aux_dimensions[1] = {8};
for (uint i = 0; i < 8; i++) {
std::string new_cmp_name = "VerifyMerkleHash_959_51149"+ctx->generate_position_array(aux_dimensions, 1, i);
VerifyMerkleHash_27_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 2079 ;
aux_cmp_num += 30;
}
}
{
uint aux_create = 67;
int aux_cmp_num = 2100+ctx_index+1;
uint csoffset = mySignalStart+118727;
uint aux_dimensions[1] = {8};
for (uint i = 0; i < 8; i++) {
std::string new_cmp_name = "VerifyMerkleHash_965_51491"+ctx->generate_position_array(aux_dimensions, 1, i);
VerifyMerkleHash_31_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 2160 ;
aux_cmp_num += 30;
}
}
{
uint aux_create = 75;
int aux_cmp_num = 2340+ctx_index+1;
uint csoffset = mySignalStart+136007;
uint aux_dimensions[1] = {8};
for (uint i = 0; i < 8; i++) {
std::string new_cmp_name = "VerifyMerkleHash_971_51801"+ctx->generate_position_array(aux_dimensions, 1, i);
VerifyMerkleHash_34_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 1532 ;
aux_cmp_num += 22;
}
}
{
uint aux_create = 83;
int aux_cmp_num = 2516+ctx_index+1;
uint csoffset = mySignalStart+148263;
uint aux_dimensions[1] = {8};
for (uint i = 0; i < 8; i++) {
std::string new_cmp_name = "VerifyQuery0_994_52679"+ctx->generate_position_array(aux_dimensions, 1, i);
VerifyQuery0_39_create_parallel(csoffset,aux_cmp_num,ctx,new_cmp_name,myId);
mySubcomponents[aux_create+i] = aux_cmp_num;
csoffset += 210 ;
aux_cmp_num += 7;
}
}
{
PFrElement aux_dest = &lvar[0];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3484];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[75]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3485];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[76]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3486];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[77]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3487];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[78]);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3488];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[1]);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 150];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 19],129);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 129;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 287];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3460],24);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 24;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 127];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 134];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3],4);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 138];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 7],4);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 142];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 11],4);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 146];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],4);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 130];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3484],4);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 279];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 2364],4);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 0;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 283];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 2368],4);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
Transcript0_8_run(mySubcomponents[cmp_index_ref],ctx);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3513];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 0],9);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3522];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 9],6);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3528];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 15],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3531];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 18],3);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3534];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 21],6);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3540];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 27],12);
}
{
PFrElement aux_dest = &signalValues[mySignalStart + 3552];
// load src
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[0]].signalStart + 39],88);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3528],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 18];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3531],3);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3513],9);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 9;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 9];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3522],6);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 6;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 153];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 3488]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 21];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 19],129);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 129;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 1;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 150];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 0],3);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyEvaluations0_11_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;
}
{
PFrElement aux_dest = &lvar[129];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[130];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[131];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[132];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[133];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[134];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[135];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[136];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[137];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[138];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[139];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[140];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[141];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[142];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[143];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[144];
// load src
// end load src
Fr_copy(aux_dest,&lvar[129]);
}
{
PFrElement aux_dest = &lvar[9];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[130],15);
}
{
PFrElement aux_dest = &lvar[24];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[130],15);
}
{
PFrElement aux_dest = &lvar[39];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[130],15);
}
{
PFrElement aux_dest = &lvar[54];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[130],15);
}
{
PFrElement aux_dest = &lvar[69];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[130],15);
}
{
PFrElement aux_dest = &lvar[84];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[130],15);
}
{
PFrElement aux_dest = &lvar[99];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[130],15);
}
{
PFrElement aux_dest = &lvar[114];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[130],15);
}
{
PFrElement aux_dest = &lvar[241];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[242];
// load src
// end load src
Fr_copy(aux_dest,&lvar[241]);
}
{
PFrElement aux_dest = &lvar[243];
// load src
// end load src
Fr_copy(aux_dest,&lvar[241]);
}
{
PFrElement aux_dest = &lvar[244];
// load src
// end load src
Fr_copy(aux_dest,&lvar[241]);
}
{
PFrElement aux_dest = &lvar[245];
// load src
// end load src
Fr_copy(aux_dest,&lvar[241]);
}
{
PFrElement aux_dest = &lvar[246];
// load src
// end load src
Fr_copy(aux_dest,&lvar[241]);
}
{
PFrElement aux_dest = &lvar[247];
// load src
// end load src
Fr_copy(aux_dest,&lvar[241]);
}
{
PFrElement aux_dest = &lvar[248];
// load src
// end load src
Fr_copy(aux_dest,&lvar[241]);
}
{
PFrElement aux_dest = &lvar[249];
// load src
// end load src
Fr_copy(aux_dest,&lvar[241]);
}
{
PFrElement aux_dest = &lvar[250];
// load src
// end load src
Fr_copy(aux_dest,&lvar[241]);
}
{
PFrElement aux_dest = &lvar[251];
// load src
// end load src
Fr_copy(aux_dest,&lvar[241]);
}
{
PFrElement aux_dest = &lvar[252];
// load src
// end load src
Fr_copy(aux_dest,&lvar[241]);
}
{
PFrElement aux_dest = &lvar[253];
// load src
// end load src
Fr_copy(aux_dest,&lvar[241]);
}
{
PFrElement aux_dest = &lvar[145];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[242],12);
}
{
PFrElement aux_dest = &lvar[157];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[242],12);
}
{
PFrElement aux_dest = &lvar[169];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[242],12);
}
{
PFrElement aux_dest = &lvar[181];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[242],12);
}
{
PFrElement aux_dest = &lvar[193];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[242],12);
}
{
PFrElement aux_dest = &lvar[205];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[242],12);
}
{
PFrElement aux_dest = &lvar[217];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[242],12);
}
{
PFrElement aux_dest = &lvar[229];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[242],12);
}
{
PFrElement aux_dest = &lvar[374];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[375];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[376];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[377];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[378];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[379];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[380];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[381];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[382];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[383];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[384];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[385];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[386];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[387];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[388];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[389];
// load src
// end load src
Fr_copy(aux_dest,&lvar[374]);
}
{
PFrElement aux_dest = &lvar[254];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[375],15);
}
{
PFrElement aux_dest = &lvar[269];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[375],15);
}
{
PFrElement aux_dest = &lvar[284];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[375],15);
}
{
PFrElement aux_dest = &lvar[299];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[375],15);
}
{
PFrElement aux_dest = &lvar[314];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[375],15);
}
{
PFrElement aux_dest = &lvar[329];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[375],15);
}
{
PFrElement aux_dest = &lvar[344];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[375],15);
}
{
PFrElement aux_dest = &lvar[359];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[375],15);
}
{
PFrElement aux_dest = &lvar[438];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[439];
// load src
// end load src
Fr_copy(aux_dest,&lvar[438]);
}
{
PFrElement aux_dest = &lvar[440];
// load src
// end load src
Fr_copy(aux_dest,&lvar[438]);
}
{
PFrElement aux_dest = &lvar[441];
// load src
// end load src
Fr_copy(aux_dest,&lvar[438]);
}
{
PFrElement aux_dest = &lvar[442];
// load src
// end load src
Fr_copy(aux_dest,&lvar[438]);
}
{
PFrElement aux_dest = &lvar[443];
// load src
// end load src
Fr_copy(aux_dest,&lvar[438]);
}
{
PFrElement aux_dest = &lvar[444];
// load src
// end load src
Fr_copy(aux_dest,&lvar[438]);
}
{
PFrElement aux_dest = &lvar[390];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[439],6);
}
{
PFrElement aux_dest = &lvar[396];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[439],6);
}
{
PFrElement aux_dest = &lvar[402];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[439],6);
}
{
PFrElement aux_dest = &lvar[408];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[439],6);
}
{
PFrElement aux_dest = &lvar[414];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[439],6);
}
{
PFrElement aux_dest = &lvar[420];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[439],6);
}
{
PFrElement aux_dest = &lvar[426];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[439],6);
}
{
PFrElement aux_dest = &lvar[432];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[439],6);
}
{
PFrElement aux_dest = &lvar[517];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[518];
// load src
// end load src
Fr_copy(aux_dest,&lvar[517]);
}
{
PFrElement aux_dest = &lvar[519];
// load src
// end load src
Fr_copy(aux_dest,&lvar[517]);
}
{
PFrElement aux_dest = &lvar[520];
// load src
// end load src
Fr_copy(aux_dest,&lvar[517]);
}
{
PFrElement aux_dest = &lvar[521];
// load src
// end load src
Fr_copy(aux_dest,&lvar[517]);
}
{
PFrElement aux_dest = &lvar[522];
// load src
// end load src
Fr_copy(aux_dest,&lvar[517]);
}
{
PFrElement aux_dest = &lvar[523];
// load src
// end load src
Fr_copy(aux_dest,&lvar[517]);
}
{
PFrElement aux_dest = &lvar[524];
// load src
// end load src
Fr_copy(aux_dest,&lvar[517]);
}
{
PFrElement aux_dest = &lvar[525];
// load src
// end load src
Fr_copy(aux_dest,&lvar[517]);
}
{
PFrElement aux_dest = &lvar[526];
// load src
// end load src
Fr_copy(aux_dest,&lvar[517]);
}
{
PFrElement aux_dest = &lvar[445];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[518],9);
}
{
PFrElement aux_dest = &lvar[454];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[518],9);
}
{
PFrElement aux_dest = &lvar[463];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[518],9);
}
{
PFrElement aux_dest = &lvar[472];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[518],9);
}
{
PFrElement aux_dest = &lvar[481];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[518],9);
}
{
PFrElement aux_dest = &lvar[490];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[518],9);
}
{
PFrElement aux_dest = &lvar[499];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[518],9);
}
{
PFrElement aux_dest = &lvar[508];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[518],9);
}
{
PFrElement aux_dest = &lvar[551];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[552];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[553];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[554];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[551],3);
}
{
PFrElement aux_dest = &lvar[527];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[554],3);
}
{
PFrElement aux_dest = &lvar[530];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[554],3);
}
{
PFrElement aux_dest = &lvar[533];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[554],3);
}
{
PFrElement aux_dest = &lvar[536];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[554],3);
}
{
PFrElement aux_dest = &lvar[539];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[554],3);
}
{
PFrElement aux_dest = &lvar[542];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[554],3);
}
{
PFrElement aux_dest = &lvar[545];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[554],3);
}
{
PFrElement aux_dest = &lvar[548];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[554],3);
}
{
PFrElement aux_dest = &lvar[941];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[942];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[943];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[944];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[947];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[950];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[953];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[956];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[959];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[962];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[965];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[968];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[971];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[974];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[977];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[980];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[983];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[986];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[989];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[941],3);
}
{
PFrElement aux_dest = &lvar[557];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[944],48);
}
{
PFrElement aux_dest = &lvar[605];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[944],48);
}
{
PFrElement aux_dest = &lvar[653];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[944],48);
}
{
PFrElement aux_dest = &lvar[701];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[944],48);
}
{
PFrElement aux_dest = &lvar[749];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[944],48);
}
{
PFrElement aux_dest = &lvar[797];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[944],48);
}
{
PFrElement aux_dest = &lvar[845];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[944],48);
}
{
PFrElement aux_dest = &lvar[893];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[944],48);
}
{
PFrElement aux_dest = &lvar[1376];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[1377];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[1378];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
{
PFrElement aux_dest = &lvar[1379];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1382];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1385];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1388];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1391];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1394];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1397];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1400];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1403];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1406];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1409];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1412];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1415];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1418];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1421];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[1424];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1376],3);
}
{
PFrElement aux_dest = &lvar[992];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1379],48);
}
{
PFrElement aux_dest = &lvar[1040];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1379],48);
}
{
PFrElement aux_dest = &lvar[1088];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1379],48);
}
{
PFrElement aux_dest = &lvar[1136];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1379],48);
}
{
PFrElement aux_dest = &lvar[1184];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1379],48);
}
{
PFrElement aux_dest = &lvar[1232];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1379],48);
}
{
PFrElement aux_dest = &lvar[1280];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1379],48);
}
{
PFrElement aux_dest = &lvar[1328];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[1379],48);
}
{
PFrElement aux_dest = &lvar[1427];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 903
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[1428];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[29]); // line circom 906
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((((15 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 0) + 9)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((15 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 148)]);
}
{
PFrElement aux_dest = &lvar[1428];
// load src
Fr_add(&expaux[0],&lvar[1428],&circuitConstants[1]); // line circom 906
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[29]); // line circom 906
}
{
PFrElement aux_dest = &lvar[1428];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[12]); // line circom 910
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((((12 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 0) + 145)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((12 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 268)]);
}
{
PFrElement aux_dest = &lvar[1428];
// load src
Fr_add(&expaux[0],&lvar[1428],&circuitConstants[1]); // line circom 910
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[12]); // line circom 910
}
{
PFrElement aux_dest = &lvar[1428];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[29]); // line circom 914
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((((15 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 0) + 254)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((15 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 364)]);
}
{
PFrElement aux_dest = &lvar[1428];
// load src
Fr_add(&expaux[0],&lvar[1428],&circuitConstants[1]); // line circom 914
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[29]); // line circom 914
}
{
PFrElement aux_dest = &lvar[1428];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[6]); // line circom 918
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((((6 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 0) + 390)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((6 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 484)]);
}
{
PFrElement aux_dest = &lvar[1428];
// load src
Fr_add(&expaux[0],&lvar[1428],&circuitConstants[1]); // line circom 918
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[6]); // line circom 918
}
{
PFrElement aux_dest = &lvar[1428];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[9]); // line circom 921
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((((9 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 0) + 445)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((9 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 532)]);
}
{
PFrElement aux_dest = &lvar[1428];
// load src
Fr_add(&expaux[0],&lvar[1428],&circuitConstants[1]); // line circom 921
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[9]); // line circom 921
}
{
PFrElement aux_dest = &lvar[1428];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[3]); // line circom 926
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[1429];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1429],&circuitConstants[30]); // line circom 927
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((((48 * Fr_toInt(&lvar[1427])) + (3 * Fr_toInt(&lvar[1429]))) + (1 * Fr_toInt(&lvar[1428]))) + 557)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((48 * Fr_toInt(&lvar[1427])) + (1 * ((Fr_toInt(&lvar[1429]) * 3) + Fr_toInt(&lvar[1428])))) + 2372)]);
}
{
PFrElement aux_dest = &lvar[1429];
// load src
Fr_add(&expaux[0],&lvar[1429],&circuitConstants[1]); // line circom 927
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1429],&circuitConstants[30]); // line circom 927
}
{
PFrElement aux_dest = &lvar[1429];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1429],&circuitConstants[30]); // line circom 930
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[((((48 * Fr_toInt(&lvar[1427])) + (3 * Fr_toInt(&lvar[1429]))) + (1 * Fr_toInt(&lvar[1428]))) + 992)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((48 * Fr_toInt(&lvar[1427])) + (1 * ((Fr_toInt(&lvar[1429]) * 3) + Fr_toInt(&lvar[1428])))) + 2980)]);
}
{
PFrElement aux_dest = &lvar[1429];
// load src
Fr_add(&expaux[0],&lvar[1429],&circuitConstants[1]); // line circom 930
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1429],&circuitConstants[30]); // line circom 930
}
{
PFrElement aux_dest = &lvar[1428];
// load src
Fr_add(&expaux[0],&lvar[1428],&circuitConstants[1]); // line circom 926
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[3]); // line circom 926
}
{
PFrElement aux_dest = &lvar[1427];
// load src
Fr_add(&expaux[0],&lvar[1427],&circuitConstants[1]); // line circom 903
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 903
}
{
PFrElement aux_dest = &lvar[1427];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 942
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[0])) + 27);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 74];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 3488]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_18_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[0])) + 27);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 59];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((11 * Fr_toInt(&lvar[1427])) + 3552)],11);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_18_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[0])) + 27);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 70];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3],4);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_18_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[0])) + 27);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((44 * Fr_toInt(&lvar[1427])) + 604)],44);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_18_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[0])) + 27);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[((15 * Fr_toInt(&lvar[1427])) + 9)],15);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 15)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_18_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
PFrElement aux_dest = &lvar[1427];
// load src
Fr_add(&expaux[0],&lvar[1427],&circuitConstants[1]); // line circom 942
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[0];
// load src
Fr_add(&expaux[0],&lvar[0],&circuitConstants[1]); // line circom 942
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 942
}
{
PFrElement aux_dest = &lvar[1427];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 946
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 35);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 71];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 3488]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_21_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 35);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 56];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((11 * Fr_toInt(&lvar[1427])) + 3552)],11);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_21_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 35);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 67];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 7],4);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_21_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 35);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 12];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((44 * Fr_toInt(&lvar[1427])) + 956)],44);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_21_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[1])) + 35);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[((12 * Fr_toInt(&lvar[1427])) + 145)],12);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 12)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_21_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
PFrElement aux_dest = &lvar[1427];
// load src
Fr_add(&expaux[0],&lvar[1427],&circuitConstants[1]); // line circom 946
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[1];
// load src
Fr_add(&expaux[0],&lvar[1],&circuitConstants[1]); // line circom 946
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 946
}
{
PFrElement aux_dest = &lvar[1427];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 950
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[2])) + 43);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 74];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 3488]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_18_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[2])) + 43);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 59];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((11 * Fr_toInt(&lvar[1427])) + 3552)],11);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_18_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[2])) + 43);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 70];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 11],4);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_18_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[2])) + 43);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 15];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((44 * Fr_toInt(&lvar[1427])) + 1308)],44);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_18_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[2])) + 43);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[((15 * Fr_toInt(&lvar[1427])) + 254)],15);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 15)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_18_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
PFrElement aux_dest = &lvar[1427];
// load src
Fr_add(&expaux[0],&lvar[1427],&circuitConstants[1]); // line circom 950
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[2];
// load src
Fr_add(&expaux[0],&lvar[2],&circuitConstants[1]); // line circom 950
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 950
}
{
PFrElement aux_dest = &lvar[1427];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 954
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[3])) + 51);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 65];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 3488]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_24_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[3])) + 51);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 50];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((11 * Fr_toInt(&lvar[1427])) + 3552)],11);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_24_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[3])) + 51);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 61];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 15],4);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_24_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[3])) + 51);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((44 * Fr_toInt(&lvar[1427])) + 1660)],44);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_24_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[3])) + 51);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[((6 * Fr_toInt(&lvar[1427])) + 390)],6);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 6)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_24_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
PFrElement aux_dest = &lvar[1427];
// load src
Fr_add(&expaux[0],&lvar[1427],&circuitConstants[1]); // line circom 954
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[3];
// load src
Fr_add(&expaux[0],&lvar[3],&circuitConstants[1]); // line circom 954
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 954
}
{
PFrElement aux_dest = &lvar[1427];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 958
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[4])) + 59);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 68];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 3488]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_27_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[4])) + 59);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 53];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((11 * Fr_toInt(&lvar[1427])) + 3552)],11);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_27_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[4])) + 59);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 64];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3484],4);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_27_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[4])) + 59);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 9];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((44 * Fr_toInt(&lvar[1427])) + 2012)],44);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 44)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_27_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[4])) + 59);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[((9 * Fr_toInt(&lvar[1427])) + 445)],9);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 9)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_27_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
PFrElement aux_dest = &lvar[1427];
// load src
Fr_add(&expaux[0],&lvar[1427],&circuitConstants[1]); // line circom 958
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[4];
// load src
Fr_add(&expaux[0],&lvar[4],&circuitConstants[1]); // line circom 958
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 958
}
{
PFrElement aux_dest = &lvar[1427];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 962
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[1428];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[7]); // line circom 964
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + (((7 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 3640)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((11 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 3552)]);
}
{
PFrElement aux_dest = &lvar[1428];
// load src
Fr_add(&expaux[0],&lvar[1428],&circuitConstants[1]); // line circom 964
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[7]); // line circom 964
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[5])) + 67);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 87];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 3488]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_31_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[5])) + 67);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 76];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((7 * Fr_toInt(&lvar[1427])) + 3640)],7);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 7)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_31_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[5])) + 67);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 83];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 2364],4);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_31_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[5])) + 67);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 48];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((28 * Fr_toInt(&lvar[1427])) + 2756)],28);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 28)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_31_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[5])) + 67);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[((48 * Fr_toInt(&lvar[1427])) + 557)],48);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_31_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
PFrElement aux_dest = &lvar[1427];
// load src
Fr_add(&expaux[0],&lvar[1427],&circuitConstants[1]); // line circom 962
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[5];
// load src
Fr_add(&expaux[0],&lvar[5],&circuitConstants[1]); // line circom 962
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 962
}
{
PFrElement aux_dest = &lvar[1427];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 968
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &lvar[1428];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[3]); // line circom 970
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 3696)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((11 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 3552)]);
}
{
PFrElement aux_dest = &lvar[1428];
// load src
Fr_add(&expaux[0],&lvar[1428],&circuitConstants[1]); // line circom 970
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[3]); // line circom 970
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[6])) + 75);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 67];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 3488]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_34_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[6])) + 75);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 60];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((3 * Fr_toInt(&lvar[1427])) + 3696)],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_34_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[6])) + 75);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 63];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 2368],4);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 4)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_34_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[6])) + 75);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 48];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((12 * Fr_toInt(&lvar[1427])) + 3364)],12);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 12)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_34_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[6])) + 75);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[((48 * Fr_toInt(&lvar[1427])) + 992)],48);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyMerkleHash_34_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
PFrElement aux_dest = &lvar[1427];
// load src
Fr_add(&expaux[0],&lvar[1427],&circuitConstants[1]); // line circom 968
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[6];
// load src
Fr_add(&expaux[0],&lvar[6],&circuitConstants[1]); // line circom 968
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 968
}
{
PFrElement aux_dest = &lvar[1427];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 979
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[7])) + 3);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3531],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(CalculateFRIPolValue0_36_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[7])) + 3);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 17];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3534],6);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 6)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(CalculateFRIPolValue0_36_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[7])) + 3);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 200];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((9 * Fr_toInt(&lvar[1427])) + 532)],9);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 9)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(CalculateFRIPolValue0_36_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[7])) + 3);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 23];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 19],129);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 129)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(CalculateFRIPolValue0_36_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[7])) + 3);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((11 * Fr_toInt(&lvar[1427])) + 3552)],11);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(CalculateFRIPolValue0_36_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[7])) + 3);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 152];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((15 * Fr_toInt(&lvar[1427])) + 148)],15);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 15)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(CalculateFRIPolValue0_36_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[7])) + 3);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 167];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((12 * Fr_toInt(&lvar[1427])) + 268)],12);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 12)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(CalculateFRIPolValue0_36_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[7])) + 3);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 179];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((15 * Fr_toInt(&lvar[1427])) + 364)],15);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 15)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(CalculateFRIPolValue0_36_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[7])) + 3);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 194];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((6 * Fr_toInt(&lvar[1427])) + 484)],6);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 6)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(CalculateFRIPolValue0_36_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
PFrElement aux_dest = &signalValues[mySignalStart + ((3 * Fr_toInt(&lvar[1427])) + 3489)];
// load src
{
int aux1 = ((1 * Fr_toInt(&lvar[7])) + 3);
int aux2 = 0;
for (int i = 0; i < 3; i++) {
ctx->numThreadMutex.lock();
ctx->numThread--;
ctx->numThreadMutex.unlock();
ctx->ntcvs.notify_one();
std::unique_lock<std::mutex> lk(ctx->componentMemory[mySubcomponents[aux1]].mutexes[aux2 + i]);
ctx->componentMemory[mySubcomponents[aux1]].cvs[aux2 + i].wait(lk, [ctx,mySubcomponents,aux1,aux2, i]() {return ctx->componentMemory[mySubcomponents[aux1]].outputIsSet[aux2 + i];});
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;
}
}
// end load src
Fr_copyn(aux_dest,&ctx->signalValues[ctx->componentMemory[mySubcomponents[((1 * Fr_toInt(&lvar[7])) + 3)]].signalStart + 0],3);
}
{
PFrElement aux_dest = &lvar[1427];
// load src
Fr_add(&expaux[0],&lvar[1427],&circuitConstants[1]); // line circom 979
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[7];
// load src
Fr_add(&expaux[0],&lvar[7],&circuitConstants[1]); // line circom 979
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 979
}
{
PFrElement aux_dest = &lvar[1427];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 990
while(Fr_isTrue(&expaux[0])){
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 83);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 62];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 3488]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyQuery0_39_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 83);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((11 * Fr_toInt(&lvar[1427])) + 3552)],11);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 11)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyQuery0_39_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 83);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 11];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((3 * Fr_toInt(&lvar[1427])) + 3489)],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyQuery0_39_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 83);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 14];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[((48 * Fr_toInt(&lvar[1427])) + 557)],48);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyQuery0_39_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
PFrElement aux_dest = &lvar[1428];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[7]); // line circom 1004
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + (((7 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 3720)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((11 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 3552)]);
}
{
PFrElement aux_dest = &lvar[1428];
// load src
Fr_add(&expaux[0],&lvar[1428],&circuitConstants[1]); // line circom 1004
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[7]); // line circom 1004
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 11);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 106];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 3488]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyFRI0_51_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 11);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 7];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3543],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyFRI0_51_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 11);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((7 * Fr_toInt(&lvar[1427])) + 3720)],7);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 7)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyFRI0_51_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 11);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 10];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[((48 * Fr_toInt(&lvar[1427])) + 557)],48);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyFRI0_51_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 11);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 58];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[((48 * Fr_toInt(&lvar[1427])) + 992)],48);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyFRI0_51_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
PFrElement aux_dest = &lvar[1428];
// load src
// end load src
Fr_copy(aux_dest,&circuitConstants[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[3]); // line circom 1008
while(Fr_isTrue(&expaux[0])){
{
PFrElement aux_dest = &signalValues[mySignalStart + (((3 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 3776)];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + (((11 * Fr_toInt(&lvar[1427])) + (1 * Fr_toInt(&lvar[1428]))) + 3552)]);
}
{
PFrElement aux_dest = &lvar[1428];
// load src
Fr_add(&expaux[0],&lvar[1428],&circuitConstants[1]); // line circom 1008
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1428],&circuitConstants[3]); // line circom 1008
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 19);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 78];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 3488]);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyFRI0_53_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 19);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 3];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3546],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyFRI0_53_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 19);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + ((3 * Fr_toInt(&lvar[1427])) + 3776)],3);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 3)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyFRI0_53_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 19);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 6];
// load src
// end load src
Fr_copyn(aux_dest,&lvar[((48 * Fr_toInt(&lvar[1427])) + 992)],48);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 48)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyFRI0_53_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
uint cmp_index_ref = ((1 * Fr_toInt(&lvar[8])) + 19);
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 54];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3460],24);
}
// run sub component if needed
if(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 24)){
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyFRI0_53_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;

}
}
{
PFrElement aux_dest = &lvar[1427];
// load src
Fr_add(&expaux[0],&lvar[1427],&circuitConstants[1]); // line circom 990
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
{
PFrElement aux_dest = &lvar[8];
// load src
Fr_add(&expaux[0],&lvar[8],&circuitConstants[1]); // line circom 990
// end load src
Fr_copy(aux_dest,&expaux[0]);
}
Fr_lt(&expaux[0],&lvar[1427],&circuitConstants[8]); // line circom 990
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 24];
// load src
// end load src
Fr_copy(aux_dest,&signalValues[mySignalStart + 3488]);
}
// no need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 1;
assert(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter > 0);
}
{
uint cmp_index_ref = 2;
{
PFrElement aux_dest = &ctx->signalValues[ctx->componentMemory[mySubcomponents[cmp_index_ref]].signalStart + 0];
// load src
// end load src
Fr_copyn(aux_dest,&signalValues[mySignalStart + 3460],24);
}
// need to run sub component
ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter -= 24;
assert(!(ctx->componentMemory[mySubcomponents[cmp_index_ref]].inputCounter));
ctx->componentMemory[ctx_index].sbct[cmp_index_ref] = std::thread(VerifyFinalPol0_61_run_parallel,mySubcomponents[cmp_index_ref],ctx);
std::unique_lock<std::mutex> lkt(ctx->numThreadMutex);
ctx->ntcvs.wait(lkt, [ctx]() {return ctx->numThread <  ctx->maxThread; });
ctx->numThread++;
}
{
for (uint i = 0; i < 91; i++) {
if (ctx->componentMemory[ctx_index].sbct[i].joinable()) {
ctx->componentMemory[ctx_index].sbct[i].join();
}
}
}
for (uint i = 0; i < 91; i++){
uint index_subc = ctx->componentMemory[ctx_index].subcomponents[i];
if (index_subc != 0)release_memory_component(ctx,index_subc);
}
}

void run(Circom_CalcWit* ctx){
StarkVerifier0_62_create(1,0,ctx,"main",0);
StarkVerifier0_62_run(0,ctx);
}

