const int MODULE_ID = 1;

if (!defined(std_alpha)) {
challenge stage(2) std_alpha;
}
if (!defined(std_beta)) {
challenge stage(2) std_beta;
}

public mod;

air Module(int N = 2**4) {

    airgroupval aggregate(sum) gsum_module;

    col fixed L1 = [1,0...];
    col witness x, q, x_mod;

    // TODO: verify range checks and x_mod < mod
    x === q * mod + x_mod;

    col witness stage(2) gsum;

    @gsum { reference: gsum, numerator: 1, denominator: (((x_mod * std_alpha + x) * std_alpha) + MODULE_ID + std_beta)}

    @airgroupValue { reference: gsum_module, expression: gsum, row_index: N - 1 }

    (gsum - 'gsum * (1 - L1)) * (((x_mod * std_alpha + x) * std_alpha) + MODULE_ID + std_beta) - 1 === 0;

    L1' * (gsum - gsum_module) === 0;
}

Module(2**4);